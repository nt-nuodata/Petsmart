{"Edges":[{"transformationType":"Sequence","id":"e-0","source":"","target":"SEQ_MA_EVENT_ID"},{"transformationType":"Source Definition","id":"e-1","source":"","target":"MA_DC_COST_ADJ_CTRL"},{"transformationType":"Source Definition","id":"e-2","source":"","target":"MA_EVENT"},{"transformationType":"Source Definition","id":"e-3","source":"","target":"DAYS"},{"transformationType":"Source Qualifier","id":"e-4","source":"DAYS","target":"SQ_MA_DC_COST_ADJ_CTRL_UPDATES"},{"transformationType":"Source Qualifier","id":"e-5","source":"MA_EVENT","target":"SQ_MA_DC_COST_ADJ_CTRL_UPDATES"},{"transformationType":"Source Qualifier","id":"e-6","source":"MA_DC_COST_ADJ_CTRL","target":"SQ_MA_DC_COST_ADJ_CTRL_UPDATES"},{"transformationType":"Expression","id":"e-7","source":"SQ_MA_DC_COST_ADJ_CTRL_UPDATES","target":"EXP_ORIG"},{"transformationType":"Source Qualifier","id":"e-8","source":"DAYS","target":"SQ_MA_DC_COST_ADJ_CTRL_INSERTS"},{"transformationType":"Source Qualifier","id":"e-9","source":"MA_EVENT","target":"SQ_MA_DC_COST_ADJ_CTRL_INSERTS"},{"transformationType":"Source Qualifier","id":"e-10","source":"MA_DC_COST_ADJ_CTRL","target":"SQ_MA_DC_COST_ADJ_CTRL_INSERTS"},{"transformationType":"Expression","id":"e-11","source":"SEQ_MA_EVENT_ID","target":"EXP_NEW"},{"transformationType":"Expression","id":"e-12","source":"SQ_MA_DC_COST_ADJ_CTRL_INSERTS","target":"EXP_NEW"},{"transformationType":"Custom Transformation","id":"e-13","source":"EXP_ORIG","target":"UNI_NEW_ORIG"},{"transformationType":"Custom Transformation","id":"e-14","source":"EXP_NEW","target":"UNI_NEW_ORIG"},{"transformationType":"Expression","id":"e-15","source":"UNI_NEW_ORIG","target":"EXP_INS_UPD"},{"transformationType":"Update Strategy","id":"e-16","source":"UNI_NEW_ORIG","target":"UPD_STRATEGY"},{"transformationType":"Target Definition","id":"e-17","source":"UPD_STRATEGY","target":"MA_EVENT"},{"transformationType":"Target Definition","id":"e-18","source":"EXP_INS_UPD","target":"MA_EVENT_RESTATE_HIST"}],"Nodes":[{"data":{"transformationType":"Sequence","label":"SEQ_MA_EVENT_ID","queries":["spark.sql(\"\"\"CREATE TABLE SEQ_MA_EVENT_ID(NEXTVAL BIGINT,\nCURRVAL BIGINT,\nIncrement_By Int);\"\"\")","spark.sql(\"\"\"INSERT INTO SEQ_MA_EVENT_ID(NEXTVAL BIGINT,\nCURRVAL BIGINT,\nIncrement_By Int) VALUES(2, 1, 1)\"\"\")"]},"id":"SEQ_MA_EVENT_ID","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"MA_DC_COST_ADJ_CTRL","queries":["df_1=spark.sql(\"\"\"\n    SELECT\n        FISCAL_MO AS FISCAL_MO,\n        MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        EST_DC_COST_USD AS EST_DC_COST_USD,\n        ACT_DC_COST_USD AS ACT_DC_COST_USD,\n        DC_COST_ADJ_PCT AS DC_COST_ADJ_PCT,\n        UPDATE_TSTMP AS UPDATE_TSTMP,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        MA_DC_COST_ADJ_CTRL\"\"\")","df_1.createOrReplaceTempView(\"MA_DC_COST_ADJ_CTRL_1\")"]},"id":"MA_DC_COST_ADJ_CTRL","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"MA_EVENT","queries":["df_2=spark.sql(\"\"\"\n    SELECT\n        MA_EVENT_ID AS MA_EVENT_ID,\n        OFFER_ID AS OFFER_ID,\n        SAP_DEPT_ID AS SAP_DEPT_ID,\n        PRODUCT_ID AS PRODUCT_ID,\n        COUNTRY_CD AS COUNTRY_CD,\n        START_DT AS START_DT,\n        END_DT AS END_DT,\n        MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\n        LOCATION_ID AS LOCATION_ID,\n        MOVEMENT_ID AS MOVEMENT_ID,\n        VALUATION_CLASS_CD AS VALUATION_CLASS_CD,\n        GL_ACCT_NBR AS GL_ACCT_NBR,\n        LOCATION_TYPE_ID AS LOCATION_TYPE_ID,\n        ROYALTY_BRAND_ID AS ROYALTY_BRAND_ID,\n        BRAND_CD AS BRAND_CD,\n        MA_FORMULA_CD AS MA_FORMULA_CD,\n        FISCAL_MO AS FISCAL_MO,\n        SAP_CATEGORY_ID AS SAP_CATEGORY_ID,\n        FROM_LOCATION_ID AS FROM_LOCATION_ID,\n        SOURCE_VENDOR_ID AS SOURCE_VENDOR_ID,\n        COMPANY_ID AS COMPANY_ID,\n        MA_EVENT_DESC AS MA_EVENT_DESC,\n        EM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,\n        EM_COMMENT AS EM_COMMENT,\n        EM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,\n        EM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,\n        EM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,\n        EM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,\n        EM_VENDOR_ID AS EM_VENDOR_ID,\n        EM_VENDOR_NAME AS EM_VENDOR_NAME,\n        EM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,\n        VENDOR_NAME_TXT AS VENDOR_NAME_TXT,\n        MA_PCT_IND AS MA_PCT_IND,\n        MA_AMT AS MA_AMT,\n        MA_MAX_AMT AS MA_MAX_AMT,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        MA_EVENT\"\"\")","df_2.createOrReplaceTempView(\"MA_EVENT_2\")"]},"id":"MA_EVENT","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"DAYS","queries":["df_3=spark.sql(\"\"\"\n    SELECT\n        DAY_DT AS DAY_DT,\n        BUSINESS_DAY_FLAG AS BUSINESS_DAY_FLAG,\n        HOLIDAY_FLAG AS HOLIDAY_FLAG,\n        DAY_OF_WK_NAME AS DAY_OF_WK_NAME,\n        DAY_OF_WK_NAME_ABBR AS DAY_OF_WK_NAME_ABBR,\n        DAY_OF_WK_NBR AS DAY_OF_WK_NBR,\n        CAL_DAY_OF_MO_NBR AS CAL_DAY_OF_MO_NBR,\n        CAL_DAY_OF_YR_NBR AS CAL_DAY_OF_YR_NBR,\n        CAL_WK AS CAL_WK,\n        CAL_WK_NBR AS CAL_WK_NBR,\n        CAL_MO AS CAL_MO,\n        CAL_MO_NBR AS CAL_MO_NBR,\n        CAL_MO_NAME AS CAL_MO_NAME,\n        CAL_MO_NAME_ABBR AS CAL_MO_NAME_ABBR,\n        CAL_QTR AS CAL_QTR,\n        CAL_QTR_NBR AS CAL_QTR_NBR,\n        CAL_HALF AS CAL_HALF,\n        CAL_YR AS CAL_YR,\n        FISCAL_DAY_OF_MO_NBR AS FISCAL_DAY_OF_MO_NBR,\n        FISCAL_DAY_OF_YR_NBR AS FISCAL_DAY_OF_YR_NBR,\n        FISCAL_WK AS FISCAL_WK,\n        FISCAL_WK_NBR AS FISCAL_WK_NBR,\n        FISCAL_MO AS FISCAL_MO,\n        FISCAL_MO_NBR AS FISCAL_MO_NBR,\n        FISCAL_MO_NAME AS FISCAL_MO_NAME,\n        FISCAL_MO_NAME_ABBR AS FISCAL_MO_NAME_ABBR,\n        FISCAL_QTR AS FISCAL_QTR,\n        FISCAL_QTR_NBR AS FISCAL_QTR_NBR,\n        FISCAL_HALF AS FISCAL_HALF,\n        FISCAL_YR AS FISCAL_YR,\n        LYR_WEEK_DT AS LYR_WEEK_DT,\n        LWK_WEEK_DT AS LWK_WEEK_DT,\n        WEEK_DT AS WEEK_DT,\n        EST_TIME_CONV_AMT AS EST_TIME_CONV_AMT,\n        EST_TIME_CONV_HRS AS EST_TIME_CONV_HRS,\n        ES0_TIME_CONV_AMT AS ES0_TIME_CONV_AMT,\n        ES0_TIME_CONV_HRS AS ES0_TIME_CONV_HRS,\n        CST_TIME_CONV_AMT AS CST_TIME_CONV_AMT,\n        CST_TIME_CONV_HRS AS CST_TIME_CONV_HRS,\n        CS0_TIME_CONV_AMT AS CS0_TIME_CONV_AMT,\n        CS0_TIME_CONV_HRS AS CS0_TIME_CONV_HRS,\n        MST_TIME_CONV_AMT AS MST_TIME_CONV_AMT,\n        MST_TIME_CONV_HRS AS MST_TIME_CONV_HRS,\n        MS0_TIME_CONV_AMT AS MS0_TIME_CONV_AMT,\n        MS0_TIME_CONV_HRS AS MS0_TIME_CONV_HRS,\n        PST_TIME_CONV_AMT AS PST_TIME_CONV_AMT,\n        PST_TIME_CONV_HRS AS PST_TIME_CONV_HRS,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        DAYS\"\"\")","df_3.createOrReplaceTempView(\"DAYS_3\")"]},"id":"DAYS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_MA_DC_COST_ADJ_CTRL_UPDATES","queries":["df_4=spark.sql(\"\"\"\n    SELECT\n        M.MA_EVENT_ID,\n        D.START_DT,\n        D.END_DT,\n        M.MA_EVENT_TYPE_ID,\n        11 MA_EVENT_SOURCE_ID,\n        D.FISCAL_MO,\n        'DC Cost Adj: Fiscal Mo=' || MDCAC.FISCAL_MO::VARCHAR (10) MA_EVENT_DESC,\n        1 MA_PCT_IND,\n        MDCAC.DC_COST_ADJ_PCT * 100 NEW_MA_AMT,\n        M.MA_AMT AS ORIG_MA_AMT,\n        'U' AS INS_UPD_FLAG,\n        M.LOAD_DT \n    FROM\n        MA_DC_COST_ADJ_CTRL MDCAC \n    JOIN\n        (\n            SELECT\n                FISCAL_MO,\n                MIN(DAY_DT) START_DT,\n                MAX(DAY_DT) END_DT \n            FROM\n                DAYS \n            GROUP BY\n                FISCAL_MO\n        ) D \n            ON MDCAC.FISCAL_MO = D.FISCAL_MO \n    JOIN\n        MA_EVENT M \n            ON MDCAC.MA_EVENT_TYPE_ID = M.MA_EVENT_TYPE_ID \n            AND MDCAC.FISCAL_MO = M.FISCAL_MO \n            AND M.MA_EVENT_SOURCE_ID = 11 \n    WHERE\n        NEW_MA_AMT <> M.MA_AMT\"\"\")","df_4.createOrReplaceTempView(\"SQ_MA_DC_COST_ADJ_CTRL_UPDATES_4\")"]},"id":"SQ_MA_DC_COST_ADJ_CTRL_UPDATES","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_MA_DC_COST_ADJ_CTRL_UPDATES","queries":["df_4=spark.sql(\"\"\"\n    SELECT\n        M.MA_EVENT_ID,\n        D.START_DT,\n        D.END_DT,\n        M.MA_EVENT_TYPE_ID,\n        11 MA_EVENT_SOURCE_ID,\n        D.FISCAL_MO,\n        'DC Cost Adj: Fiscal Mo=' || MDCAC.FISCAL_MO::VARCHAR (10) MA_EVENT_DESC,\n        1 MA_PCT_IND,\n        MDCAC.DC_COST_ADJ_PCT * 100 NEW_MA_AMT,\n        M.MA_AMT AS ORIG_MA_AMT,\n        'U' AS INS_UPD_FLAG,\n        M.LOAD_DT \n    FROM\n        MA_DC_COST_ADJ_CTRL MDCAC \n    JOIN\n        (\n            SELECT\n                FISCAL_MO,\n                MIN(DAY_DT) START_DT,\n                MAX(DAY_DT) END_DT \n            FROM\n                DAYS \n            GROUP BY\n                FISCAL_MO\n        ) D \n            ON MDCAC.FISCAL_MO = D.FISCAL_MO \n    JOIN\n        MA_EVENT M \n            ON MDCAC.MA_EVENT_TYPE_ID = M.MA_EVENT_TYPE_ID \n            AND MDCAC.FISCAL_MO = M.FISCAL_MO \n            AND M.MA_EVENT_SOURCE_ID = 11 \n    WHERE\n        NEW_MA_AMT <> M.MA_AMT\"\"\")","df_4.createOrReplaceTempView(\"SQ_MA_DC_COST_ADJ_CTRL_UPDATES_4\")"]},"id":"SQ_MA_DC_COST_ADJ_CTRL_UPDATES","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_MA_DC_COST_ADJ_CTRL_UPDATES","queries":["df_4=spark.sql(\"\"\"\n    SELECT\n        M.MA_EVENT_ID,\n        D.START_DT,\n        D.END_DT,\n        M.MA_EVENT_TYPE_ID,\n        11 MA_EVENT_SOURCE_ID,\n        D.FISCAL_MO,\n        'DC Cost Adj: Fiscal Mo=' || MDCAC.FISCAL_MO::VARCHAR (10) MA_EVENT_DESC,\n        1 MA_PCT_IND,\n        MDCAC.DC_COST_ADJ_PCT * 100 NEW_MA_AMT,\n        M.MA_AMT AS ORIG_MA_AMT,\n        'U' AS INS_UPD_FLAG,\n        M.LOAD_DT \n    FROM\n        MA_DC_COST_ADJ_CTRL MDCAC \n    JOIN\n        (\n            SELECT\n                FISCAL_MO,\n                MIN(DAY_DT) START_DT,\n                MAX(DAY_DT) END_DT \n            FROM\n                DAYS \n            GROUP BY\n                FISCAL_MO\n        ) D \n            ON MDCAC.FISCAL_MO = D.FISCAL_MO \n    JOIN\n        MA_EVENT M \n            ON MDCAC.MA_EVENT_TYPE_ID = M.MA_EVENT_TYPE_ID \n            AND MDCAC.FISCAL_MO = M.FISCAL_MO \n            AND M.MA_EVENT_SOURCE_ID = 11 \n    WHERE\n        NEW_MA_AMT <> M.MA_AMT\"\"\")","df_4.createOrReplaceTempView(\"SQ_MA_DC_COST_ADJ_CTRL_UPDATES_4\")"]},"id":"SQ_MA_DC_COST_ADJ_CTRL_UPDATES","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_ORIG","queries":["df_5=spark.sql(\"\"\"\n    SELECT\n        MA_EVENT_ID AS MA_EVENT_ID,\n        START_DT AS START_DT,\n        END_DT AS END_DT,\n        MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\n        FISCAL_MO AS FISCAL_MO,\n        MA_EVENT_DESC AS MA_EVENT_DESC,\n        MA_PCT_IND AS MA_PCT_IND,\n        NEW_MA_AMT AS NEW_MA_AMT,\n        ORIG_MA_AMT AS ORIG_MA_AMT,\n        INS_UPD_FLAG AS INS_UPD_FLAG,\n        current_timestamp AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        SQ_MA_DC_COST_ADJ_CTRL_UPDATES_4\"\"\")","df_5.createOrReplaceTempView(\"EXP_ORIG_5\")"]},"id":"EXP_ORIG","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_MA_DC_COST_ADJ_CTRL_INSERTS","queries":["df_6=spark.sql(\"\"\"\n    SELECT\n        D.START_DT,\n        D.END_DT,\n        MDCAC.MA_EVENT_TYPE_ID,\n        11 MA_EVENT_SOURCE_ID,\n        MDCAC.FISCAL_MO,\n        'DC Cost Adj: Fiscal Mo=' || MDCAC.FISCAL_MO::VARCHAR (10) MA_EVENT_DESC,\n        1 MA_PCT_IND,\n        MDCAC.DC_COST_ADJ_PCT * 100 NEW_MA_AMT,\n        NEW_MA_AMT AS ORIG_MA_AMT,\n        'I' AS INS_UPD_FLAG \n    FROM\n        MA_DC_COST_ADJ_CTRL MDCAC \n    JOIN\n        (\n            SELECT\n                FISCAL_MO,\n                MIN(DAY_DT) START_DT,\n                MAX(DAY_DT) END_DT \n            FROM\n                DAYS \n            GROUP BY\n                FISCAL_MO\n        ) D \n            ON MDCAC.FISCAL_MO = D.FISCAL_MO \n    LEFT JOIN\n        (\n            SELECT\n                * \n            FROM\n                MA_EVENT \n            WHERE\n                MA_EVENT_SOURCE_ID = 11\n        ) M \n            ON MDCAC.MA_EVENT_TYPE_ID = M.MA_EVENT_TYPE_ID \n            AND MDCAC.FISCAL_MO = M.FISCAL_MO \n    WHERE\n        M.MA_EVENT_ID IS NULL\"\"\")","df_6.createOrReplaceTempView(\"SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6\")"]},"id":"SQ_MA_DC_COST_ADJ_CTRL_INSERTS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_MA_DC_COST_ADJ_CTRL_INSERTS","queries":["df_6=spark.sql(\"\"\"\n    SELECT\n        D.START_DT,\n        D.END_DT,\n        MDCAC.MA_EVENT_TYPE_ID,\n        11 MA_EVENT_SOURCE_ID,\n        MDCAC.FISCAL_MO,\n        'DC Cost Adj: Fiscal Mo=' || MDCAC.FISCAL_MO::VARCHAR (10) MA_EVENT_DESC,\n        1 MA_PCT_IND,\n        MDCAC.DC_COST_ADJ_PCT * 100 NEW_MA_AMT,\n        NEW_MA_AMT AS ORIG_MA_AMT,\n        'I' AS INS_UPD_FLAG \n    FROM\n        MA_DC_COST_ADJ_CTRL MDCAC \n    JOIN\n        (\n            SELECT\n                FISCAL_MO,\n                MIN(DAY_DT) START_DT,\n                MAX(DAY_DT) END_DT \n            FROM\n                DAYS \n            GROUP BY\n                FISCAL_MO\n        ) D \n            ON MDCAC.FISCAL_MO = D.FISCAL_MO \n    LEFT JOIN\n        (\n            SELECT\n                * \n            FROM\n                MA_EVENT \n            WHERE\n                MA_EVENT_SOURCE_ID = 11\n        ) M \n            ON MDCAC.MA_EVENT_TYPE_ID = M.MA_EVENT_TYPE_ID \n            AND MDCAC.FISCAL_MO = M.FISCAL_MO \n    WHERE\n        M.MA_EVENT_ID IS NULL\"\"\")","df_6.createOrReplaceTempView(\"SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6\")"]},"id":"SQ_MA_DC_COST_ADJ_CTRL_INSERTS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_MA_DC_COST_ADJ_CTRL_INSERTS","queries":["df_6=spark.sql(\"\"\"\n    SELECT\n        D.START_DT,\n        D.END_DT,\n        MDCAC.MA_EVENT_TYPE_ID,\n        11 MA_EVENT_SOURCE_ID,\n        MDCAC.FISCAL_MO,\n        'DC Cost Adj: Fiscal Mo=' || MDCAC.FISCAL_MO::VARCHAR (10) MA_EVENT_DESC,\n        1 MA_PCT_IND,\n        MDCAC.DC_COST_ADJ_PCT * 100 NEW_MA_AMT,\n        NEW_MA_AMT AS ORIG_MA_AMT,\n        'I' AS INS_UPD_FLAG \n    FROM\n        MA_DC_COST_ADJ_CTRL MDCAC \n    JOIN\n        (\n            SELECT\n                FISCAL_MO,\n                MIN(DAY_DT) START_DT,\n                MAX(DAY_DT) END_DT \n            FROM\n                DAYS \n            GROUP BY\n                FISCAL_MO\n        ) D \n            ON MDCAC.FISCAL_MO = D.FISCAL_MO \n    LEFT JOIN\n        (\n            SELECT\n                * \n            FROM\n                MA_EVENT \n            WHERE\n                MA_EVENT_SOURCE_ID = 11\n        ) M \n            ON MDCAC.MA_EVENT_TYPE_ID = M.MA_EVENT_TYPE_ID \n            AND MDCAC.FISCAL_MO = M.FISCAL_MO \n    WHERE\n        M.MA_EVENT_ID IS NULL\"\"\")","df_6.createOrReplaceTempView(\"SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6\")"]},"id":"SQ_MA_DC_COST_ADJ_CTRL_INSERTS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_NEW","queries":["df_7=spark.sql(\"\"\"\n    SELECT\n        (ROW_NUMBER() OVER (\n    ORDER BY\n        (SELECT\n            NULL)) - 1) * (SELECT\n            Increment_By \n        FROM\n            SEQ_MA_EVENT_ID) + (SELECT\n            NEXTVAL \n        FROM\n            SEQ_MA_EVENT_ID) AS MA_EVENT_ID,\n        SEQ_MA_EVENT_ID.NEXTVAL AS MA_EVENT_ID,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.START_DT AS START_DT,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.END_DT AS END_DT,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.FISCAL_MO AS FISCAL_MO,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.MA_EVENT_DESC AS MA_EVENT_DESC,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.MA_PCT_IND AS MA_PCT_IND,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.NEW_MA_AMT AS NEW_MA_AMT,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.ORIG_MA_AMT AS ORIG_MA_AMT,\n        current_timestamp AS UPDATE_DT,\n        current_timestamp AS LOAD_DT,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.INS_UPD_FLAG AS INS_UPD_FLAG,\n        SEQ_MA_EVENT_ID.Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        SEQ_MA_EVENT_ID \n    INNER JOIN\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6 \n            ON SEQ_MA_EVENT_ID.Monotonically_Increasing_Id = SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.Monotonically_Increasing_Id\"\"\")","df_7.createOrReplaceTempView(\"EXP_NEW_7\")","spark.sql(\"\"\"UPDATE SEQ_MA_EVENT_ID SET CURRVAL = (SELECT MAX(MA_EVENT_ID) FROM EXP_NEW_7) , NEXTVAL = (SELECT MAX(MA_EVENT_ID) FROM EXP_NEW_7) + (SELECT Increment_By FROM EXP_NEW_7)\"\"\")"]},"id":"EXP_NEW","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_NEW","queries":["df_7=spark.sql(\"\"\"\n    SELECT\n        (ROW_NUMBER() OVER (\n    ORDER BY\n        (SELECT\n            NULL)) - 1) * (SELECT\n            Increment_By \n        FROM\n            SEQ_MA_EVENT_ID) + (SELECT\n            NEXTVAL \n        FROM\n            SEQ_MA_EVENT_ID) AS MA_EVENT_ID,\n        SEQ_MA_EVENT_ID.NEXTVAL AS MA_EVENT_ID,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.START_DT AS START_DT,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.END_DT AS END_DT,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.FISCAL_MO AS FISCAL_MO,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.MA_EVENT_DESC AS MA_EVENT_DESC,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.MA_PCT_IND AS MA_PCT_IND,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.NEW_MA_AMT AS NEW_MA_AMT,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.ORIG_MA_AMT AS ORIG_MA_AMT,\n        current_timestamp AS UPDATE_DT,\n        current_timestamp AS LOAD_DT,\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.INS_UPD_FLAG AS INS_UPD_FLAG,\n        SEQ_MA_EVENT_ID.Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        SEQ_MA_EVENT_ID \n    INNER JOIN\n        SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6 \n            ON SEQ_MA_EVENT_ID.Monotonically_Increasing_Id = SQ_MA_DC_COST_ADJ_CTRL_INSERTS_6.Monotonically_Increasing_Id\"\"\")","df_7.createOrReplaceTempView(\"EXP_NEW_7\")","spark.sql(\"\"\"UPDATE SEQ_MA_EVENT_ID SET CURRVAL = (SELECT MAX(MA_EVENT_ID) FROM EXP_NEW_7) , NEXTVAL = (SELECT MAX(MA_EVENT_ID) FROM EXP_NEW_7) + (SELECT Increment_By FROM EXP_NEW_7)\"\"\")"]},"id":"EXP_NEW","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Custom Transformation","label":"UNI_NEW_ORIG","queries":["df_8=spark.sql(\"\"\"SELECT END_DT AS END_DT,\nFISCAL_MO AS FISCAL_MO,\nINS_UPD_FLAG AS INS_UPD_FLAG,\nLOAD_DT AS LOAD_DT,\nMA_EVENT_DESC AS MA_EVENT_DESC,\nMA_EVENT_ID AS MA_EVENT_ID,\nMA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\nMA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\nMA_PCT_IND AS MA_PCT_IND,\nMonotonically_Increasing_Id AS Monotonically_Increasing_Id,\nNEW_MA_AMT AS NEW_MA_AMT,\nORIG_MA_AMT AS ORIG_MA_AMT,\nSTART_DT AS START_DT,\nUPDATE_DT AS UPDATE_DT FROM EXP_ORIG_5 UNION ALL SELECT END_DT AS END_DT,\nFISCAL_MO AS FISCAL_MO,\nINS_UPD_FLAG AS INS_UPD_FLAG,\nLOAD_DT AS LOAD_DT,\nMA_EVENT_DESC AS MA_EVENT_DESC,\nMA_EVENT_ID AS MA_EVENT_ID,\nMA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\nMA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\nMA_PCT_IND AS MA_PCT_IND,\nMonotonically_Increasing_Id AS Monotonically_Increasing_Id,\nNEW_MA_AMT AS NEW_MA_AMT,\nORIG_MA_AMT AS ORIG_MA_AMT,\nSTART_DT AS START_DT,\nUPDATE_DT AS UPDATE_DT FROM EXP_NEW_7\"\"\")","df_8.createOrReplaceTempView(\"UNI_NEW_ORIG_8\")"]},"id":"UNI_NEW_ORIG","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Custom Transformation","label":"UNI_NEW_ORIG","queries":["df_8=spark.sql(\"\"\"SELECT END_DT AS END_DT,\nFISCAL_MO AS FISCAL_MO,\nINS_UPD_FLAG AS INS_UPD_FLAG,\nLOAD_DT AS LOAD_DT,\nMA_EVENT_DESC AS MA_EVENT_DESC,\nMA_EVENT_ID AS MA_EVENT_ID,\nMA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\nMA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\nMA_PCT_IND AS MA_PCT_IND,\nMonotonically_Increasing_Id AS Monotonically_Increasing_Id,\nNEW_MA_AMT AS NEW_MA_AMT,\nORIG_MA_AMT AS ORIG_MA_AMT,\nSTART_DT AS START_DT,\nUPDATE_DT AS UPDATE_DT FROM EXP_ORIG_5 UNION ALL SELECT END_DT AS END_DT,\nFISCAL_MO AS FISCAL_MO,\nINS_UPD_FLAG AS INS_UPD_FLAG,\nLOAD_DT AS LOAD_DT,\nMA_EVENT_DESC AS MA_EVENT_DESC,\nMA_EVENT_ID AS MA_EVENT_ID,\nMA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\nMA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\nMA_PCT_IND AS MA_PCT_IND,\nMonotonically_Increasing_Id AS Monotonically_Increasing_Id,\nNEW_MA_AMT AS NEW_MA_AMT,\nORIG_MA_AMT AS ORIG_MA_AMT,\nSTART_DT AS START_DT,\nUPDATE_DT AS UPDATE_DT FROM EXP_NEW_7\"\"\")","df_8.createOrReplaceTempView(\"UNI_NEW_ORIG_8\")"]},"id":"UNI_NEW_ORIG","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_INS_UPD","queries":["df_9=spark.sql(\"\"\"\n    SELECT\n        date_trunc('DAY',\n        current_timestamp) AS LOAD_DT,\n        MA_EVENT_ID AS MA_EVENT_ID,\n        START_DT AS START_DT,\n        END_DT AS END_DT,\n        MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\n        FISCAL_MO AS FISCAL_MO,\n        MA_EVENT_DESC AS MA_EVENT_DESC,\n        MA_PCT_IND AS MA_PCT_IND,\n        ORIG_MA_AMT AS ORIG_MA_AMT,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT1 AS LOAD_DT1,\n        INS_UPD_DEL_FLAG AS INS_UPD_DEL_FLAG,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        UNI_NEW_ORIG_8\"\"\")","df_9.createOrReplaceTempView(\"EXP_INS_UPD_9\")"]},"id":"EXP_INS_UPD","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Update Strategy","label":"UPD_STRATEGY","queries":["df_10=spark.sql(\"\"\"\n    SELECT\n        MA_EVENT_ID AS MA_EVENT_ID,\n        START_DT AS START_DT,\n        END_DT AS END_DT,\n        MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\n        FISCAL_MO AS FISCAL_MO,\n        MA_EVENT_DESC AS MA_EVENT_DESC,\n        MA_PCT_IND AS MA_PCT_IND,\n        NEW_MA_AMT AS NEW_MA_AMT,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        INS_UPD_FLAG AS INS_UPD_FLAG,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        UNI_NEW_ORIG_8\"\"\")","df_10.createOrReplaceTempView(\"UPD_STRATEGY_10\")"]},"id":"UPD_STRATEGY","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Target Definition","label":"MA_EVENT","queries":["spark.sql(\"\"\"INSERT INTO MA_EVENT SELECT MA_EVENT_ID AS MA_EVENT_ID,\nOFFER_ID AS OFFER_ID,\nSAP_DEPT_ID AS SAP_DEPT_ID,\nPRODUCT_ID AS PRODUCT_ID,\nCOUNTRY_CD AS COUNTRY_CD,\nSTART_DT AS START_DT,\nEND_DT AS END_DT,\nMA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\nMA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\nLOCATION_ID AS LOCATION_ID,\nMOVEMENT_ID AS MOVEMENT_ID,\nVALUATION_CLASS_CD AS VALUATION_CLASS_CD,\nGL_ACCT_NBR AS GL_ACCT_NBR,\nLOCATION_TYPE_ID AS LOCATION_TYPE_ID,\nROYALTY_BRAND_ID AS ROYALTY_BRAND_ID,\nBRAND_CD AS BRAND_CD,\nMA_FORMULA_CD AS MA_FORMULA_CD,\nFISCAL_MO AS FISCAL_MO,\nSAP_CATEGORY_ID AS SAP_CATEGORY_ID,\nFROM_LOCATION_ID AS FROM_LOCATION_ID,\nSOURCE_VENDOR_ID AS SOURCE_VENDOR_ID,\nCOMPANY_ID AS COMPANY_ID,\nMA_EVENT_DESC AS MA_EVENT_DESC,\nEM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,\nEM_COMMENT AS EM_COMMENT,\nEM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,\nEM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,\nEM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,\nEM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,\nEM_VENDOR_ID AS EM_VENDOR_ID,\nEM_VENDOR_NAME AS EM_VENDOR_NAME,\nEM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,\nVENDOR_NAME_TXT AS VENDOR_NAME_TXT,\nMA_PCT_IND AS MA_PCT_IND,\nNEW_MA_AMT AS MA_AMT,\nMA_MAX_AMT AS MA_MAX_AMT,\nUPDATE_DT AS UPDATE_DT,\nLOAD_DT AS LOAD_DT FROM UPD_STRATEGY_10\"\"\")"]},"id":"MA_EVENT","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Target Definition","label":"MA_EVENT_RESTATE_HIST","queries":["spark.sql(\"\"\"INSERT INTO MA_EVENT_RESTATE_HIST SELECT LOAD_DT AS LOAD_DT,\nMA_EVENT_ID AS MA_EVENT_ID,\nOFFER_ID AS OFFER_ID,\nSAP_DEPT_ID AS SAP_DEPT_ID,\nPRODUCT_ID AS PRODUCT_ID,\nCOUNTRY_CD AS COUNTRY_CD,\nSTART_DT AS START_DT,\nEND_DT AS END_DT,\nMA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\nMA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\nLOCATION_ID AS LOCATION_ID,\nMOVEMENT_ID AS MOVEMENT_ID,\nVALUATION_CLASS_CD AS VALUATION_CLASS_CD,\nGL_ACCT_NBR AS GL_ACCT_NBR,\nLOCATION_TYPE_ID AS LOCATION_TYPE_ID,\nROYALTY_BRAND_ID AS ROYALTY_BRAND_ID,\nBRAND_CD AS BRAND_CD,\nMA_FORMULA_CD AS MA_FORMULA_CD,\nFISCAL_MO AS FISCAL_MO,\nSAP_CATEGORY_ID AS SAP_CATEGORY_ID,\nFROM_LOCATION_ID AS FROM_LOCATION_ID,\nSOURCE_VENDOR_ID AS SOURCE_VENDOR_ID,\nCOMPANY_ID AS COMPANY_ID,\nMA_EVENT_DESC AS MA_EVENT_DESC,\nEM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,\nEM_COMMENT AS EM_COMMENT,\nEM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,\nEM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,\nEM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,\nEM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,\nEM_VENDOR_ID AS EM_VENDOR_ID,\nEM_VENDOR_NAME AS EM_VENDOR_NAME,\nEM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,\nVENDOR_NAME_TXT AS VENDOR_NAME_TXT,\nMA_PCT_IND AS MA_PCT_IND,\nORIG_MA_AMT AS MA_AMT,\nMA_MAX_AMT AS MA_MAX_AMT,\nINS_UPD_DEL_FLAG AS INS_UPD_DEL_FLAG FROM EXP_INS_UPD_9\"\"\")"]},"id":"MA_EVENT_RESTATE_HIST","position":{"x":0,"y":0},"type":"normalNode"}]}