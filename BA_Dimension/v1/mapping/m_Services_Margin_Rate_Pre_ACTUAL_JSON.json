{"Edges":[{"transformationType":"Source Definition","id":"e-0","source":"","target":"SERVICES_MARGIN_WAGE_TYPE_CTRL"},{"transformationType":"Source Definition","id":"e-1","source":"","target":"SERVICES_MARGIN_CTRL"},{"transformationType":"Source Definition","id":"e-2","source":"","target":"EMPL_EMPL_LOC_WK"},{"transformationType":"Source Definition","id":"e-3","source":"","target":"EARNINGS_ID"},{"transformationType":"Source Definition","id":"e-4","source":"","target":"DAYS"},{"transformationType":"Source Definition","id":"e-5","source":"","target":"SITE_PROFILE_RPT"},{"transformationType":"Source Definition","id":"e-6","source":"","target":"SALES_TRANS_SKU"},{"transformationType":"Source Qualifier","id":"e-7","source":"SALES_TRANS_SKU","target":"SQ_SERVICES_MARGIN_RATE_PRE"},{"transformationType":"Source Qualifier","id":"e-8","source":"EMPL_EMPL_LOC_WK","target":"SQ_SERVICES_MARGIN_RATE_PRE"},{"transformationType":"Source Qualifier","id":"e-9","source":"SERVICES_MARGIN_CTRL","target":"SQ_SERVICES_MARGIN_RATE_PRE"},{"transformationType":"Expression","id":"e-10","source":"SQ_SERVICES_MARGIN_RATE_PRE","target":"EXP_RATE"},{"transformationType":"Target Definition","id":"e-11","source":"EXP_RATE","target":"SERVICES_MARGIN_RATE_PRE"}],"Nodes":[{"data":{"transformationType":"Source Definition","label":"SERVICES_MARGIN_WAGE_TYPE_CTRL","queries":["df_0=spark.sql(\"\"\"\n    SELECT\n        PS_WAGE_TYPE_CD AS PS_WAGE_TYPE_CD,\n        START_EFF_DT AS START_EFF_DT,\n        END_EFF_DT AS END_EFF_DT,\n        UPDATE_TSTMP AS UPDATE_TSTMP,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        SERVICES_MARGIN_WAGE_TYPE_CTRL\"\"\")","df_0.createOrReplaceTempView(\"SERVICES_MARGIN_WAGE_TYPE_CTRL_0\")"]},"id":"SERVICES_MARGIN_WAGE_TYPE_CTRL","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"SERVICES_MARGIN_CTRL","queries":["df_1=spark.sql(\"\"\"\n    SELECT\n        SAP_DEPT_ID AS SAP_DEPT_ID,\n        PRIMARY_SAP_DEPT_ID AS PRIMARY_SAP_DEPT_ID,\n        STORE_DEPT_NBR AS STORE_DEPT_NBR,\n        START_EFF_DT AS START_EFF_DT,\n        END_EFF_DT AS END_EFF_DT,\n        UPDATE_TSTMP AS UPDATE_TSTMP,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        SERVICES_MARGIN_CTRL\"\"\")","df_1.createOrReplaceTempView(\"SERVICES_MARGIN_CTRL_1\")"]},"id":"SERVICES_MARGIN_CTRL","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"EMPL_EMPL_LOC_WK","queries":["df_2=spark.sql(\"\"\"\n    SELECT\n        WEEK_DT AS WEEK_DT,\n        LOCATION_ID AS LOCATION_ID,\n        EMPLOYEE_ID AS EMPLOYEE_ID,\n        EARN_ID AS EARN_ID,\n        STORE_DEPT_NBR AS STORE_DEPT_NBR,\n        JOB_CODE AS JOB_CODE,\n        FULLPT_FLAG AS FULLPT_FLAG,\n        HOURS_WORKED AS HOURS_WORKED,\n        EARNINGS_AMT AS EARNINGS_AMT,\n        EARNINGS_LOC_AMT AS EARNINGS_LOC_AMT,\n        PAY_FREQ_CD AS PAY_FREQ_CD,\n        CURRENCY_NBR AS CURRENCY_NBR,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        EMPL_EMPL_LOC_WK\"\"\")","df_2.createOrReplaceTempView(\"EMPL_EMPL_LOC_WK_2\")"]},"id":"EMPL_EMPL_LOC_WK","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"EARNINGS_ID","queries":["df_3=spark.sql(\"\"\"\n    SELECT\n        EARN_ID AS EARN_ID,\n        PS_TAX_COMPANY_CD AS PS_TAX_COMPANY_CD,\n        PS_WAGE_TYPE_GID AS PS_WAGE_TYPE_GID,\n        PS_WAGE_TYPE_CD AS PS_WAGE_TYPE_CD,\n        PS_COUNTRY_GROUP_CD AS PS_COUNTRY_GROUP_CD,\n        PS_WAGE_TYPE_DESC AS PS_WAGE_TYPE_DESC,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        EARNINGS_ID\"\"\")","df_3.createOrReplaceTempView(\"EARNINGS_ID_3\")"]},"id":"EARNINGS_ID","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"DAYS","queries":["df_4=spark.sql(\"\"\"\n    SELECT\n        DAY_DT AS DAY_DT,\n        BUSINESS_DAY_FLAG AS BUSINESS_DAY_FLAG,\n        HOLIDAY_FLAG AS HOLIDAY_FLAG,\n        DAY_OF_WK_NAME AS DAY_OF_WK_NAME,\n        DAY_OF_WK_NAME_ABBR AS DAY_OF_WK_NAME_ABBR,\n        DAY_OF_WK_NBR AS DAY_OF_WK_NBR,\n        CAL_DAY_OF_MO_NBR AS CAL_DAY_OF_MO_NBR,\n        CAL_DAY_OF_YR_NBR AS CAL_DAY_OF_YR_NBR,\n        CAL_WK AS CAL_WK,\n        CAL_WK_NBR AS CAL_WK_NBR,\n        CAL_MO AS CAL_MO,\n        CAL_MO_NBR AS CAL_MO_NBR,\n        CAL_MO_NAME AS CAL_MO_NAME,\n        CAL_MO_NAME_ABBR AS CAL_MO_NAME_ABBR,\n        CAL_QTR AS CAL_QTR,\n        CAL_QTR_NBR AS CAL_QTR_NBR,\n        CAL_HALF AS CAL_HALF,\n        CAL_YR AS CAL_YR,\n        FISCAL_DAY_OF_MO_NBR AS FISCAL_DAY_OF_MO_NBR,\n        FISCAL_DAY_OF_YR_NBR AS FISCAL_DAY_OF_YR_NBR,\n        FISCAL_WK AS FISCAL_WK,\n        FISCAL_WK_NBR AS FISCAL_WK_NBR,\n        FISCAL_MO AS FISCAL_MO,\n        FISCAL_MO_NBR AS FISCAL_MO_NBR,\n        FISCAL_MO_NAME AS FISCAL_MO_NAME,\n        FISCAL_MO_NAME_ABBR AS FISCAL_MO_NAME_ABBR,\n        FISCAL_QTR AS FISCAL_QTR,\n        FISCAL_QTR_NBR AS FISCAL_QTR_NBR,\n        FISCAL_HALF AS FISCAL_HALF,\n        FISCAL_YR AS FISCAL_YR,\n        LYR_WEEK_DT AS LYR_WEEK_DT,\n        LWK_WEEK_DT AS LWK_WEEK_DT,\n        WEEK_DT AS WEEK_DT,\n        EST_TIME_CONV_AMT AS EST_TIME_CONV_AMT,\n        EST_TIME_CONV_HRS AS EST_TIME_CONV_HRS,\n        ES0_TIME_CONV_AMT AS ES0_TIME_CONV_AMT,\n        ES0_TIME_CONV_HRS AS ES0_TIME_CONV_HRS,\n        CST_TIME_CONV_AMT AS CST_TIME_CONV_AMT,\n        CST_TIME_CONV_HRS AS CST_TIME_CONV_HRS,\n        CS0_TIME_CONV_AMT AS CS0_TIME_CONV_AMT,\n        CS0_TIME_CONV_HRS AS CS0_TIME_CONV_HRS,\n        MST_TIME_CONV_AMT AS MST_TIME_CONV_AMT,\n        MST_TIME_CONV_HRS AS MST_TIME_CONV_HRS,\n        MS0_TIME_CONV_AMT AS MS0_TIME_CONV_AMT,\n        MS0_TIME_CONV_HRS AS MS0_TIME_CONV_HRS,\n        PST_TIME_CONV_AMT AS PST_TIME_CONV_AMT,\n        PST_TIME_CONV_HRS AS PST_TIME_CONV_HRS,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        DAYS\"\"\")","df_4.createOrReplaceTempView(\"DAYS_4\")"]},"id":"DAYS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"SITE_PROFILE_RPT","queries":["df_5=spark.sql(\"\"\"\n    SELECT\n        LOCATION_ID AS LOCATION_ID,\n        LOCATION_TYPE_ID AS LOCATION_TYPE_ID,\n        LOCATION_TYPE_DESC AS LOCATION_TYPE_DESC,\n        STORE_NBR AS STORE_NBR,\n        STORE_NAME AS STORE_NAME,\n        STORE_TYPE_ID AS STORE_TYPE_ID,\n        STORE_TYPE_DESC AS STORE_TYPE_DESC,\n        PARENT_LOCATION_ID AS PARENT_LOCATION_ID,\n        LOCATION_NBR AS LOCATION_NBR,\n        COMPANY_ID AS COMPANY_ID,\n        COMPANY_DESC AS COMPANY_DESC,\n        SUPER_REGION_ID AS SUPER_REGION_ID,\n        SUPER_REGION_DESC AS SUPER_REGION_DESC,\n        REGION_ID AS REGION_ID,\n        REGION_DESC AS REGION_DESC,\n        DISTRICT_ID AS DISTRICT_ID,\n        DISTRICT_DESC AS DISTRICT_DESC,\n        SITE_ADDRESS AS SITE_ADDRESS,\n        SITE_CITY AS SITE_CITY,\n        SITE_COUNTY AS SITE_COUNTY,\n        STATE_CD AS STATE_CD,\n        STATE_NAME AS STATE_NAME,\n        POSTAL_CD AS POSTAL_CD,\n        COUNTRY_CD AS COUNTRY_CD,\n        COUNTRY_NAME AS COUNTRY_NAME,\n        GEO_LATITUDE_NBR AS GEO_LATITUDE_NBR,\n        GEO_LONGITUDE_NBR AS GEO_LONGITUDE_NBR,\n        PETSMART_DMA_CD AS PETSMART_DMA_CD,\n        PETSMART_DMA_DESC AS PETSMART_DMA_DESC,\n        SITE_MAIN_TELE_NO AS SITE_MAIN_TELE_NO,\n        SITE_GROOM_TELE_NO AS SITE_GROOM_TELE_NO,\n        SITE_FAX_NO AS SITE_FAX_NO,\n        SITE_EMAIL_ADDRESS AS SITE_EMAIL_ADDRESS,\n        STORE_OPEN_CLOSE_FLAG AS STORE_OPEN_CLOSE_FLAG,\n        SFT_OPEN_DT AS SFT_OPEN_DT,\n        OPEN_DT AS OPEN_DT,\n        GR_OPEN_DT AS GR_OPEN_DT,\n        CLOSE_DT AS CLOSE_DT,\n        SITE_SALES_FLAG AS SITE_SALES_FLAG,\n        SALES_CURR_FLAG AS SALES_CURR_FLAG,\n        SITE_OPEN_YRS_AMT AS SITE_OPEN_YRS_AMT,\n        FIRST_SALE_DT AS FIRST_SALE_DT,\n        FIRST_MEASURED_SALE_DT AS FIRST_MEASURED_SALE_DT,\n        LAST_SALE_DT AS LAST_SALE_DT,\n        COMP_CURR_FLAG AS COMP_CURR_FLAG,\n        COMP_EFF_DT AS COMP_EFF_DT,\n        COMP_END_DT AS COMP_END_DT,\n        TP_LOC_FLAG AS TP_LOC_FLAG,\n        TP_ACTIVE_CNT AS TP_ACTIVE_CNT,\n        TP_START_DT AS TP_START_DT,\n        HOTEL_FLAG AS HOTEL_FLAG,\n        HOTEL_OPEN_DT AS HOTEL_OPEN_DT,\n        DAYCAMP_FLAG AS DAYCAMP_FLAG,\n        VET_FLAG AS VET_FLAG,\n        TIME_ZONE_ID AS TIME_ZONE_ID,\n        TIME_ZONE AS TIME_ZONE,\n        SQ_FEET_RETAIL AS SQ_FEET_RETAIL,\n        SQ_FEET_TOTAL AS SQ_FEET_TOTAL,\n        TRADE_AREA AS TRADE_AREA,\n        DELV_SERVICE_CLASS_ID AS DELV_SERVICE_CLASS_ID,\n        PICK_SERVICE_CLASS_ID AS PICK_SERVICE_CLASS_ID,\n        REPL_DC_NBR AS REPL_DC_NBR,\n        REPL_FISH_DC_NBR AS REPL_FISH_DC_NBR,\n        REPL_FWD_DC_NBR AS REPL_FWD_DC_NBR,\n        PROMO_LABEL_CD AS PROMO_LABEL_CD,\n        PRICE_ZONE_ID AS PRICE_ZONE_ID,\n        PRICE_ZONE_DESC AS PRICE_ZONE_DESC,\n        PRICE_AD_ZONE_ID AS PRICE_AD_ZONE_ID,\n        PRICE_AD_ZONE_DESC AS PRICE_AD_ZONE_DESC,\n        EQUINE_MERCH_ID AS EQUINE_MERCH_ID,\n        EQUINE_MERCH_DESC AS EQUINE_MERCH_DESC,\n        EQUINE_SITE_ID AS EQUINE_SITE_ID,\n        EQUINE_SITE_DESC AS EQUINE_SITE_DESC,\n        EQUINE_SITE_OPEN_DT AS EQUINE_SITE_OPEN_DT,\n        LOYALTY_PGM_TYPE_ID AS LOYALTY_PGM_TYPE_ID,\n        LOYALTY_PGM_TYPE_DESC AS LOYALTY_PGM_TYPE_DESC,\n        LOYALTY_PGM_STATUS_ID AS LOYALTY_PGM_STATUS_ID,\n        LOYALTY_PGM_STATUS_DESC AS LOYALTY_PGM_STATUS_DESC,\n        LOYALTY_PGM_START_DT AS LOYALTY_PGM_START_DT,\n        LOYALTY_PGM_CHANGE_DT AS LOYALTY_PGM_CHANGE_DT,\n        BP_COMPANY_NBR AS BP_COMPANY_NBR,\n        BP_GL_ACCT AS BP_GL_ACCT,\n        SITE_LOGIN_ID AS SITE_LOGIN_ID,\n        SITE_MANAGER_ID AS SITE_MANAGER_ID,\n        SITE_MANAGER_NAME AS SITE_MANAGER_NAME,\n        MGR_ID AS MGR_ID,\n        MGR_DESC AS MGR_DESC,\n        DVL_ID AS DVL_ID,\n        DVL_DESC AS DVL_DESC,\n        PURCH_GROUP_ID AS PURCH_GROUP_ID,\n        PURCH_GROUP_NAME AS PURCH_GROUP_NAME,\n        TOTAL_SALES_RANKING_CD AS TOTAL_SALES_RANKING_CD,\n        MERCH_SALES_RANKING_CD AS MERCH_SALES_RANKING_CD,\n        SERVICES_SALES_RANKING_CD AS SERVICES_SALES_RANKING_CD,\n        SALON_SALES_RANKING_CD AS SALON_SALES_RANKING_CD,\n        TRAINING_SALES_RANKING_CD AS TRAINING_SALES_RANKING_CD,\n        HOTEL_DDC_SALES_RANKING_CD AS HOTEL_DDC_SALES_RANKING_CD,\n        CONSUMABLES_SALES_RANKING_CD AS CONSUMABLES_SALES_RANKING_CD,\n        HARDGOODS_SALES_RANKING_CD AS HARDGOODS_SALES_RANKING_CD,\n        SPECIALTY_SALES_RANKING_CD AS SPECIALTY_SALES_RANKING_CD,\n        DIST_MGR_NAME AS DIST_MGR_NAME,\n        DM_EMAIL_ADDRESS AS DM_EMAIL_ADDRESS,\n        DC_AREA_DIRECTOR_NAME AS DC_AREA_DIRECTOR_NAME,\n        DC_AREA_DIRECTOR_EMAIL AS DC_AREA_DIRECTOR_EMAIL,\n        DIST_SVC_MGR_NAME AS DIST_SVC_MGR_NAME,\n        DSM_EMAIL_ADDRESS AS DSM_EMAIL_ADDRESS,\n        REGION_VP_NAME AS REGION_VP_NAME,\n        RVP_EMAIL_ADDRESS AS RVP_EMAIL_ADDRESS,\n        REGION_TRAINER_NAME AS REGION_TRAINER_NAME,\n        ASSET_PROTECT_NAME AS ASSET_PROTECT_NAME,\n        ASSET_PROTECT_EMAIL AS ASSET_PROTECT_EMAIL,\n        LP_SAFETY_DIRECTOR_NAME AS LP_SAFETY_DIRECTOR_NAME,\n        LP_SAFETY_DIRECTOR_EMAIL AS LP_SAFETY_DIRECTOR_EMAIL,\n        SR_LP_SAFETY_MGR_NAME AS SR_LP_SAFETY_MGR_NAME,\n        SR_LP_SAFETY_MGR_EMAIL AS SR_LP_SAFETY_MGR_EMAIL,\n        REGIONAL_LP_SAFETY_MGR_NAME AS REGIONAL_LP_SAFETY_MGR_NAME,\n        REGIONAL_LP_SAFETY_MGR_EMAIL AS REGIONAL_LP_SAFETY_MGR_EMAIL,\n        RETAIL_MANAGER_SAFETY_NAME AS RETAIL_MANAGER_SAFETY_NAME,\n        RETAIL_MANAGER_SAFETY_EMAIL AS RETAIL_MANAGER_SAFETY_EMAIL,\n        DC_GENERAL_MANAGER_NAME AS DC_GENERAL_MANAGER_NAME,\n        DC_GENERAL_MANAGER_EMAIL AS DC_GENERAL_MANAGER_EMAIL,\n        ASST_DC_GENERAL_MANAGER_NAME1 AS ASST_DC_GENERAL_MANAGER_NAME1,\n        ASST_DC_GENERAL_MANAGER_EMAIL1 AS ASST_DC_GENERAL_MANAGER_EMAIL1,\n        ASST_DC_GENERAL_MANAGER_NAME2 AS ASST_DC_GENERAL_MANAGER_NAME2,\n        ASST_DC_GENERAL_MANAGER_EMAIL2 AS ASST_DC_GENERAL_MANAGER_EMAIL2,\n        HR_MANAGER_NAME AS HR_MANAGER_NAME,\n        HR_MANAGER_EMAIL AS HR_MANAGER_EMAIL,\n        HR_SUPERVISOR_NAME1 AS HR_SUPERVISOR_NAME1,\n        HR_SUPERVISOR_EMAIL1 AS HR_SUPERVISOR_EMAIL1,\n        HR_SUPERVISOR_NAME2 AS HR_SUPERVISOR_NAME2,\n        HR_SUPERVISOR_EMAIL2 AS HR_SUPERVISOR_EMAIL2,\n        LEARN_SOLUTION_MGR_NAME AS LEARN_SOLUTION_MGR_NAME,\n        LEARN_SOLUTION_MGR_EMAIL AS LEARN_SOLUTION_MGR_EMAIL,\n        ADD_DT AS ADD_DT,\n        DELETE_DT AS DELETE_DT,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        SITE_PROFILE_RPT\"\"\")","df_5.createOrReplaceTempView(\"SITE_PROFILE_RPT_5\")"]},"id":"SITE_PROFILE_RPT","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"SALES_TRANS_SKU","queries":["df_6=spark.sql(\"\"\"\n    SELECT\n        DAY_DT AS DAY_DT,\n        SALES_INSTANCE_ID_DIST_KEY AS SALES_INSTANCE_ID_DIST_KEY,\n        PRODUCT_ID AS PRODUCT_ID,\n        SALES_INSTANCE_ID AS SALES_INSTANCE_ID,\n        LOCATION_ID AS LOCATION_ID,\n        SALES_TYPE_ID AS SALES_TYPE_ID,\n        VOID_TYPE_CD AS VOID_TYPE_CD,\n        TXN_WAS_POST_VOIDED_FLAG AS TXN_WAS_POST_VOIDED_FLAG,\n        ORDER_NBR AS ORDER_NBR,\n        ORDER_SEQ_NBR AS ORDER_SEQ_NBR,\n        ORDER_CHANNEL AS ORDER_CHANNEL,\n        ORDER_ASSIST_LOCATION_ID AS ORDER_ASSIST_LOCATION_ID,\n        ORDER_FULFILLMENT_CHANNEL AS ORDER_FULFILLMENT_CHANNEL,\n        ORDER_CREATION_CHANNEL AS ORDER_CREATION_CHANNEL,\n        ORDER_CREATION_DEVICE_TYPE AS ORDER_CREATION_DEVICE_TYPE,\n        ORDER_CREATION_DEVICE_WIDTH AS ORDER_CREATION_DEVICE_WIDTH,\n        TXN_SEGMENT AS TXN_SEGMENT,\n        PAYMENT_DEVICE_TYPE AS PAYMENT_DEVICE_TYPE,\n        TRANS_TSTMP AS TRANS_TSTMP,\n        LOYALTY_NBR AS LOYALTY_NBR,\n        LOYALTY_REDEMPTION_ID AS LOYALTY_REDEMPTION_ID,\n        LUID AS LUID,\n        CUST_TRANS_ID AS CUST_TRANS_ID,\n        CUSTOMER_EID AS CUSTOMER_EID,\n        CUSTOMER_GID AS CUSTOMER_GID,\n        SALES_CUSTOMER_LINK_EXCL_TYPE_ID AS SALES_CUSTOMER_LINK_EXCL_TYPE_ID,\n        SPECIAL_SALES_FLAG AS SPECIAL_SALES_FLAG,\n        RECEIPTLESS_RETURN_FLAG AS RECEIPTLESS_RETURN_FLAG,\n        TRAINING_START_DT AS TRAINING_START_DT,\n        TRAINER_NAME AS TRAINER_NAME,\n        SALES_AMT AS SALES_AMT,\n        SALES_COST AS SALES_COST,\n        SALES_QTY AS SALES_QTY,\n        SPECIAL_SALES_AMT AS SPECIAL_SALES_AMT,\n        SPECIAL_SALES_QTY AS SPECIAL_SALES_QTY,\n        RETURN_AMT AS RETURN_AMT,\n        RETURN_COST AS RETURN_COST,\n        RETURN_QTY AS RETURN_QTY,\n        CLEARANCE_AMT AS CLEARANCE_AMT,\n        CLEARANCE_QTY AS CLEARANCE_QTY,\n        CLEARANCE_RETURN_AMT AS CLEARANCE_RETURN_AMT,\n        CLEARANCE_RETURN_QTY AS CLEARANCE_RETURN_QTY,\n        SPECIAL_RETURN_AMT AS SPECIAL_RETURN_AMT,\n        SPECIAL_RETURN_QTY AS SPECIAL_RETURN_QTY,\n        SPECIAL_SRVC_AMT AS SPECIAL_SRVC_AMT,\n        DISCOUNT_AMT AS DISCOUNT_AMT,\n        DISCOUNT_QTY AS DISCOUNT_QTY,\n        DISCOUNT_RETURN_AMT AS DISCOUNT_RETURN_AMT,\n        DISCOUNT_RETURN_QTY AS DISCOUNT_RETURN_QTY,\n        POS_COUPON_AMT AS POS_COUPON_AMT,\n        POS_COUPON_QTY AS POS_COUPON_QTY,\n        POS_COUPON_ALLOC_AMT AS POS_COUPON_ALLOC_AMT,\n        POS_COUPON_ALLOC_QTY AS POS_COUPON_ALLOC_QTY,\n        NET_SALES_AMT AS NET_SALES_AMT,\n        NET_SALES_COST AS NET_SALES_COST,\n        NET_SALES_QTY AS NET_SALES_QTY,\n        MA_SALES_AMT AS MA_SALES_AMT,\n        MA_SALES_QTY AS MA_SALES_QTY,\n        MA_TRANS_AMT AS MA_TRANS_AMT,\n        MA_TRANS_COST AS MA_TRANS_COST,\n        MA_TRANS_QTY AS MA_TRANS_QTY,\n        NET_MARGIN_AMT AS NET_MARGIN_AMT,\n        EXCH_RATE_PCT AS EXCH_RATE_PCT,\n        UPDATE_TSTMP AS UPDATE_TSTMP,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        SALES_TRANS_SKU\"\"\")","df_6.createOrReplaceTempView(\"SALES_TRANS_SKU_6\")"]},"id":"SALES_TRANS_SKU","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_SERVICES_MARGIN_RATE_PRE","queries":["df_7=spark.sql(\"\"\"\n    SELECT\n        W.WEEK_DT,\n        W.LOCATION_ID,\n        W.PRIMARY_SAP_DEPT_ID,\n        CASE \n            WHEN SUM(NVL(S.GROSS_SALES_LOC_AMT,\n            0)) = 0 THEN 0 \n            ELSE ROUND(SUM(NVL(W.SUM_EARNINGS_LOC_AMT,\n            0)) / SUM(NVL(S.GROSS_SALES_LOC_AMT,\n            0)),\n            4) \n        END AS MARGIN_RATE \n    FROM\n        (SELECT\n            WEEK_DT,\n            LOCATION_ID,\n            PRIMARY_SAP_DEPT_ID,\n            SUM(EARNINGS_LOC_AMT) AS SUM_EARNINGS_LOC_AMT \n        FROM\n            (SELECT\n                E.WEEK_DT,\n                E.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID,\n                SUM(EARNINGS_LOC_AMT) AS EARNINGS_LOC_AMT \n            FROM\n                EMPL_EMPL_LOC_WK E \n            JOIN\n                EARNINGS_ID I \n                    ON E.EARN_ID = I.EARN_ID \n            JOIN\n                (\n                    SELECT\n                        DISTINCT START_EFF_DT,\n                        END_EFF_DT,\n                        STORE_DEPT_NBR,\n                        PRIMARY_SAP_DEPT_ID \n                    FROM\n                        SERVICES_MARGIN_CTRL\n                ) C \n                    ON E.STORE_DEPT_NBR = C.STORE_DEPT_NBR \n                    AND E.WEEK_DT BETWEEN C.START_EFF_DT AND C.END_EFF_DT \n            JOIN\n                SERVICES_MARGIN_WAGE_TYPE_CTRL WC \n                    ON I.PS_WAGE_TYPE_CD = WC.PS_WAGE_TYPE_CD \n                    AND E.WEEK_DT BETWEEN WC.START_EFF_DT AND WC.END_EFF_DT \n            WHERE\n                E.WEEK_DT >= CURRENT_DATE - 30 \n            GROUP BY\n                E.WEEK_DT,\n                E.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID \n            UNION\n            ALL SELECT\n                E.WEEK_DT,\n                E.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID,\n                SUM(ACT_EARNINGS_LOC_AMT) AS EARNINGS_LOC_AMT \n            FROM\n                PS2_ADJUSTED_LABOR_WK E \n            JOIN\n                EARNINGS_ID I \n                    ON E.EARN_ID = I.EARN_ID \n            JOIN\n                (\n                    SELECT\n                        DISTINCT START_EFF_DT,\n                        END_EFF_DT,\n                        STORE_DEPT_NBR,\n                        PRIMARY_SAP_DEPT_ID \n                    FROM\n                        SERVICES_MARGIN_CTRL\n                ) C \n                    ON E.STORE_DEPT_NBR = C.STORE_DEPT_NBR \n                    AND E.WEEK_DT BETWEEN C.START_EFF_DT AND C.END_EFF_DT \n            JOIN\n                SERVICES_MARGIN_WAGE_TYPE_CTRL WC \n                    ON I.PS_WAGE_TYPE_CD = WC.PS_WAGE_TYPE_CD \n                    AND E.WEEK_DT BETWEEN WC.START_EFF_DT AND WC.END_EFF_DT \n            WHERE\n                E.WEEK_DT >= CURRENT_DATE - 30 \n                AND ACT_EARNINGS_LOC_AMT <> 0 \n            GROUP BY\n                E.WEEK_DT,\n                E.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID) LBR \n            GROUP BY\n                WEEK_DT,\n                LOCATION_ID,\n                PRIMARY_SAP_DEPT_ID\n        ) W \n    JOIN\n        (\n            SELECT\n                D.WEEK_DT,\n                S.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID,\n                SUM(SALES_AMT) AS GROSS_SALES_LOC_AMT \n            FROM\n                SALES_TRANS_SKU S \n            JOIN\n                SKU_PROFILE_RPT K \n                    ON S.PRODUCT_ID = K.PRODUCT_ID \n            JOIN\n                DAYS D \n                    ON S.DAY_DT = D.DAY_DT \n            JOIN\n                (\n                    SELECT\n                        DISTINCT START_EFF_DT,\n                        END_EFF_DT,\n                        SAP_DEPT_ID,\n                        PRIMARY_SAP_DEPT_ID \n                    FROM\n                        SERVICES_MARGIN_CTRL\n                ) C \n                    ON S.DAY_DT BETWEEN C.START_EFF_DT AND C.END_EFF_DT \n                    AND K.SAP_DEPT_ID = C.SAP_DEPT_ID \n            WHERE\n                D.WEEK_DT >= CURRENT_DATE - 30 \n            GROUP BY\n                D.WEEK_DT,\n                S.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID) S \n                    ON W.WEEK_DT = S.WEEK_DT \n                    AND W.LOCATION_ID = S.LOCATION_ID \n                    AND W.PRIMARY_SAP_DEPT_ID = S.PRIMARY_SAP_DEPT_ID \n            GROUP BY\n                W.WEEK_DT,\n                W.LOCATION_ID,\n                W.PRIMARY_SAP_DEPT_ID\"\"\")","df_7.createOrReplaceTempView(\"SQ_SERVICES_MARGIN_RATE_PRE_7\")"]},"id":"SQ_SERVICES_MARGIN_RATE_PRE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_SERVICES_MARGIN_RATE_PRE","queries":["df_7=spark.sql(\"\"\"\n    SELECT\n        W.WEEK_DT,\n        W.LOCATION_ID,\n        W.PRIMARY_SAP_DEPT_ID,\n        CASE \n            WHEN SUM(NVL(S.GROSS_SALES_LOC_AMT,\n            0)) = 0 THEN 0 \n            ELSE ROUND(SUM(NVL(W.SUM_EARNINGS_LOC_AMT,\n            0)) / SUM(NVL(S.GROSS_SALES_LOC_AMT,\n            0)),\n            4) \n        END AS MARGIN_RATE \n    FROM\n        (SELECT\n            WEEK_DT,\n            LOCATION_ID,\n            PRIMARY_SAP_DEPT_ID,\n            SUM(EARNINGS_LOC_AMT) AS SUM_EARNINGS_LOC_AMT \n        FROM\n            (SELECT\n                E.WEEK_DT,\n                E.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID,\n                SUM(EARNINGS_LOC_AMT) AS EARNINGS_LOC_AMT \n            FROM\n                EMPL_EMPL_LOC_WK E \n            JOIN\n                EARNINGS_ID I \n                    ON E.EARN_ID = I.EARN_ID \n            JOIN\n                (\n                    SELECT\n                        DISTINCT START_EFF_DT,\n                        END_EFF_DT,\n                        STORE_DEPT_NBR,\n                        PRIMARY_SAP_DEPT_ID \n                    FROM\n                        SERVICES_MARGIN_CTRL\n                ) C \n                    ON E.STORE_DEPT_NBR = C.STORE_DEPT_NBR \n                    AND E.WEEK_DT BETWEEN C.START_EFF_DT AND C.END_EFF_DT \n            JOIN\n                SERVICES_MARGIN_WAGE_TYPE_CTRL WC \n                    ON I.PS_WAGE_TYPE_CD = WC.PS_WAGE_TYPE_CD \n                    AND E.WEEK_DT BETWEEN WC.START_EFF_DT AND WC.END_EFF_DT \n            WHERE\n                E.WEEK_DT >= CURRENT_DATE - 30 \n            GROUP BY\n                E.WEEK_DT,\n                E.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID \n            UNION\n            ALL SELECT\n                E.WEEK_DT,\n                E.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID,\n                SUM(ACT_EARNINGS_LOC_AMT) AS EARNINGS_LOC_AMT \n            FROM\n                PS2_ADJUSTED_LABOR_WK E \n            JOIN\n                EARNINGS_ID I \n                    ON E.EARN_ID = I.EARN_ID \n            JOIN\n                (\n                    SELECT\n                        DISTINCT START_EFF_DT,\n                        END_EFF_DT,\n                        STORE_DEPT_NBR,\n                        PRIMARY_SAP_DEPT_ID \n                    FROM\n                        SERVICES_MARGIN_CTRL\n                ) C \n                    ON E.STORE_DEPT_NBR = C.STORE_DEPT_NBR \n                    AND E.WEEK_DT BETWEEN C.START_EFF_DT AND C.END_EFF_DT \n            JOIN\n                SERVICES_MARGIN_WAGE_TYPE_CTRL WC \n                    ON I.PS_WAGE_TYPE_CD = WC.PS_WAGE_TYPE_CD \n                    AND E.WEEK_DT BETWEEN WC.START_EFF_DT AND WC.END_EFF_DT \n            WHERE\n                E.WEEK_DT >= CURRENT_DATE - 30 \n                AND ACT_EARNINGS_LOC_AMT <> 0 \n            GROUP BY\n                E.WEEK_DT,\n                E.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID) LBR \n            GROUP BY\n                WEEK_DT,\n                LOCATION_ID,\n                PRIMARY_SAP_DEPT_ID\n        ) W \n    JOIN\n        (\n            SELECT\n                D.WEEK_DT,\n                S.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID,\n                SUM(SALES_AMT) AS GROSS_SALES_LOC_AMT \n            FROM\n                SALES_TRANS_SKU S \n            JOIN\n                SKU_PROFILE_RPT K \n                    ON S.PRODUCT_ID = K.PRODUCT_ID \n            JOIN\n                DAYS D \n                    ON S.DAY_DT = D.DAY_DT \n            JOIN\n                (\n                    SELECT\n                        DISTINCT START_EFF_DT,\n                        END_EFF_DT,\n                        SAP_DEPT_ID,\n                        PRIMARY_SAP_DEPT_ID \n                    FROM\n                        SERVICES_MARGIN_CTRL\n                ) C \n                    ON S.DAY_DT BETWEEN C.START_EFF_DT AND C.END_EFF_DT \n                    AND K.SAP_DEPT_ID = C.SAP_DEPT_ID \n            WHERE\n                D.WEEK_DT >= CURRENT_DATE - 30 \n            GROUP BY\n                D.WEEK_DT,\n                S.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID) S \n                    ON W.WEEK_DT = S.WEEK_DT \n                    AND W.LOCATION_ID = S.LOCATION_ID \n                    AND W.PRIMARY_SAP_DEPT_ID = S.PRIMARY_SAP_DEPT_ID \n            GROUP BY\n                W.WEEK_DT,\n                W.LOCATION_ID,\n                W.PRIMARY_SAP_DEPT_ID\"\"\")","df_7.createOrReplaceTempView(\"SQ_SERVICES_MARGIN_RATE_PRE_7\")"]},"id":"SQ_SERVICES_MARGIN_RATE_PRE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_SERVICES_MARGIN_RATE_PRE","queries":["df_7=spark.sql(\"\"\"\n    SELECT\n        W.WEEK_DT,\n        W.LOCATION_ID,\n        W.PRIMARY_SAP_DEPT_ID,\n        CASE \n            WHEN SUM(NVL(S.GROSS_SALES_LOC_AMT,\n            0)) = 0 THEN 0 \n            ELSE ROUND(SUM(NVL(W.SUM_EARNINGS_LOC_AMT,\n            0)) / SUM(NVL(S.GROSS_SALES_LOC_AMT,\n            0)),\n            4) \n        END AS MARGIN_RATE \n    FROM\n        (SELECT\n            WEEK_DT,\n            LOCATION_ID,\n            PRIMARY_SAP_DEPT_ID,\n            SUM(EARNINGS_LOC_AMT) AS SUM_EARNINGS_LOC_AMT \n        FROM\n            (SELECT\n                E.WEEK_DT,\n                E.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID,\n                SUM(EARNINGS_LOC_AMT) AS EARNINGS_LOC_AMT \n            FROM\n                EMPL_EMPL_LOC_WK E \n            JOIN\n                EARNINGS_ID I \n                    ON E.EARN_ID = I.EARN_ID \n            JOIN\n                (\n                    SELECT\n                        DISTINCT START_EFF_DT,\n                        END_EFF_DT,\n                        STORE_DEPT_NBR,\n                        PRIMARY_SAP_DEPT_ID \n                    FROM\n                        SERVICES_MARGIN_CTRL\n                ) C \n                    ON E.STORE_DEPT_NBR = C.STORE_DEPT_NBR \n                    AND E.WEEK_DT BETWEEN C.START_EFF_DT AND C.END_EFF_DT \n            JOIN\n                SERVICES_MARGIN_WAGE_TYPE_CTRL WC \n                    ON I.PS_WAGE_TYPE_CD = WC.PS_WAGE_TYPE_CD \n                    AND E.WEEK_DT BETWEEN WC.START_EFF_DT AND WC.END_EFF_DT \n            WHERE\n                E.WEEK_DT >= CURRENT_DATE - 30 \n            GROUP BY\n                E.WEEK_DT,\n                E.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID \n            UNION\n            ALL SELECT\n                E.WEEK_DT,\n                E.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID,\n                SUM(ACT_EARNINGS_LOC_AMT) AS EARNINGS_LOC_AMT \n            FROM\n                PS2_ADJUSTED_LABOR_WK E \n            JOIN\n                EARNINGS_ID I \n                    ON E.EARN_ID = I.EARN_ID \n            JOIN\n                (\n                    SELECT\n                        DISTINCT START_EFF_DT,\n                        END_EFF_DT,\n                        STORE_DEPT_NBR,\n                        PRIMARY_SAP_DEPT_ID \n                    FROM\n                        SERVICES_MARGIN_CTRL\n                ) C \n                    ON E.STORE_DEPT_NBR = C.STORE_DEPT_NBR \n                    AND E.WEEK_DT BETWEEN C.START_EFF_DT AND C.END_EFF_DT \n            JOIN\n                SERVICES_MARGIN_WAGE_TYPE_CTRL WC \n                    ON I.PS_WAGE_TYPE_CD = WC.PS_WAGE_TYPE_CD \n                    AND E.WEEK_DT BETWEEN WC.START_EFF_DT AND WC.END_EFF_DT \n            WHERE\n                E.WEEK_DT >= CURRENT_DATE - 30 \n                AND ACT_EARNINGS_LOC_AMT <> 0 \n            GROUP BY\n                E.WEEK_DT,\n                E.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID) LBR \n            GROUP BY\n                WEEK_DT,\n                LOCATION_ID,\n                PRIMARY_SAP_DEPT_ID\n        ) W \n    JOIN\n        (\n            SELECT\n                D.WEEK_DT,\n                S.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID,\n                SUM(SALES_AMT) AS GROSS_SALES_LOC_AMT \n            FROM\n                SALES_TRANS_SKU S \n            JOIN\n                SKU_PROFILE_RPT K \n                    ON S.PRODUCT_ID = K.PRODUCT_ID \n            JOIN\n                DAYS D \n                    ON S.DAY_DT = D.DAY_DT \n            JOIN\n                (\n                    SELECT\n                        DISTINCT START_EFF_DT,\n                        END_EFF_DT,\n                        SAP_DEPT_ID,\n                        PRIMARY_SAP_DEPT_ID \n                    FROM\n                        SERVICES_MARGIN_CTRL\n                ) C \n                    ON S.DAY_DT BETWEEN C.START_EFF_DT AND C.END_EFF_DT \n                    AND K.SAP_DEPT_ID = C.SAP_DEPT_ID \n            WHERE\n                D.WEEK_DT >= CURRENT_DATE - 30 \n            GROUP BY\n                D.WEEK_DT,\n                S.LOCATION_ID,\n                C.PRIMARY_SAP_DEPT_ID) S \n                    ON W.WEEK_DT = S.WEEK_DT \n                    AND W.LOCATION_ID = S.LOCATION_ID \n                    AND W.PRIMARY_SAP_DEPT_ID = S.PRIMARY_SAP_DEPT_ID \n            GROUP BY\n                W.WEEK_DT,\n                W.LOCATION_ID,\n                W.PRIMARY_SAP_DEPT_ID\"\"\")","df_7.createOrReplaceTempView(\"SQ_SERVICES_MARGIN_RATE_PRE_7\")"]},"id":"SQ_SERVICES_MARGIN_RATE_PRE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_RATE","queries":["df_8=spark.sql(\"\"\"\n    SELECT\n        WEEK_DT AS WEEK_DT,\n        LOCATION_ID AS LOCATION_ID,\n        PRIMARY_SAP_DEPT_ID AS PRIMARY_SAP_DEPT_ID,\n        MARGIN_RATE AS MARGIN_RATE,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        SQ_SERVICES_MARGIN_RATE_PRE_7\"\"\")","df_8.createOrReplaceTempView(\"EXP_RATE_8\")"]},"id":"EXP_RATE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Target Definition","label":"SERVICES_MARGIN_RATE_PRE","queries":["spark.sql(\"\"\"INSERT INTO SERVICES_MARGIN_RATE_PRE SELECT WEEK_DT AS WEEK_DT,\nLOCATION_ID AS LOCATION_ID,\nPRIMARY_SAP_DEPT_ID AS SAP_DEPT_ID,\nMARGIN_RATE AS MARGIN_RATE FROM EXP_RATE_8\"\"\")"]},"id":"SERVICES_MARGIN_RATE_PRE","position":{"x":0,"y":0},"type":"normalNode"}]}