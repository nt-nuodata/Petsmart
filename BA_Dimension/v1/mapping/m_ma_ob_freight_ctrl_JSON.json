{"Edges":[{"transformationType":"Source Definition","id":"e-0","source":"","target":"MA_GL_ACCT_CTRL"},{"transformationType":"Source Definition","id":"e-1","source":"","target":"MA_OB_FREIGHT_CTRL"},{"transformationType":"Source Definition","id":"e-2","source":"","target":"MA_FISCAL_MO_CTRL"},{"transformationType":"Source Definition","id":"e-3","source":"","target":"MA_EVENT"},{"transformationType":"Source Definition","id":"e-4","source":"","target":"SUPPLY_CHAIN"},{"transformationType":"Source Definition","id":"e-5","source":"","target":"MA_SALES_TRANS_UPC"},{"transformationType":"Source Definition","id":"e-6","source":"","target":"GL_ACCOUNT_PROFILE"},{"transformationType":"Source Definition","id":"e-7","source":"","target":"GL_PROFIT_CENTER_PROFILE"},{"transformationType":"Source Definition","id":"e-8","source":"","target":"DAYS"},{"transformationType":"Source Qualifier","id":"e-9","source":"DAYS","target":"SQ_MA_OB_FREIGHT_CTRL_UPD"},{"transformationType":"Source Qualifier","id":"e-10","source":"SUPPLY_CHAIN","target":"SQ_MA_OB_FREIGHT_CTRL_UPD"},{"transformationType":"Source Qualifier","id":"e-11","source":"MA_OB_FREIGHT_CTRL","target":"SQ_MA_OB_FREIGHT_CTRL_UPD"},{"transformationType":"Expression","id":"e-12","source":"SQ_MA_OB_FREIGHT_CTRL_UPD","target":"EXP_UPDATE"},{"transformationType":"Source Qualifier","id":"e-13","source":"DAYS","target":"SQ_MA_OB_FREIGHT_CTRL_INS"},{"transformationType":"Source Qualifier","id":"e-14","source":"SUPPLY_CHAIN","target":"SQ_MA_OB_FREIGHT_CTRL_INS"},{"transformationType":"Source Qualifier","id":"e-15","source":"MA_OB_FREIGHT_CTRL","target":"SQ_MA_OB_FREIGHT_CTRL_INS"},{"transformationType":"Expression","id":"e-16","source":"SQ_MA_OB_FREIGHT_CTRL_INS","target":"EXP_INSERT"},{"transformationType":"Custom Transformation","id":"e-17","source":"EXP_INSERT","target":"UNI_OB_FREIGHT"},{"transformationType":"Custom Transformation","id":"e-18","source":"EXP_UPDATE","target":"UNI_OB_FREIGHT"},{"transformationType":"Update Strategy","id":"e-19","source":"UNI_OB_FREIGHT","target":"UPD_STRATEGY"},{"transformationType":"Source Definition","id":"e-20","source":"","target":"SITE_PROFILE"},{"transformationType":"Source Definition","id":"e-21","source":"","target":"GL_ACTUAL_DETAIL"},{"transformationType":"Target Definition","id":"e-22","source":"UPD_STRATEGY","target":"MA_OB_FREIGHT_CTRL"}],"Nodes":[{"data":{"transformationType":"Source Definition","label":"MA_GL_ACCT_CTRL","queries":["df_0=spark.sql(\"\"\"\n    SELECT\n        MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        GL_ACCT_NBR AS GL_ACCT_NBR,\n        START_EFF_DT AS START_EFF_DT,\n        END_EFF_DT AS END_EFF_DT,\n        DC_COST_OVERRIDE_IND AS DC_COST_OVERRIDE_IND,\n        UPDATE_TSTMP AS UPDATE_TSTMP,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        MA_GL_ACCT_CTRL\"\"\")","df_0.createOrReplaceTempView(\"MA_GL_ACCT_CTRL_0\")"]},"id":"MA_GL_ACCT_CTRL","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"MA_OB_FREIGHT_CTRL","queries":["df_1=spark.sql(\"\"\"\n    SELECT\n        FROM_LOCATION_ID AS FROM_LOCATION_ID,\n        FISCAL_MO AS FISCAL_MO,\n        R12_NET_SALES_COST AS R12_NET_SALES_COST,\n        R12_OB_FREIGHT_COST AS R12_OB_FREIGHT_COST,\n        R12_OB_FREIGHT_PCT AS R12_OB_FREIGHT_PCT,\n        ACT_NET_SALES_COST AS ACT_NET_SALES_COST,\n        ACT_OB_FREIGHT_COST AS ACT_OB_FREIGHT_COST,\n        ACT_OB_FREIGHT_PCT AS ACT_OB_FREIGHT_PCT,\n        UPDATE_TSTMP AS UPDATE_TSTMP,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        MA_OB_FREIGHT_CTRL\"\"\")","df_1.createOrReplaceTempView(\"MA_OB_FREIGHT_CTRL_1\")"]},"id":"MA_OB_FREIGHT_CTRL","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"MA_FISCAL_MO_CTRL","queries":["df_2=spark.sql(\"\"\"\n    SELECT\n        FISCAL_MO AS FISCAL_MO,\n        RESTATE_DT AS RESTATE_DT,\n        UPDATE_TSTMP AS UPDATE_TSTMP,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        MA_FISCAL_MO_CTRL\"\"\")","df_2.createOrReplaceTempView(\"MA_FISCAL_MO_CTRL_2\")"]},"id":"MA_FISCAL_MO_CTRL","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"MA_EVENT","queries":["df_3=spark.sql(\"\"\"\n    SELECT\n        MA_EVENT_ID AS MA_EVENT_ID,\n        OFFER_ID AS OFFER_ID,\n        SAP_DEPT_ID AS SAP_DEPT_ID,\n        PRODUCT_ID AS PRODUCT_ID,\n        COUNTRY_CD AS COUNTRY_CD,\n        START_DT AS START_DT,\n        END_DT AS END_DT,\n        MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\n        LOCATION_ID AS LOCATION_ID,\n        MOVEMENT_ID AS MOVEMENT_ID,\n        VALUATION_CLASS_CD AS VALUATION_CLASS_CD,\n        GL_ACCT_NBR AS GL_ACCT_NBR,\n        LOCATION_TYPE_ID AS LOCATION_TYPE_ID,\n        ROYALTY_BRAND_ID AS ROYALTY_BRAND_ID,\n        BRAND_CD AS BRAND_CD,\n        MA_FORMULA_CD AS MA_FORMULA_CD,\n        FISCAL_MO AS FISCAL_MO,\n        SAP_CATEGORY_ID AS SAP_CATEGORY_ID,\n        FROM_LOCATION_ID AS FROM_LOCATION_ID,\n        SOURCE_VENDOR_ID AS SOURCE_VENDOR_ID,\n        COMPANY_ID AS COMPANY_ID,\n        MA_EVENT_DESC AS MA_EVENT_DESC,\n        EM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,\n        EM_COMMENT AS EM_COMMENT,\n        EM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,\n        EM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,\n        EM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,\n        EM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,\n        EM_VENDOR_ID AS EM_VENDOR_ID,\n        EM_VENDOR_NAME AS EM_VENDOR_NAME,\n        EM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,\n        VENDOR_NAME_TXT AS VENDOR_NAME_TXT,\n        MA_PCT_IND AS MA_PCT_IND,\n        MA_AMT AS MA_AMT,\n        MA_MAX_AMT AS MA_MAX_AMT,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        MA_EVENT\"\"\")","df_3.createOrReplaceTempView(\"MA_EVENT_3\")"]},"id":"MA_EVENT","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"SUPPLY_CHAIN","queries":["df_4=spark.sql(\"\"\"\n    SELECT\n        PRODUCT_ID AS PRODUCT_ID,\n        LOCATION_ID AS LOCATION_ID,\n        DIRECT_VENDOR_ID AS DIRECT_VENDOR_ID,\n        SOURCE_VENDOR_ID AS SOURCE_VENDOR_ID,\n        PRIMARY_VENDOR_ID AS PRIMARY_VENDOR_ID,\n        FROM_LOCATION_ID AS FROM_LOCATION_ID,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        SUPPLY_CHAIN\"\"\")","df_4.createOrReplaceTempView(\"SUPPLY_CHAIN_4\")"]},"id":"SUPPLY_CHAIN","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"MA_SALES_TRANS_UPC","queries":["df_5=spark.sql(\"\"\"\n    SELECT\n        DAY_DT AS DAY_DT,\n        LOCATION_ID AS LOCATION_ID,\n        SALES_INSTANCE_ID AS SALES_INSTANCE_ID,\n        UPC_ID AS UPC_ID,\n        TP_INVOICE_NBR AS TP_INVOICE_NBR,\n        PARENT_UPC_ID AS PARENT_UPC_ID,\n        COMBO_TYPE_CD AS COMBO_TYPE_CD,\n        POS_TXN_SEQ_NBR AS POS_TXN_SEQ_NBR,\n        MA_EVENT_ID AS MA_EVENT_ID,\n        PRODUCT_ID AS PRODUCT_ID,\n        SALES_CUST_CAPTURE_CD AS SALES_CUST_CAPTURE_CD,\n        MA_SALES_AMT AS MA_SALES_AMT,\n        MA_SALES_QTY AS MA_SALES_QTY,\n        EXCH_RATE_PCT AS EXCH_RATE_PCT,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        MA_SALES_TRANS_UPC\"\"\")","df_5.createOrReplaceTempView(\"MA_SALES_TRANS_UPC_5\")"]},"id":"MA_SALES_TRANS_UPC","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"GL_ACCOUNT_PROFILE","queries":["df_6=spark.sql(\"\"\"\n    SELECT\n        GL_ACCOUNT_GID AS GL_ACCOUNT_GID,\n        GL_CHART_OF_ACCOUNTS_CD AS GL_CHART_OF_ACCOUNTS_CD,\n        GL_ACCOUNT_NBR AS GL_ACCOUNT_NBR,\n        GL_ACCOUNT_DESC AS GL_ACCOUNT_DESC,\n        GL_ACCOUNT_GROUP_CD AS GL_ACCOUNT_GROUP_CD,\n        GL_ACCOUNT_GROUP_DESC AS GL_ACCOUNT_GROUP_DESC,\n        GL_BAL_SHEET_IND AS GL_BAL_SHEET_IND,\n        GL_PL_IND AS GL_PL_IND,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        GL_ACCOUNT_PROFILE\"\"\")","df_6.createOrReplaceTempView(\"GL_ACCOUNT_PROFILE_6\")"]},"id":"GL_ACCOUNT_PROFILE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"GL_PROFIT_CENTER_PROFILE","queries":["df_7=spark.sql(\"\"\"\n    SELECT\n        GL_PROFIT_CENTER_GID AS GL_PROFIT_CENTER_GID,\n        GL_COMPANY_CD AS GL_COMPANY_CD,\n        GL_PROFIT_CENTER_CD AS GL_PROFIT_CENTER_CD,\n        GL_PROFIT_CENTER_DESC AS GL_PROFIT_CENTER_DESC,\n        GL_HIERARCHY_AREA AS GL_HIERARCHY_AREA,\n        VALID_FROM_DT AS VALID_FROM_DT,\n        VALID_TO_DT AS VALID_TO_DT,\n        CURRENCY_ID AS CURRENCY_ID,\n        LOCATION_ID AS LOCATION_ID,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        GL_PROFIT_CENTER_PROFILE\"\"\")","df_7.createOrReplaceTempView(\"GL_PROFIT_CENTER_PROFILE_7\")"]},"id":"GL_PROFIT_CENTER_PROFILE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"DAYS","queries":["df_8=spark.sql(\"\"\"\n    SELECT\n        DAY_DT AS DAY_DT,\n        BUSINESS_DAY_FLAG AS BUSINESS_DAY_FLAG,\n        HOLIDAY_FLAG AS HOLIDAY_FLAG,\n        DAY_OF_WK_NAME AS DAY_OF_WK_NAME,\n        DAY_OF_WK_NAME_ABBR AS DAY_OF_WK_NAME_ABBR,\n        DAY_OF_WK_NBR AS DAY_OF_WK_NBR,\n        CAL_DAY_OF_MO_NBR AS CAL_DAY_OF_MO_NBR,\n        CAL_DAY_OF_YR_NBR AS CAL_DAY_OF_YR_NBR,\n        CAL_WK AS CAL_WK,\n        CAL_WK_NBR AS CAL_WK_NBR,\n        CAL_MO AS CAL_MO,\n        CAL_MO_NBR AS CAL_MO_NBR,\n        CAL_MO_NAME AS CAL_MO_NAME,\n        CAL_MO_NAME_ABBR AS CAL_MO_NAME_ABBR,\n        CAL_QTR AS CAL_QTR,\n        CAL_QTR_NBR AS CAL_QTR_NBR,\n        CAL_HALF AS CAL_HALF,\n        CAL_YR AS CAL_YR,\n        FISCAL_DAY_OF_MO_NBR AS FISCAL_DAY_OF_MO_NBR,\n        FISCAL_DAY_OF_YR_NBR AS FISCAL_DAY_OF_YR_NBR,\n        FISCAL_WK AS FISCAL_WK,\n        FISCAL_WK_NBR AS FISCAL_WK_NBR,\n        FISCAL_MO AS FISCAL_MO,\n        FISCAL_MO_NBR AS FISCAL_MO_NBR,\n        FISCAL_MO_NAME AS FISCAL_MO_NAME,\n        FISCAL_MO_NAME_ABBR AS FISCAL_MO_NAME_ABBR,\n        FISCAL_QTR AS FISCAL_QTR,\n        FISCAL_QTR_NBR AS FISCAL_QTR_NBR,\n        FISCAL_HALF AS FISCAL_HALF,\n        FISCAL_YR AS FISCAL_YR,\n        LYR_WEEK_DT AS LYR_WEEK_DT,\n        LWK_WEEK_DT AS LWK_WEEK_DT,\n        WEEK_DT AS WEEK_DT,\n        EST_TIME_CONV_AMT AS EST_TIME_CONV_AMT,\n        EST_TIME_CONV_HRS AS EST_TIME_CONV_HRS,\n        ES0_TIME_CONV_AMT AS ES0_TIME_CONV_AMT,\n        ES0_TIME_CONV_HRS AS ES0_TIME_CONV_HRS,\n        CST_TIME_CONV_AMT AS CST_TIME_CONV_AMT,\n        CST_TIME_CONV_HRS AS CST_TIME_CONV_HRS,\n        CS0_TIME_CONV_AMT AS CS0_TIME_CONV_AMT,\n        CS0_TIME_CONV_HRS AS CS0_TIME_CONV_HRS,\n        MST_TIME_CONV_AMT AS MST_TIME_CONV_AMT,\n        MST_TIME_CONV_HRS AS MST_TIME_CONV_HRS,\n        MS0_TIME_CONV_AMT AS MS0_TIME_CONV_AMT,\n        MS0_TIME_CONV_HRS AS MS0_TIME_CONV_HRS,\n        PST_TIME_CONV_AMT AS PST_TIME_CONV_AMT,\n        PST_TIME_CONV_HRS AS PST_TIME_CONV_HRS,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        DAYS\"\"\")","df_8.createOrReplaceTempView(\"DAYS_8\")"]},"id":"DAYS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_MA_OB_FREIGHT_CTRL_UPD","queries":["df_9=spark.sql(\"\"\"\n    SELECT\n        SC.FROM_LOCATION_ID,\n        SC.FISCAL_MO,\n        SC.R12_NET_SALES_COST,\n        SC.R12_OB_FREIGHT_COST,\n        SC.R12_OB_FREIGHT_PCT,\n        SC.ACT_NET_SALES_COST,\n        NVL(GLA.ACT_OB_FREIGHT_COST,\n        0) ACT_OB_FREIGHT_COST,\n        CASE \n            WHEN SC.ACT_NET_SALES_COST = 0 THEN 0 \n            ELSE NVL(GLA.ACT_OB_FREIGHT_COST,\n            0) / SC.ACT_NET_SALES_COST \n        END ACT_OB_FREIGHT_PCT,\n        SC.UPDATE_TSTMP \n    FROM\n        (SELECT\n            MOFC.FROM_LOCATION_ID,\n            MOFC.FISCAL_MO,\n            MAX(MOFC.R12_NET_SALES_COST) R12_NET_SALES_COST,\n            MAX(MOFC.R12_OB_FREIGHT_COST) R12_OB_FREIGHT_COST,\n            MAX(MOFC.R12_OB_FREIGHT_PCT) R12_OB_FREIGHT_PCT,\n            ROUND(NVL(SUM((STU.SALES_COST - STU.RETURN_COST) * STU.EXCH_RATE_PCT),\n            0),\n            2) ACT_NET_SALES_COST,\n            MAX(MOFC.UPDATE_TSTMP) UPDATE_TSTMP \n        FROM\n            MA_OB_FREIGHT_CTRL MOFC \n        JOIN\n            MA_EVENT ME \n                ON MOFC.FROM_LOCATION_ID = ME.FROM_LOCATION_ID \n                AND MOFC.FISCAL_MO = ME.FISCAL_MO \n                AND ME.MA_EVENT_TYPE_ID = 70 \n        JOIN\n            MA_SALES_TRANS_UPC MSTU \n                ON ME.MA_EVENT_ID = MSTU.MA_EVENT_ID \n        JOIN\n            MA_FISCAL_MO_CTRL MFMC \n                ON MOFC.FISCAL_MO = MFMC.FISCAL_MO \n                AND MFMC.RESTATE_DT = CURRENT_DATE \n        JOIN\n            SALES_TRANS_UPC STU \n                ON MSTU.DAY_DT = STU.DAY_DT \n                AND MSTU.LOCATION_ID = STU.LOCATION_ID \n                AND MSTU.SALES_INSTANCE_ID = STU.SALES_INSTANCE_ID \n                AND MSTU.UPC_ID = STU.UPC_ID \n                AND MSTU.TP_INVOICE_NBR = STU.TP_INVOICE_NBR \n                AND MSTU.PARENT_UPC_ID = STU.PARENT_UPC_ID \n                AND MSTU.COMBO_TYPE_CD = STU.COMBO_TYPE_CD \n                AND MSTU.POS_TXN_SEQ_NBR = STU.POS_TXN_SEQ_NBR \n        GROUP BY\n            MOFC.FROM_LOCATION_ID,\n            MOFC.FISCAL_MO) SC \n    LEFT JOIN\n        (\n            SELECT\n                GAD.FISCAL_MO,\n                CASE \n                    WHEN SITE.LOCATION_TYPE_ID IN (1,\n                    3) THEN SITE.LOCATION_ID \n                    WHEN SUBSTR(GPCP.GL_PROFIT_CENTER_CD,\n                    1,\n                    8) = '00000039' THEN SITE2.LOCATION_ID \n                    ELSE 0 \n                END FROM_LOCATION_ID,\n                SUM(GAD.GL_GRP_AMT) ACT_OB_FREIGHT_COST \n            FROM\n                GL_ACTUAL_DETAIL GAD \n            JOIN\n                GL_ACCOUNT_PROFILE GAP \n                    ON GAD.GL_ACCOUNT_GID = GAP.GL_ACCOUNT_GID \n            JOIN\n                GL_PROFIT_CENTER_PROFILE GPCP \n                    ON GAD.GL_PROFIT_CENTER_GID = GPCP.GL_PROFIT_CENTER_GID \n            JOIN\n                DM_GL_COA DGC \n                    ON GAP.GL_ACCOUNT_NBR = DGC.GL_ACCT_NBR \n            JOIN\n                SITE_PROFILE SITE \n                    ON GAD.LOCATION_ID = SITE.LOCATION_ID \n            JOIN\n                MA_FISCAL_MO_CTRL MFMC \n                    ON GAD.FISCAL_MO = MFMC.FISCAL_MO \n                    AND MFMC.RESTATE_DT = CURRENT_DATE \n            JOIN\n                (\n                    SELECT\n                        MA_EVENT_TYPE_VAR_VALUE,\n                        START_EFF_DT,\n                        END_EFF_DT \n                    FROM\n                        MA_EVENT_TYPE_VAR_CTRL \n                    WHERE\n                        MA_EVENT_TYPE_ID = 70 \n                        AND MA_EVENT_TYPE_VAR_TYPE_CD = 'STORE_LNBR'\n                ) DCSLE \n                    ON DGC.STORE_LNBR::VARCHAR (25) = DCSLE.MA_EVENT_TYPE_VAR_VALUE \n                    AND GAD.GL_POSTING_DT BETWEEN DCSLE.START_EFF_DT AND DCSLE.END_EFF_DT \n            LEFT JOIN\n                (\n                    SELECT\n                        LPAD(STORE_NBR,\n                        2,\n                        '0') STORE_NBR,\n                        LOCATION_ID \n                    FROM\n                        SITE_PROFILE \n                    WHERE\n                        LOCATION_TYPE_ID IN (\n                            1, 3\n                        ) \n                        AND LENGTH(STORE_NBR) <= 2\n                ) SITE2 \n                    ON CASE \n                        WHEN SUBSTR(GPCP.GL_PROFIT_CENTER_CD,\n                    1,\n                    8) = '00000039' THEN SUBSTR(GPCP.GL_PROFIT_CENTER_CD,\n                    9,\n                    2) \n                END = SITE2.STORE_NBR \n            GROUP BY\n                GAD.FISCAL_MO,\n                CASE \n                    WHEN SITE.LOCATION_TYPE_ID IN (1,\n                    3) THEN SITE.LOCATION_ID \n                    WHEN SUBSTR(GPCP.GL_PROFIT_CENTER_CD,\n                    1,\n                    8) = '00000039' THEN SITE2.LOCATION_ID \n                    ELSE 0 \n                END) GLA \n                    ON SC.FROM_LOCATION_ID = GLA.FROM_LOCATION_ID \n                    AND SC.FISCAL_MO = GLA.FISCAL_MO\"\"\")","df_9.createOrReplaceTempView(\"SQ_MA_OB_FREIGHT_CTRL_UPD_9\")"]},"id":"SQ_MA_OB_FREIGHT_CTRL_UPD","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_MA_OB_FREIGHT_CTRL_UPD","queries":["df_9=spark.sql(\"\"\"\n    SELECT\n        SC.FROM_LOCATION_ID,\n        SC.FISCAL_MO,\n        SC.R12_NET_SALES_COST,\n        SC.R12_OB_FREIGHT_COST,\n        SC.R12_OB_FREIGHT_PCT,\n        SC.ACT_NET_SALES_COST,\n        NVL(GLA.ACT_OB_FREIGHT_COST,\n        0) ACT_OB_FREIGHT_COST,\n        CASE \n            WHEN SC.ACT_NET_SALES_COST = 0 THEN 0 \n            ELSE NVL(GLA.ACT_OB_FREIGHT_COST,\n            0) / SC.ACT_NET_SALES_COST \n        END ACT_OB_FREIGHT_PCT,\n        SC.UPDATE_TSTMP \n    FROM\n        (SELECT\n            MOFC.FROM_LOCATION_ID,\n            MOFC.FISCAL_MO,\n            MAX(MOFC.R12_NET_SALES_COST) R12_NET_SALES_COST,\n            MAX(MOFC.R12_OB_FREIGHT_COST) R12_OB_FREIGHT_COST,\n            MAX(MOFC.R12_OB_FREIGHT_PCT) R12_OB_FREIGHT_PCT,\n            ROUND(NVL(SUM((STU.SALES_COST - STU.RETURN_COST) * STU.EXCH_RATE_PCT),\n            0),\n            2) ACT_NET_SALES_COST,\n            MAX(MOFC.UPDATE_TSTMP) UPDATE_TSTMP \n        FROM\n            MA_OB_FREIGHT_CTRL MOFC \n        JOIN\n            MA_EVENT ME \n                ON MOFC.FROM_LOCATION_ID = ME.FROM_LOCATION_ID \n                AND MOFC.FISCAL_MO = ME.FISCAL_MO \n                AND ME.MA_EVENT_TYPE_ID = 70 \n        JOIN\n            MA_SALES_TRANS_UPC MSTU \n                ON ME.MA_EVENT_ID = MSTU.MA_EVENT_ID \n        JOIN\n            MA_FISCAL_MO_CTRL MFMC \n                ON MOFC.FISCAL_MO = MFMC.FISCAL_MO \n                AND MFMC.RESTATE_DT = CURRENT_DATE \n        JOIN\n            SALES_TRANS_UPC STU \n                ON MSTU.DAY_DT = STU.DAY_DT \n                AND MSTU.LOCATION_ID = STU.LOCATION_ID \n                AND MSTU.SALES_INSTANCE_ID = STU.SALES_INSTANCE_ID \n                AND MSTU.UPC_ID = STU.UPC_ID \n                AND MSTU.TP_INVOICE_NBR = STU.TP_INVOICE_NBR \n                AND MSTU.PARENT_UPC_ID = STU.PARENT_UPC_ID \n                AND MSTU.COMBO_TYPE_CD = STU.COMBO_TYPE_CD \n                AND MSTU.POS_TXN_SEQ_NBR = STU.POS_TXN_SEQ_NBR \n        GROUP BY\n            MOFC.FROM_LOCATION_ID,\n            MOFC.FISCAL_MO) SC \n    LEFT JOIN\n        (\n            SELECT\n                GAD.FISCAL_MO,\n                CASE \n                    WHEN SITE.LOCATION_TYPE_ID IN (1,\n                    3) THEN SITE.LOCATION_ID \n                    WHEN SUBSTR(GPCP.GL_PROFIT_CENTER_CD,\n                    1,\n                    8) = '00000039' THEN SITE2.LOCATION_ID \n                    ELSE 0 \n                END FROM_LOCATION_ID,\n                SUM(GAD.GL_GRP_AMT) ACT_OB_FREIGHT_COST \n            FROM\n                GL_ACTUAL_DETAIL GAD \n            JOIN\n                GL_ACCOUNT_PROFILE GAP \n                    ON GAD.GL_ACCOUNT_GID = GAP.GL_ACCOUNT_GID \n            JOIN\n                GL_PROFIT_CENTER_PROFILE GPCP \n                    ON GAD.GL_PROFIT_CENTER_GID = GPCP.GL_PROFIT_CENTER_GID \n            JOIN\n                DM_GL_COA DGC \n                    ON GAP.GL_ACCOUNT_NBR = DGC.GL_ACCT_NBR \n            JOIN\n                SITE_PROFILE SITE \n                    ON GAD.LOCATION_ID = SITE.LOCATION_ID \n            JOIN\n                MA_FISCAL_MO_CTRL MFMC \n                    ON GAD.FISCAL_MO = MFMC.FISCAL_MO \n                    AND MFMC.RESTATE_DT = CURRENT_DATE \n            JOIN\n                (\n                    SELECT\n                        MA_EVENT_TYPE_VAR_VALUE,\n                        START_EFF_DT,\n                        END_EFF_DT \n                    FROM\n                        MA_EVENT_TYPE_VAR_CTRL \n                    WHERE\n                        MA_EVENT_TYPE_ID = 70 \n                        AND MA_EVENT_TYPE_VAR_TYPE_CD = 'STORE_LNBR'\n                ) DCSLE \n                    ON DGC.STORE_LNBR::VARCHAR (25) = DCSLE.MA_EVENT_TYPE_VAR_VALUE \n                    AND GAD.GL_POSTING_DT BETWEEN DCSLE.START_EFF_DT AND DCSLE.END_EFF_DT \n            LEFT JOIN\n                (\n                    SELECT\n                        LPAD(STORE_NBR,\n                        2,\n                        '0') STORE_NBR,\n                        LOCATION_ID \n                    FROM\n                        SITE_PROFILE \n                    WHERE\n                        LOCATION_TYPE_ID IN (\n                            1, 3\n                        ) \n                        AND LENGTH(STORE_NBR) <= 2\n                ) SITE2 \n                    ON CASE \n                        WHEN SUBSTR(GPCP.GL_PROFIT_CENTER_CD,\n                    1,\n                    8) = '00000039' THEN SUBSTR(GPCP.GL_PROFIT_CENTER_CD,\n                    9,\n                    2) \n                END = SITE2.STORE_NBR \n            GROUP BY\n                GAD.FISCAL_MO,\n                CASE \n                    WHEN SITE.LOCATION_TYPE_ID IN (1,\n                    3) THEN SITE.LOCATION_ID \n                    WHEN SUBSTR(GPCP.GL_PROFIT_CENTER_CD,\n                    1,\n                    8) = '00000039' THEN SITE2.LOCATION_ID \n                    ELSE 0 \n                END) GLA \n                    ON SC.FROM_LOCATION_ID = GLA.FROM_LOCATION_ID \n                    AND SC.FISCAL_MO = GLA.FISCAL_MO\"\"\")","df_9.createOrReplaceTempView(\"SQ_MA_OB_FREIGHT_CTRL_UPD_9\")"]},"id":"SQ_MA_OB_FREIGHT_CTRL_UPD","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_MA_OB_FREIGHT_CTRL_UPD","queries":["df_9=spark.sql(\"\"\"\n    SELECT\n        SC.FROM_LOCATION_ID,\n        SC.FISCAL_MO,\n        SC.R12_NET_SALES_COST,\n        SC.R12_OB_FREIGHT_COST,\n        SC.R12_OB_FREIGHT_PCT,\n        SC.ACT_NET_SALES_COST,\n        NVL(GLA.ACT_OB_FREIGHT_COST,\n        0) ACT_OB_FREIGHT_COST,\n        CASE \n            WHEN SC.ACT_NET_SALES_COST = 0 THEN 0 \n            ELSE NVL(GLA.ACT_OB_FREIGHT_COST,\n            0) / SC.ACT_NET_SALES_COST \n        END ACT_OB_FREIGHT_PCT,\n        SC.UPDATE_TSTMP \n    FROM\n        (SELECT\n            MOFC.FROM_LOCATION_ID,\n            MOFC.FISCAL_MO,\n            MAX(MOFC.R12_NET_SALES_COST) R12_NET_SALES_COST,\n            MAX(MOFC.R12_OB_FREIGHT_COST) R12_OB_FREIGHT_COST,\n            MAX(MOFC.R12_OB_FREIGHT_PCT) R12_OB_FREIGHT_PCT,\n            ROUND(NVL(SUM((STU.SALES_COST - STU.RETURN_COST) * STU.EXCH_RATE_PCT),\n            0),\n            2) ACT_NET_SALES_COST,\n            MAX(MOFC.UPDATE_TSTMP) UPDATE_TSTMP \n        FROM\n            MA_OB_FREIGHT_CTRL MOFC \n        JOIN\n            MA_EVENT ME \n                ON MOFC.FROM_LOCATION_ID = ME.FROM_LOCATION_ID \n                AND MOFC.FISCAL_MO = ME.FISCAL_MO \n                AND ME.MA_EVENT_TYPE_ID = 70 \n        JOIN\n            MA_SALES_TRANS_UPC MSTU \n                ON ME.MA_EVENT_ID = MSTU.MA_EVENT_ID \n        JOIN\n            MA_FISCAL_MO_CTRL MFMC \n                ON MOFC.FISCAL_MO = MFMC.FISCAL_MO \n                AND MFMC.RESTATE_DT = CURRENT_DATE \n        JOIN\n            SALES_TRANS_UPC STU \n                ON MSTU.DAY_DT = STU.DAY_DT \n                AND MSTU.LOCATION_ID = STU.LOCATION_ID \n                AND MSTU.SALES_INSTANCE_ID = STU.SALES_INSTANCE_ID \n                AND MSTU.UPC_ID = STU.UPC_ID \n                AND MSTU.TP_INVOICE_NBR = STU.TP_INVOICE_NBR \n                AND MSTU.PARENT_UPC_ID = STU.PARENT_UPC_ID \n                AND MSTU.COMBO_TYPE_CD = STU.COMBO_TYPE_CD \n                AND MSTU.POS_TXN_SEQ_NBR = STU.POS_TXN_SEQ_NBR \n        GROUP BY\n            MOFC.FROM_LOCATION_ID,\n            MOFC.FISCAL_MO) SC \n    LEFT JOIN\n        (\n            SELECT\n                GAD.FISCAL_MO,\n                CASE \n                    WHEN SITE.LOCATION_TYPE_ID IN (1,\n                    3) THEN SITE.LOCATION_ID \n                    WHEN SUBSTR(GPCP.GL_PROFIT_CENTER_CD,\n                    1,\n                    8) = '00000039' THEN SITE2.LOCATION_ID \n                    ELSE 0 \n                END FROM_LOCATION_ID,\n                SUM(GAD.GL_GRP_AMT) ACT_OB_FREIGHT_COST \n            FROM\n                GL_ACTUAL_DETAIL GAD \n            JOIN\n                GL_ACCOUNT_PROFILE GAP \n                    ON GAD.GL_ACCOUNT_GID = GAP.GL_ACCOUNT_GID \n            JOIN\n                GL_PROFIT_CENTER_PROFILE GPCP \n                    ON GAD.GL_PROFIT_CENTER_GID = GPCP.GL_PROFIT_CENTER_GID \n            JOIN\n                DM_GL_COA DGC \n                    ON GAP.GL_ACCOUNT_NBR = DGC.GL_ACCT_NBR \n            JOIN\n                SITE_PROFILE SITE \n                    ON GAD.LOCATION_ID = SITE.LOCATION_ID \n            JOIN\n                MA_FISCAL_MO_CTRL MFMC \n                    ON GAD.FISCAL_MO = MFMC.FISCAL_MO \n                    AND MFMC.RESTATE_DT = CURRENT_DATE \n            JOIN\n                (\n                    SELECT\n                        MA_EVENT_TYPE_VAR_VALUE,\n                        START_EFF_DT,\n                        END_EFF_DT \n                    FROM\n                        MA_EVENT_TYPE_VAR_CTRL \n                    WHERE\n                        MA_EVENT_TYPE_ID = 70 \n                        AND MA_EVENT_TYPE_VAR_TYPE_CD = 'STORE_LNBR'\n                ) DCSLE \n                    ON DGC.STORE_LNBR::VARCHAR (25) = DCSLE.MA_EVENT_TYPE_VAR_VALUE \n                    AND GAD.GL_POSTING_DT BETWEEN DCSLE.START_EFF_DT AND DCSLE.END_EFF_DT \n            LEFT JOIN\n                (\n                    SELECT\n                        LPAD(STORE_NBR,\n                        2,\n                        '0') STORE_NBR,\n                        LOCATION_ID \n                    FROM\n                        SITE_PROFILE \n                    WHERE\n                        LOCATION_TYPE_ID IN (\n                            1, 3\n                        ) \n                        AND LENGTH(STORE_NBR) <= 2\n                ) SITE2 \n                    ON CASE \n                        WHEN SUBSTR(GPCP.GL_PROFIT_CENTER_CD,\n                    1,\n                    8) = '00000039' THEN SUBSTR(GPCP.GL_PROFIT_CENTER_CD,\n                    9,\n                    2) \n                END = SITE2.STORE_NBR \n            GROUP BY\n                GAD.FISCAL_MO,\n                CASE \n                    WHEN SITE.LOCATION_TYPE_ID IN (1,\n                    3) THEN SITE.LOCATION_ID \n                    WHEN SUBSTR(GPCP.GL_PROFIT_CENTER_CD,\n                    1,\n                    8) = '00000039' THEN SITE2.LOCATION_ID \n                    ELSE 0 \n                END) GLA \n                    ON SC.FROM_LOCATION_ID = GLA.FROM_LOCATION_ID \n                    AND SC.FISCAL_MO = GLA.FISCAL_MO\"\"\")","df_9.createOrReplaceTempView(\"SQ_MA_OB_FREIGHT_CTRL_UPD_9\")"]},"id":"SQ_MA_OB_FREIGHT_CTRL_UPD","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_UPDATE","queries":["df_10=spark.sql(\"\"\"\n    SELECT\n        FROM_LOCATION_ID AS FROM_LOCATION_ID,\n        FISCAL_MO AS FISCAL_MO,\n        R12_NET_SALES_COST AS R12_NET_SALES_COST,\n        R12_OB_FREIGHT_COST AS R12_OB_FREIGHT_COST,\n        R12_OB_FREIGHT_PCT AS R12_OB_FREIGHT_PCT,\n        ACT_NET_SALES_COST AS ACT_NET_SALES_COST,\n        ACT_OB_FREIGHT_COST AS ACT_OB_FREIGHT_COST,\n        ACT_OB_FREIGHT_PCT AS ACT_OB_FREIGHT_PCT,\n        UPDATE_TSTMP AS UPDATE_TSTMP,\n        current_timestamp AS LOAD_TSTMP,\n        'U' AS INS_UPD_FLAG,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        SQ_MA_OB_FREIGHT_CTRL_UPD_9\"\"\")","df_10.createOrReplaceTempView(\"EXP_UPDATE_10\")"]},"id":"EXP_UPDATE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_MA_OB_FREIGHT_CTRL_INS","queries":["df_11=spark.sql(\"\"\"\n    SELECT\n        A.FROM_LOCATION_ID,\n        A.FISCAL_MO,\n        NVL(LR.EST_NET_SALES_COST,\n        WR.EST_NET_SALES_COST) R12_NET_SALES_COST,\n        NVL(LR.EST_OB_FREIGHT_COST,\n        WR.EST_OB_FREIGHT_COST) R12_OB_FREIGHT_COST,\n        NVL(LR.EST_OB_FREIGHT_PCT,\n        WR.EST_OB_FREIGHT_PCT) R12_OB_FREIGHT_PCT \n    FROM\n        (SELECT\n            DISTINCT SC.FROM_LOCATION_ID,\n            D.FISCAL_MO \n        FROM\n            SUPPLY_CHAIN SC \n        JOIN\n            SITE_PROFILE SITE \n                ON SC.FROM_LOCATION_ID = SITE.LOCATION_ID CROSS \n        JOIN\n            (\n                SELECT\n                    DISTINCT FISCAL_MO \n                FROM\n                    DAYS D \n                WHERE\n                    DAY_DT = CURRENT_DATE - 1 \n                    AND FISCAL_MO > (\n                        SELECT\n                            MAX(FISCAL_MO) \n                        FROM\n                            MA_OB_FREIGHT_CTRL \n                        WHERE\n                            ACT_NET_SALES_COST IS NOT NULL\n                    )\n                ) D \n            WHERE\n                SITE.LOCATION_TYPE_ID IN (\n                    1, 3\n                )\n        ) A \n    LEFT JOIN\n        MA_OB_FREIGHT_CTRL MOFC \n            ON A.FROM_LOCATION_ID = MOFC.FROM_LOCATION_ID \n            AND A.FISCAL_MO = MOFC.FISCAL_MO \n    LEFT JOIN\n        (\n            SELECT\n                FROM_LOCATION_ID,\n                SUM(ACT_NET_SALES_COST) EST_NET_SALES_COST,\n                SUM(ACT_OB_FREIGHT_COST) EST_OB_FREIGHT_COST,\n                CASE \n                    WHEN EST_NET_SALES_COST <> 0 THEN EST_OB_FREIGHT_COST / EST_NET_SALES_COST \n                    ELSE 0 \n                END EST_OB_FREIGHT_PCT,\n                SUM(1) FISCAL_MO_CNT \n            FROM\n                MA_OB_FREIGHT_CTRL \n            WHERE\n                FISCAL_MO BETWEEN (SELECT\n                    MAX(FISCAL_MO) - 99 \n                FROM\n                    MA_OB_FREIGHT_CTRL \n                WHERE\n                    ACT_NET_SALES_COST IS NOT NULL) AND (\n                    SELECT\n                        MAX(FISCAL_MO) \n                    FROM\n                        MA_OB_FREIGHT_CTRL \n                    WHERE\n                        ACT_NET_SALES_COST IS NOT NULL\n                ) \n            GROUP BY\n                FROM_LOCATION_ID \n            HAVING\n                FISCAL_MO_CNT >= 3\n            ) LR \n                ON A.FROM_LOCATION_ID = LR.FROM_LOCATION_ID CROSS \n        JOIN\n            (\n                SELECT\n                    SUM(ACT_NET_SALES_COST) EST_NET_SALES_COST,\n                    SUM(ACT_OB_FREIGHT_COST) EST_OB_FREIGHT_COST,\n                    CASE \n                        WHEN EST_NET_SALES_COST <> 0 THEN EST_OB_FREIGHT_COST / EST_NET_SALES_COST \n                        ELSE 0 \n                    END EST_OB_FREIGHT_PCT \n                FROM\n                    MA_OB_FREIGHT_CTRL \n                WHERE\n                    FISCAL_MO BETWEEN (SELECT\n                        MAX(FISCAL_MO) - 99 \n                    FROM\n                        MA_OB_FREIGHT_CTRL \n                    WHERE\n                        ACT_NET_SALES_COST IS NOT NULL) AND (\n                        SELECT\n                            MAX(FISCAL_MO) \n                        FROM\n                            MA_OB_FREIGHT_CTRL \n                        WHERE\n                            ACT_NET_SALES_COST IS NOT NULL\n                    )\n                ) WR \n            WHERE\n                MOFC.FROM_LOCATION_ID IS NULL\"\"\")","df_11.createOrReplaceTempView(\"SQ_MA_OB_FREIGHT_CTRL_INS_11\")"]},"id":"SQ_MA_OB_FREIGHT_CTRL_INS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_MA_OB_FREIGHT_CTRL_INS","queries":["df_11=spark.sql(\"\"\"\n    SELECT\n        A.FROM_LOCATION_ID,\n        A.FISCAL_MO,\n        NVL(LR.EST_NET_SALES_COST,\n        WR.EST_NET_SALES_COST) R12_NET_SALES_COST,\n        NVL(LR.EST_OB_FREIGHT_COST,\n        WR.EST_OB_FREIGHT_COST) R12_OB_FREIGHT_COST,\n        NVL(LR.EST_OB_FREIGHT_PCT,\n        WR.EST_OB_FREIGHT_PCT) R12_OB_FREIGHT_PCT \n    FROM\n        (SELECT\n            DISTINCT SC.FROM_LOCATION_ID,\n            D.FISCAL_MO \n        FROM\n            SUPPLY_CHAIN SC \n        JOIN\n            SITE_PROFILE SITE \n                ON SC.FROM_LOCATION_ID = SITE.LOCATION_ID CROSS \n        JOIN\n            (\n                SELECT\n                    DISTINCT FISCAL_MO \n                FROM\n                    DAYS D \n                WHERE\n                    DAY_DT = CURRENT_DATE - 1 \n                    AND FISCAL_MO > (\n                        SELECT\n                            MAX(FISCAL_MO) \n                        FROM\n                            MA_OB_FREIGHT_CTRL \n                        WHERE\n                            ACT_NET_SALES_COST IS NOT NULL\n                    )\n                ) D \n            WHERE\n                SITE.LOCATION_TYPE_ID IN (\n                    1, 3\n                )\n        ) A \n    LEFT JOIN\n        MA_OB_FREIGHT_CTRL MOFC \n            ON A.FROM_LOCATION_ID = MOFC.FROM_LOCATION_ID \n            AND A.FISCAL_MO = MOFC.FISCAL_MO \n    LEFT JOIN\n        (\n            SELECT\n                FROM_LOCATION_ID,\n                SUM(ACT_NET_SALES_COST) EST_NET_SALES_COST,\n                SUM(ACT_OB_FREIGHT_COST) EST_OB_FREIGHT_COST,\n                CASE \n                    WHEN EST_NET_SALES_COST <> 0 THEN EST_OB_FREIGHT_COST / EST_NET_SALES_COST \n                    ELSE 0 \n                END EST_OB_FREIGHT_PCT,\n                SUM(1) FISCAL_MO_CNT \n            FROM\n                MA_OB_FREIGHT_CTRL \n            WHERE\n                FISCAL_MO BETWEEN (SELECT\n                    MAX(FISCAL_MO) - 99 \n                FROM\n                    MA_OB_FREIGHT_CTRL \n                WHERE\n                    ACT_NET_SALES_COST IS NOT NULL) AND (\n                    SELECT\n                        MAX(FISCAL_MO) \n                    FROM\n                        MA_OB_FREIGHT_CTRL \n                    WHERE\n                        ACT_NET_SALES_COST IS NOT NULL\n                ) \n            GROUP BY\n                FROM_LOCATION_ID \n            HAVING\n                FISCAL_MO_CNT >= 3\n            ) LR \n                ON A.FROM_LOCATION_ID = LR.FROM_LOCATION_ID CROSS \n        JOIN\n            (\n                SELECT\n                    SUM(ACT_NET_SALES_COST) EST_NET_SALES_COST,\n                    SUM(ACT_OB_FREIGHT_COST) EST_OB_FREIGHT_COST,\n                    CASE \n                        WHEN EST_NET_SALES_COST <> 0 THEN EST_OB_FREIGHT_COST / EST_NET_SALES_COST \n                        ELSE 0 \n                    END EST_OB_FREIGHT_PCT \n                FROM\n                    MA_OB_FREIGHT_CTRL \n                WHERE\n                    FISCAL_MO BETWEEN (SELECT\n                        MAX(FISCAL_MO) - 99 \n                    FROM\n                        MA_OB_FREIGHT_CTRL \n                    WHERE\n                        ACT_NET_SALES_COST IS NOT NULL) AND (\n                        SELECT\n                            MAX(FISCAL_MO) \n                        FROM\n                            MA_OB_FREIGHT_CTRL \n                        WHERE\n                            ACT_NET_SALES_COST IS NOT NULL\n                    )\n                ) WR \n            WHERE\n                MOFC.FROM_LOCATION_ID IS NULL\"\"\")","df_11.createOrReplaceTempView(\"SQ_MA_OB_FREIGHT_CTRL_INS_11\")"]},"id":"SQ_MA_OB_FREIGHT_CTRL_INS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_MA_OB_FREIGHT_CTRL_INS","queries":["df_11=spark.sql(\"\"\"\n    SELECT\n        A.FROM_LOCATION_ID,\n        A.FISCAL_MO,\n        NVL(LR.EST_NET_SALES_COST,\n        WR.EST_NET_SALES_COST) R12_NET_SALES_COST,\n        NVL(LR.EST_OB_FREIGHT_COST,\n        WR.EST_OB_FREIGHT_COST) R12_OB_FREIGHT_COST,\n        NVL(LR.EST_OB_FREIGHT_PCT,\n        WR.EST_OB_FREIGHT_PCT) R12_OB_FREIGHT_PCT \n    FROM\n        (SELECT\n            DISTINCT SC.FROM_LOCATION_ID,\n            D.FISCAL_MO \n        FROM\n            SUPPLY_CHAIN SC \n        JOIN\n            SITE_PROFILE SITE \n                ON SC.FROM_LOCATION_ID = SITE.LOCATION_ID CROSS \n        JOIN\n            (\n                SELECT\n                    DISTINCT FISCAL_MO \n                FROM\n                    DAYS D \n                WHERE\n                    DAY_DT = CURRENT_DATE - 1 \n                    AND FISCAL_MO > (\n                        SELECT\n                            MAX(FISCAL_MO) \n                        FROM\n                            MA_OB_FREIGHT_CTRL \n                        WHERE\n                            ACT_NET_SALES_COST IS NOT NULL\n                    )\n                ) D \n            WHERE\n                SITE.LOCATION_TYPE_ID IN (\n                    1, 3\n                )\n        ) A \n    LEFT JOIN\n        MA_OB_FREIGHT_CTRL MOFC \n            ON A.FROM_LOCATION_ID = MOFC.FROM_LOCATION_ID \n            AND A.FISCAL_MO = MOFC.FISCAL_MO \n    LEFT JOIN\n        (\n            SELECT\n                FROM_LOCATION_ID,\n                SUM(ACT_NET_SALES_COST) EST_NET_SALES_COST,\n                SUM(ACT_OB_FREIGHT_COST) EST_OB_FREIGHT_COST,\n                CASE \n                    WHEN EST_NET_SALES_COST <> 0 THEN EST_OB_FREIGHT_COST / EST_NET_SALES_COST \n                    ELSE 0 \n                END EST_OB_FREIGHT_PCT,\n                SUM(1) FISCAL_MO_CNT \n            FROM\n                MA_OB_FREIGHT_CTRL \n            WHERE\n                FISCAL_MO BETWEEN (SELECT\n                    MAX(FISCAL_MO) - 99 \n                FROM\n                    MA_OB_FREIGHT_CTRL \n                WHERE\n                    ACT_NET_SALES_COST IS NOT NULL) AND (\n                    SELECT\n                        MAX(FISCAL_MO) \n                    FROM\n                        MA_OB_FREIGHT_CTRL \n                    WHERE\n                        ACT_NET_SALES_COST IS NOT NULL\n                ) \n            GROUP BY\n                FROM_LOCATION_ID \n            HAVING\n                FISCAL_MO_CNT >= 3\n            ) LR \n                ON A.FROM_LOCATION_ID = LR.FROM_LOCATION_ID CROSS \n        JOIN\n            (\n                SELECT\n                    SUM(ACT_NET_SALES_COST) EST_NET_SALES_COST,\n                    SUM(ACT_OB_FREIGHT_COST) EST_OB_FREIGHT_COST,\n                    CASE \n                        WHEN EST_NET_SALES_COST <> 0 THEN EST_OB_FREIGHT_COST / EST_NET_SALES_COST \n                        ELSE 0 \n                    END EST_OB_FREIGHT_PCT \n                FROM\n                    MA_OB_FREIGHT_CTRL \n                WHERE\n                    FISCAL_MO BETWEEN (SELECT\n                        MAX(FISCAL_MO) - 99 \n                    FROM\n                        MA_OB_FREIGHT_CTRL \n                    WHERE\n                        ACT_NET_SALES_COST IS NOT NULL) AND (\n                        SELECT\n                            MAX(FISCAL_MO) \n                        FROM\n                            MA_OB_FREIGHT_CTRL \n                        WHERE\n                            ACT_NET_SALES_COST IS NOT NULL\n                    )\n                ) WR \n            WHERE\n                MOFC.FROM_LOCATION_ID IS NULL\"\"\")","df_11.createOrReplaceTempView(\"SQ_MA_OB_FREIGHT_CTRL_INS_11\")"]},"id":"SQ_MA_OB_FREIGHT_CTRL_INS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_INSERT","queries":["df_12=spark.sql(\"\"\"\n    SELECT\n        FROM_LOCATION_ID AS FROM_LOCATION_ID,\n        FISCAL_MO AS FISCAL_MO,\n        R12_NET_SALES_COST AS R12_NET_SALES_COST,\n        R12_OB_FREIGHT_COST AS R12_OB_FREIGHT_COST,\n        R12_OB_FREIGHT_PCT AS R12_OB_FREIGHT_PCT,\n        NULL AS ACT_NET_SALES_COST,\n        NULL AS ACT_OB_FREIGHT_COST,\n        NULL AS ACT_OB_FREIGHT_PCT,\n        current_timestamp AS UPDATE_TSTMP,\n        current_timestamp AS LOAD_TSTMP,\n        'I' AS INS_UPD_FLAG,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        SQ_MA_OB_FREIGHT_CTRL_INS_11\"\"\")","df_12.createOrReplaceTempView(\"EXP_INSERT_12\")"]},"id":"EXP_INSERT","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Custom Transformation","label":"UNI_OB_FREIGHT","queries":["df_13=spark.sql(\"\"\"SELECT ACT_NET_SALES_COST AS ACT_NET_SALES_COST,\nACT_OB_FREIGHT_COST AS ACT_OB_FREIGHT_COST,\nACT_OB_FREIGHT_PCT AS ACT_OB_FREIGHT_PCT,\nFISCAL_MO AS FISCAL_MO,\nFROM_LOCATION_ID AS FROM_LOCATION_ID,\nINS_UPD_FLAG AS INS_UPD_FLAG,\nLOAD_TSTMP AS LOAD_TSTMP,\nMonotonically_Increasing_Id AS Monotonically_Increasing_Id,\nR12_NET_SALES_COST AS R12_NET_SALES_COST,\nR12_OB_FREIGHT_COST AS R12_OB_FREIGHT_COST,\nR12_OB_FREIGHT_PCT AS R12_OB_FREIGHT_PCT,\nUPDATE_TSTMP AS UPDATE_TSTMP FROM EXP_INSERT_12 UNION ALL SELECT ACT_NET_SALES_COST AS ACT_NET_SALES_COST,\nACT_OB_FREIGHT_COST AS ACT_OB_FREIGHT_COST,\nACT_OB_FREIGHT_PCT AS ACT_OB_FREIGHT_PCT,\nFISCAL_MO AS FISCAL_MO,\nFROM_LOCATION_ID AS FROM_LOCATION_ID,\nINS_UPD_FLAG AS INS_UPD_FLAG,\nLOAD_TSTMP AS LOAD_TSTMP,\nMonotonically_Increasing_Id AS Monotonically_Increasing_Id,\nR12_NET_SALES_COST AS R12_NET_SALES_COST,\nR12_OB_FREIGHT_COST AS R12_OB_FREIGHT_COST,\nR12_OB_FREIGHT_PCT AS R12_OB_FREIGHT_PCT,\nUPDATE_TSTMP AS UPDATE_TSTMP FROM EXP_UPDATE_10\"\"\")","df_13.createOrReplaceTempView(\"UNI_OB_FREIGHT_13\")"]},"id":"UNI_OB_FREIGHT","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Custom Transformation","label":"UNI_OB_FREIGHT","queries":["df_13=spark.sql(\"\"\"SELECT ACT_NET_SALES_COST AS ACT_NET_SALES_COST,\nACT_OB_FREIGHT_COST AS ACT_OB_FREIGHT_COST,\nACT_OB_FREIGHT_PCT AS ACT_OB_FREIGHT_PCT,\nFISCAL_MO AS FISCAL_MO,\nFROM_LOCATION_ID AS FROM_LOCATION_ID,\nINS_UPD_FLAG AS INS_UPD_FLAG,\nLOAD_TSTMP AS LOAD_TSTMP,\nMonotonically_Increasing_Id AS Monotonically_Increasing_Id,\nR12_NET_SALES_COST AS R12_NET_SALES_COST,\nR12_OB_FREIGHT_COST AS R12_OB_FREIGHT_COST,\nR12_OB_FREIGHT_PCT AS R12_OB_FREIGHT_PCT,\nUPDATE_TSTMP AS UPDATE_TSTMP FROM EXP_INSERT_12 UNION ALL SELECT ACT_NET_SALES_COST AS ACT_NET_SALES_COST,\nACT_OB_FREIGHT_COST AS ACT_OB_FREIGHT_COST,\nACT_OB_FREIGHT_PCT AS ACT_OB_FREIGHT_PCT,\nFISCAL_MO AS FISCAL_MO,\nFROM_LOCATION_ID AS FROM_LOCATION_ID,\nINS_UPD_FLAG AS INS_UPD_FLAG,\nLOAD_TSTMP AS LOAD_TSTMP,\nMonotonically_Increasing_Id AS Monotonically_Increasing_Id,\nR12_NET_SALES_COST AS R12_NET_SALES_COST,\nR12_OB_FREIGHT_COST AS R12_OB_FREIGHT_COST,\nR12_OB_FREIGHT_PCT AS R12_OB_FREIGHT_PCT,\nUPDATE_TSTMP AS UPDATE_TSTMP FROM EXP_UPDATE_10\"\"\")","df_13.createOrReplaceTempView(\"UNI_OB_FREIGHT_13\")"]},"id":"UNI_OB_FREIGHT","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Update Strategy","label":"UPD_STRATEGY","queries":["df_14=spark.sql(\"\"\"\n    SELECT\n        FROM_LOCATION_ID AS FROM_LOCATION_ID,\n        FISCAL_MO AS FISCAL_MO,\n        R12_NET_SALES_COST AS R12_NET_SALES_COST,\n        R12_OB_FREIGHT_COST AS R12_OB_FREIGHT_COST,\n        R12_OB_FREIGHT_PCT AS R12_OB_FREIGHT_PCT,\n        ACT_NET_SALES_COST AS ACT_NET_SALES_COST,\n        ACT_OB_FREIGHT_COST AS ACT_OB_FREIGHT_COST,\n        ACT_OB_FREIGHT_PCT AS ACT_OB_FREIGHT_PCT,\n        UPDATE_TSTMP AS UPDATE_TSTMP,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        INS_UPD_FLAG AS INS_UPD_FLAG,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        UNI_OB_FREIGHT_13\"\"\")","df_14.createOrReplaceTempView(\"UPD_STRATEGY_14\")"]},"id":"UPD_STRATEGY","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"SITE_PROFILE","queries":["df_15=spark.sql(\"\"\"\n    SELECT\n        LOCATION_ID AS LOCATION_ID,\n        LOCATION_TYPE_ID AS LOCATION_TYPE_ID,\n        STORE_NBR AS STORE_NBR,\n        STORE_NAME AS STORE_NAME,\n        STORE_TYPE_ID AS STORE_TYPE_ID,\n        STORE_OPEN_CLOSE_FLAG AS STORE_OPEN_CLOSE_FLAG,\n        COMPANY_ID AS COMPANY_ID,\n        REGION_ID AS REGION_ID,\n        DISTRICT_ID AS DISTRICT_ID,\n        PRICE_ZONE_ID AS PRICE_ZONE_ID,\n        PRICE_AD_ZONE_ID AS PRICE_AD_ZONE_ID,\n        REPL_DC_NBR AS REPL_DC_NBR,\n        REPL_FISH_DC_NBR AS REPL_FISH_DC_NBR,\n        REPL_FWD_DC_NBR AS REPL_FWD_DC_NBR,\n        SQ_FEET_RETAIL AS SQ_FEET_RETAIL,\n        SQ_FEET_TOTAL AS SQ_FEET_TOTAL,\n        SITE_ADDRESS AS SITE_ADDRESS,\n        SITE_CITY AS SITE_CITY,\n        STATE_CD AS STATE_CD,\n        COUNTRY_CD AS COUNTRY_CD,\n        POSTAL_CD AS POSTAL_CD,\n        SITE_MAIN_TELE_NO AS SITE_MAIN_TELE_NO,\n        SITE_GROOM_TELE_NO AS SITE_GROOM_TELE_NO,\n        SITE_EMAIL_ADDRESS AS SITE_EMAIL_ADDRESS,\n        SITE_SALES_FLAG AS SITE_SALES_FLAG,\n        EQUINE_MERCH_ID AS EQUINE_MERCH_ID,\n        EQUINE_SITE_ID AS EQUINE_SITE_ID,\n        EQUINE_SITE_OPEN_DT AS EQUINE_SITE_OPEN_DT,\n        GEO_LATITUDE_NBR AS GEO_LATITUDE_NBR,\n        GEO_LONGITUDE_NBR AS GEO_LONGITUDE_NBR,\n        PETSMART_DMA_CD AS PETSMART_DMA_CD,\n        LOYALTY_PGM_TYPE_ID AS LOYALTY_PGM_TYPE_ID,\n        LOYALTY_PGM_STATUS_ID AS LOYALTY_PGM_STATUS_ID,\n        LOYALTY_PGM_START_DT AS LOYALTY_PGM_START_DT,\n        LOYALTY_PGM_CHANGE_DT AS LOYALTY_PGM_CHANGE_DT,\n        BP_COMPANY_NBR AS BP_COMPANY_NBR,\n        BP_GL_ACCT AS BP_GL_ACCT,\n        TP_LOC_FLAG AS TP_LOC_FLAG,\n        TP_ACTIVE_CNT AS TP_ACTIVE_CNT,\n        PROMO_LABEL_CD AS PROMO_LABEL_CD,\n        PARENT_LOCATION_ID AS PARENT_LOCATION_ID,\n        LOCATION_NBR AS LOCATION_NBR,\n        TIME_ZONE_ID AS TIME_ZONE_ID,\n        DELV_SERVICE_CLASS_ID AS DELV_SERVICE_CLASS_ID,\n        PICK_SERVICE_CLASS_ID AS PICK_SERVICE_CLASS_ID,\n        SITE_LOGIN_ID AS SITE_LOGIN_ID,\n        SITE_MANAGER_ID AS SITE_MANAGER_ID,\n        SITE_OPEN_YRS_AMT AS SITE_OPEN_YRS_AMT,\n        HOTEL_FLAG AS HOTEL_FLAG,\n        DAYCAMP_FLAG AS DAYCAMP_FLAG,\n        VET_FLAG AS VET_FLAG,\n        DIST_MGR_NAME AS DIST_MGR_NAME,\n        DIST_SVC_MGR_NAME AS DIST_SVC_MGR_NAME,\n        REGION_VP_NAME AS REGION_VP_NAME,\n        REGION_TRAINER_NAME AS REGION_TRAINER_NAME,\n        ASSET_PROTECT_NAME AS ASSET_PROTECT_NAME,\n        SITE_COUNTY AS SITE_COUNTY,\n        SITE_FAX_NO AS SITE_FAX_NO,\n        SFT_OPEN_DT AS SFT_OPEN_DT,\n        DM_EMAIL_ADDRESS AS DM_EMAIL_ADDRESS,\n        DSM_EMAIL_ADDRESS AS DSM_EMAIL_ADDRESS,\n        RVP_EMAIL_ADDRESS AS RVP_EMAIL_ADDRESS,\n        TRADE_AREA AS TRADE_AREA,\n        FDLPS_NAME AS FDLPS_NAME,\n        FDLPS_EMAIL AS FDLPS_EMAIL,\n        OVERSITE_MGR_NAME AS OVERSITE_MGR_NAME,\n        OVERSITE_MGR_EMAIL AS OVERSITE_MGR_EMAIL,\n        SAFETY_DIRECTOR_NAME AS SAFETY_DIRECTOR_NAME,\n        SAFETY_DIRECTOR_EMAIL AS SAFETY_DIRECTOR_EMAIL,\n        RETAIL_MANAGER_SAFETY_NAME AS RETAIL_MANAGER_SAFETY_NAME,\n        RETAIL_MANAGER_SAFETY_EMAIL AS RETAIL_MANAGER_SAFETY_EMAIL,\n        AREA_DIRECTOR_NAME AS AREA_DIRECTOR_NAME,\n        AREA_DIRECTOR_EMAIL AS AREA_DIRECTOR_EMAIL,\n        DC_GENERAL_MANAGER_NAME AS DC_GENERAL_MANAGER_NAME,\n        DC_GENERAL_MANAGER_EMAIL AS DC_GENERAL_MANAGER_EMAIL,\n        ASST_DC_GENERAL_MANAGER_NAME1 AS ASST_DC_GENERAL_MANAGER_NAME1,\n        ASST_DC_GENERAL_MANAGER_EMAIL1 AS ASST_DC_GENERAL_MANAGER_EMAIL1,\n        ASST_DC_GENERAL_MANAGER_NAME2 AS ASST_DC_GENERAL_MANAGER_NAME2,\n        ASST_DC_GENERAL_MANAGER_EMAIL2 AS ASST_DC_GENERAL_MANAGER_EMAIL2,\n        REGIONAL_DC_SAFETY_MGR_NAME AS REGIONAL_DC_SAFETY_MGR_NAME,\n        REGIONAL_DC_SAFETY_MGR_EMAIL AS REGIONAL_DC_SAFETY_MGR_EMAIL,\n        DC_PEOPLE_SUPERVISOR_NAME AS DC_PEOPLE_SUPERVISOR_NAME,\n        DC_PEOPLE_SUPERVISOR_EMAIL AS DC_PEOPLE_SUPERVISOR_EMAIL,\n        PEOPLE_MANAGER_NAME AS PEOPLE_MANAGER_NAME,\n        PEOPLE_MANAGER_EMAIL AS PEOPLE_MANAGER_EMAIL,\n        ASSET_PROT_DIR_NAME AS ASSET_PROT_DIR_NAME,\n        ASSET_PROT_DIR_EMAIL AS ASSET_PROT_DIR_EMAIL,\n        SR_REG_ASSET_PROT_MGR_NAME AS SR_REG_ASSET_PROT_MGR_NAME,\n        SR_REG_ASSET_PROT_MGR_EMAIL AS SR_REG_ASSET_PROT_MGR_EMAIL,\n        REG_ASSET_PROT_MGR_NAME AS REG_ASSET_PROT_MGR_NAME,\n        REG_ASSET_PROT_MGR_EMAIL AS REG_ASSET_PROT_MGR_EMAIL,\n        ASSET_PROTECT_EMAIL AS ASSET_PROTECT_EMAIL,\n        TP_START_DT AS TP_START_DT,\n        OPEN_DT AS OPEN_DT,\n        GR_OPEN_DT AS GR_OPEN_DT,\n        CLOSE_DT AS CLOSE_DT,\n        HOTEL_OPEN_DT AS HOTEL_OPEN_DT,\n        ADD_DT AS ADD_DT,\n        DELETE_DT AS DELETE_DT,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        SITE_PROFILE\"\"\")","df_15.createOrReplaceTempView(\"SITE_PROFILE_15\")"]},"id":"SITE_PROFILE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"GL_ACTUAL_DETAIL","queries":["df_16=spark.sql(\"\"\"\n    SELECT\n        FISCAL_YR AS FISCAL_YR,\n        FISCAL_MO AS FISCAL_MO,\n        GL_DOCUMENT_NBR AS GL_DOCUMENT_NBR,\n        GL_COMPANY_CD AS GL_COMPANY_CD,\n        GL_DOCUMENT_LINE_NBR AS GL_DOCUMENT_LINE_NBR,\n        FISCAL_WK AS FISCAL_WK,\n        WEEK_DT AS WEEK_DT,\n        GL_DOCUMENT_DT AS GL_DOCUMENT_DT,\n        GL_POSTING_DT AS GL_POSTING_DT,\n        GL_DOCUMENT_ENTRY_DT AS GL_DOCUMENT_ENTRY_DT,\n        GL_DOCUMENT_TYPE_CD AS GL_DOCUMENT_TYPE_CD,\n        GL_REF_DOCUMENT_NBR AS GL_REF_DOCUMENT_NBR,\n        GL_PROFIT_CENTER_GID AS GL_PROFIT_CENTER_GID,\n        LOCATION_ID AS LOCATION_ID,\n        STORE_NBR AS STORE_NBR,\n        GL_DEPARTMENT_CD AS GL_DEPARTMENT_CD,\n        GL_DEBIT_CREDIT_IND AS GL_DEBIT_CREDIT_IND,\n        GL_ACCOUNT_GID AS GL_ACCOUNT_GID,\n        GL_BALANCE_SHEET_IND AS GL_BALANCE_SHEET_IND,\n        GL_PL_SHEET_IND AS GL_PL_SHEET_IND,\n        GL_SPLIT_LINE_ITEM_IND AS GL_SPLIT_LINE_ITEM_IND,\n        GL_BUSINESS_TXN_TYPE_CD AS GL_BUSINESS_TXN_TYPE_CD,\n        GL_REF_TXN_TYPE_CD AS GL_REF_TXN_TYPE_CD,\n        GL_TXN_TYPE_CD AS GL_TXN_TYPE_CD,\n        GL_COST_ELEMENT_CD AS GL_COST_ELEMENT_CD,\n        GL_POSTING_KEY_GID AS GL_POSTING_KEY_GID,\n        GL_CONTROLLING_AREA AS GL_CONTROLLING_AREA,\n        GL_SEGMENT_CD AS GL_SEGMENT_CD,\n        GL_PARTNER_PROFIT_CENTER_GID AS GL_PARTNER_PROFIT_CENTER_GID,\n        GL_PARTNER_COMPANY_CD AS GL_PARTNER_COMPANY_CD,\n        GL_PARTNER_SEGMENT_CD AS GL_PARTNER_SEGMENT_CD,\n        VENDOR_ID AS VENDOR_ID,\n        GL_ITEM_CATEGORY_CD AS GL_ITEM_CATEGORY_CD,\n        GL_PURCH_DOC_NBR AS GL_PURCH_DOC_NBR,\n        GL_DOC_CURRENCY_ID AS GL_DOC_CURRENCY_ID,\n        GL_DOC_AMT AS GL_DOC_AMT,\n        GL_LOC_CURRENCY_ID AS GL_LOC_CURRENCY_ID,\n        GL_LOC_AMT AS GL_LOC_AMT,\n        GL_GRP_CURRENCY_ID AS GL_GRP_CURRENCY_ID,\n        GL_GRP_AMT AS GL_GRP_AMT,\n        GL_QTY AS GL_QTY,\n        GL_QTY_UOM_CD AS GL_QTY_UOM_CD,\n        EXCH_RATE_PCT AS EXCH_RATE_PCT,\n        GL_USER_NAME AS GL_USER_NAME,\n        GL_LOAD_TSTMP AS GL_LOAD_TSTMP,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        GL_ACTUAL_DETAIL\"\"\")","df_16.createOrReplaceTempView(\"GL_ACTUAL_DETAIL_16\")"]},"id":"GL_ACTUAL_DETAIL","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Target Definition","label":"MA_OB_FREIGHT_CTRL","queries":["spark.sql(\"\"\"INSERT INTO MA_OB_FREIGHT_CTRL SELECT FROM_LOCATION_ID AS FROM_LOCATION_ID,\nFISCAL_MO AS FISCAL_MO,\nR12_NET_SALES_COST AS R12_NET_SALES_COST,\nR12_OB_FREIGHT_COST AS R12_OB_FREIGHT_COST,\nR12_OB_FREIGHT_PCT AS R12_OB_FREIGHT_PCT,\nACT_NET_SALES_COST AS ACT_NET_SALES_COST,\nACT_OB_FREIGHT_COST AS ACT_OB_FREIGHT_COST,\nACT_OB_FREIGHT_PCT AS ACT_OB_FREIGHT_PCT,\nUPDATE_TSTMP AS UPDATE_TSTMP,\nLOAD_TSTMP AS LOAD_TSTMP FROM UPD_STRATEGY_14\"\"\")"]},"id":"MA_OB_FREIGHT_CTRL","position":{"x":0,"y":0},"type":"normalNode"}]}