{"Edges":[{"transformationType":"Source Definition","id":"e-0","source":"","target":"MA_SALES_TRANS_UPC"},{"transformationType":"Source Definition","id":"e-1","source":"","target":"SKU_PROFILE"},{"transformationType":"Source Qualifier","id":"e-2","source":"SKU_PROFILE","target":"SQ_Shortcut_to_MA_SALES_TRANS_UPC"},{"transformationType":"Source Qualifier","id":"e-3","source":"MA_SALES_TRANS_UPC","target":"SQ_Shortcut_to_MA_SALES_TRANS_UPC"},{"transformationType":"Custom Transformation","id":"e-4","source":"SQ_Shortcut_to_MA_SALES_TRANS_UPC","target":"SQL_INS_and_DUPS_CHECK"},{"transformationType":"Expression","id":"e-5","source":"SQL_INS_and_DUPS_CHECK","target":"EXP_GET_SESSION_INFO"},{"transformationType":"Aggregator","id":"e-6","source":"EXP_GET_SESSION_INFO","target":"AGG"},{"transformationType":"Expression","id":"e-7","source":"AGG","target":"EXP_CREATE_INS_SQL"},{"transformationType":"Custom Transformation","id":"e-8","source":"EXP_CREATE_INS_SQL","target":"SQL_INS_to_SQL_TRANSFORM_LOG"},{"transformationType":"Expression","id":"e-9","source":"SQL_INS_to_SQL_TRANSFORM_LOG","target":"EXP_ABORT_SESSION"},{"transformationType":"Target Definition","id":"e-10","source":"EXP_ABORT_SESSION","target":"SQL_TRANSFORM_DUMMY_TARGET"}],"Nodes":[{"data":{"transformationType":"Source Definition","label":"MA_SALES_TRANS_UPC","queries":["df_0=spark.sql(\"\"\"\n    SELECT\n        DAY_DT AS DAY_DT,\n        LOCATION_ID AS LOCATION_ID,\n        SALES_INSTANCE_ID AS SALES_INSTANCE_ID,\n        UPC_ID AS UPC_ID,\n        TP_INVOICE_NBR AS TP_INVOICE_NBR,\n        PARENT_UPC_ID AS PARENT_UPC_ID,\n        COMBO_TYPE_CD AS COMBO_TYPE_CD,\n        POS_TXN_SEQ_NBR AS POS_TXN_SEQ_NBR,\n        MA_EVENT_ID AS MA_EVENT_ID,\n        PRODUCT_ID AS PRODUCT_ID,\n        SALES_CUST_CAPTURE_CD AS SALES_CUST_CAPTURE_CD,\n        MA_SALES_AMT AS MA_SALES_AMT,\n        MA_SALES_QTY AS MA_SALES_QTY,\n        EXCH_RATE_PCT AS EXCH_RATE_PCT,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        MA_SALES_TRANS_UPC\"\"\")","df_0.createOrReplaceTempView(\"MA_SALES_TRANS_UPC_0\")"]},"id":"MA_SALES_TRANS_UPC","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"SKU_PROFILE","queries":["df_1=spark.sql(\"\"\"\n    SELECT\n        PRODUCT_ID AS PRODUCT_ID,\n        SKU_NBR AS SKU_NBR,\n        SKU_TYPE AS SKU_TYPE,\n        PRIMARY_UPC_ID AS PRIMARY_UPC_ID,\n        STATUS_ID AS STATUS_ID,\n        SUBS_HIST_FLAG AS SUBS_HIST_FLAG,\n        SUBS_CURR_FLAG AS SUBS_CURR_FLAG,\n        SKU_DESC AS SKU_DESC,\n        ALT_DESC AS ALT_DESC,\n        SAP_CATEGORY_ID AS SAP_CATEGORY_ID,\n        SAP_CLASS_ID AS SAP_CLASS_ID,\n        SAP_DEPT_ID AS SAP_DEPT_ID,\n        SAP_DIVISION_ID AS SAP_DIVISION_ID,\n        PRIMARY_VENDOR_ID AS PRIMARY_VENDOR_ID,\n        PARENT_VENDOR_ID AS PARENT_VENDOR_ID,\n        COUNTRY_CD AS COUNTRY_CD,\n        IMPORT_FLAG AS IMPORT_FLAG,\n        HTS_CODE_ID AS HTS_CODE_ID,\n        CONTENTS AS CONTENTS,\n        CONTENTS_UNITS AS CONTENTS_UNITS,\n        WEIGHT_NET_AMT AS WEIGHT_NET_AMT,\n        WEIGHT_UOM_CD AS WEIGHT_UOM_CD,\n        SIZE_DESC AS SIZE_DESC,\n        BUM_QTY AS BUM_QTY,\n        UOM_CD AS UOM_CD,\n        UNIT_NUMERATOR AS UNIT_NUMERATOR,\n        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,\n        BUYER_ID AS BUYER_ID,\n        PURCH_GROUP_ID AS PURCH_GROUP_ID,\n        PURCH_COST_AMT AS PURCH_COST_AMT,\n        NAT_PRICE_US_AMT AS NAT_PRICE_US_AMT,\n        TAX_CLASS_ID AS TAX_CLASS_ID,\n        VALUATION_CLASS_CD AS VALUATION_CLASS_CD,\n        BRAND_CD AS BRAND_CD,\n        BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,\n        OWNBRAND_FLAG AS OWNBRAND_FLAG,\n        STATELINE_FLAG AS STATELINE_FLAG,\n        SIGN_TYPE_CD AS SIGN_TYPE_CD,\n        OLD_ARTICLE_NBR AS OLD_ARTICLE_NBR,\n        VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,\n        INIT_MKDN_DT AS INIT_MKDN_DT,\n        DISC_START_DT AS DISC_START_DT,\n        ADD_DT AS ADD_DT,\n        DELETE_DT AS DELETE_DT,\n        UPDATE_DT AS UPDATE_DT,\n        FIRST_SALE_DT AS FIRST_SALE_DT,\n        LAST_SALE_DT AS LAST_SALE_DT,\n        FIRST_INV_DT AS FIRST_INV_DT,\n        LAST_INV_DT AS LAST_INV_DT,\n        LOAD_DT AS LOAD_DT,\n        BASE_NBR AS BASE_NBR,\n        BP_COLOR_ID AS BP_COLOR_ID,\n        BP_SIZE_ID AS BP_SIZE_ID,\n        BP_BREED_ID AS BP_BREED_ID,\n        BP_ITEM_CONCATENATED AS BP_ITEM_CONCATENATED,\n        BP_AEROSOL_FLAG AS BP_AEROSOL_FLAG,\n        BP_HAZMAT_FLAG AS BP_HAZMAT_FLAG,\n        CANADIAN_HTS_CD AS CANADIAN_HTS_CD,\n        NAT_PRICE_CA_AMT AS NAT_PRICE_CA_AMT,\n        NAT_PRICE_PR_AMT AS NAT_PRICE_PR_AMT,\n        RTV_DEPT_CD AS RTV_DEPT_CD,\n        GL_ACCT_NBR AS GL_ACCT_NBR,\n        ARTICLE_CATEGORY_ID AS ARTICLE_CATEGORY_ID,\n        COMPONENT_FLAG AS COMPONENT_FLAG,\n        ZDISCO_SCHED_TYPE_ID AS ZDISCO_SCHED_TYPE_ID,\n        ZDISCO_MKDN_SCHED_ID AS ZDISCO_MKDN_SCHED_ID,\n        ZDISCO_PID_DT AS ZDISCO_PID_DT,\n        ZDISCO_START_DT AS ZDISCO_START_DT,\n        ZDISCO_INIT_MKDN_DT AS ZDISCO_INIT_MKDN_DT,\n        ZDISCO_DC_DT AS ZDISCO_DC_DT,\n        ZDISCO_STR_DT AS ZDISCO_STR_DT,\n        ZDISCO_STR_OWNRSHP_DT AS ZDISCO_STR_OWNRSHP_DT,\n        ZDISCO_STR_WRT_OFF_DT AS ZDISCO_STR_WRT_OFF_DT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        SKU_PROFILE\"\"\")","df_1.createOrReplaceTempView(\"SKU_PROFILE_1\")"]},"id":"SKU_PROFILE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_Shortcut_to_MA_SALES_TRANS_UPC","queries":["df_2=spark.sql(\"\"\"\n    SELECT\n        CURRENT_TIMESTAMP AS START_TSTMP,\n        'MA_SALES_TRANS_UPC' AS TABLE_NAME,\n        COUNT(*) AS BEGIN_ROW_CNT \n    FROM\n        MA_SALES_TRANS_UPC\"\"\")","df_2.createOrReplaceTempView(\"SQ_Shortcut_to_MA_SALES_TRANS_UPC_2\")"]},"id":"SQ_Shortcut_to_MA_SALES_TRANS_UPC","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_Shortcut_to_MA_SALES_TRANS_UPC","queries":["df_2=spark.sql(\"\"\"\n    SELECT\n        CURRENT_TIMESTAMP AS START_TSTMP,\n        'MA_SALES_TRANS_UPC' AS TABLE_NAME,\n        COUNT(*) AS BEGIN_ROW_CNT \n    FROM\n        MA_SALES_TRANS_UPC\"\"\")","df_2.createOrReplaceTempView(\"SQ_Shortcut_to_MA_SALES_TRANS_UPC_2\")"]},"id":"SQ_Shortcut_to_MA_SALES_TRANS_UPC","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Custom Transformation","label":"SQL_INS_and_DUPS_CHECK","queries":["df_3=spark.sql(\"\"\"\n    SELECT\n        BEGIN_ROW_CNT AS BEGIN_ROW_CNT,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id,\n        START_TSTMP AS START_TSTMP,\n        TABLE_NAME AS TABLE_NAME \n    FROM\n        SQ_Shortcut_to_MA_SALES_TRANS_UPC_2\"\"\")","df_3.createOrReplaceTempView(\"SQL_INS_and_DUPS_CHECK_3\")"]},"id":"SQL_INS_and_DUPS_CHECK","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_GET_SESSION_INFO","queries":["df_4=spark.sql(\"\"\"\n    SELECT\n        TO_CHAR(START_TSTMP_output,\n        'MM/DD/YYYY HH24:MI:SS') AS START_TSTMP,\n        TO_CHAR(current_timestamp,\n        'MM/DD/YYYY HH24:MI:SS') AS END_TSTMP,\n        $PMWorkflowName AS WORKFLOW_NAME,\n        $PMSessionName AS SESSION_NAME,\n        $PMMappingName AS MAPPING_NAME,\n        TABLE_NAME AS TABLE_NAME,\n        BEGIN_ROW_CNT AS BEGIN_ROW_CNT,\n        INSERT_ROW_CNT AS INSERT_ROW_CNT,\n        DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,\n        IFF(DUPLICATE_ROW_CNT > 0,\n        'There are duplicate records in the table',\n        SQLError) AS SQL_TRANSFORM_ERROR,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        SQL_INS_and_DUPS_CHECK_3\"\"\")","df_4.createOrReplaceTempView(\"EXP_GET_SESSION_INFO_4\")"]},"id":"EXP_GET_SESSION_INFO","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Aggregator","label":"AGG","queries":["df_5=spark.sql(\"\"\"\n    SELECT\n        START_TSTMP AS START_TSTMP,\n        MAX(i_END_TSTMP) AS END_TSTMP,\n        WORKFLOW_NAME AS WORKFLOW_NAME,\n        SESSION_NAME AS SESSION_NAME,\n        MAPPING_NAME AS MAPPING_NAME,\n        TABLE_NAME AS TABLE_NAME,\n        TO_CHAR(MAX(i_BEGIN_ROW_CNT)) AS BEGIN_ROW_CNT,\n        TO_CHAR(SUM(i_INSERT_ROW_CNT)) AS INSERT_ROW_CNT,\n        MAX(i_SQL_TRANSFORM_ERROR) AS SQL_TRANSFORM_ERROR,\n        TO_CHAR(SUM(i_DUPLICATE_ROW_CNT)) AS DUPLICATE_ROW_CNT \n    FROM\n        EXP_GET_SESSION_INFO_4 \n    GROUP BY\n        START_TSTMP,\n        WORKFLOW_NAME,\n        SESSION_NAME,\n        MAPPING_NAME,\n        TABLE_NAME\"\"\")","df_5.createOrReplaceTempView(\"AGG_5\")"]},"id":"AGG","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_CREATE_INS_SQL","queries":["df_6=spark.sql(\"\"\"\n    SELECT\n        START_TSTMP AS START_TSTMP,\n        END_TSTMP AS END_TSTMP,\n        WORKFLOW_NAME AS WORKFLOW_NAME,\n        SESSION_NAME AS SESSION_NAME,\n        MAPPING_NAME AS MAPPING_NAME,\n        TABLE_NAME AS TABLE_NAME,\n        BEGIN_ROW_CNT AS BEGIN_ROW_CNT,\n        INSERT_ROW_CNT AS INSERT_ROW_CNT,\n        DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,\n        SQL_TRANSFORM_ERROR AS SQL_TRANSFORM_ERROR,\n        'INSERT INTO SQL_TRANSFORM_LOG VALUES (TO_DATE(' || CHR(39) || START_TSTMP || CHR(39) || ',' || CHR(39) || 'MM/DD/YYYY HH24:MI:SS' || CHR(39) || '),TO_DATE(' || CHR(39) || END_TSTMP || CHR(39) || ',' || CHR(39) || 'MM/DD/YYYY HH24:MI:SS' || CHR(39) || '), ' || CHR(39) || WORKFLOW_NAME || CHR(39) || ', ' || CHR(39) || SESSION_NAME || CHR(39) || ', ' || CHR(39) || MAPPING_NAME || CHR(39) || ', ' || CHR(39) || TABLE_NAME || CHR(39) || ', ' || CHR(39) || BEGIN_ROW_CNT || CHR(39) || ', ' || CHR(39) || INSERT_ROW_CNT || CHR(39) || ', ' || CHR(39) || DUPLICATE_ROW_CNT || CHR(39) || ',  ' || CHR(39) || SQL_TRANSFORM_ERROR || CHR(39) || ')' AS INSERT_SQL,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        AGG_5\"\"\")","df_6.createOrReplaceTempView(\"EXP_CREATE_INS_SQL_6\")"]},"id":"EXP_CREATE_INS_SQL","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Custom Transformation","label":"SQL_INS_to_SQL_TRANSFORM_LOG","queries":["df_7=spark.sql(\"\"\"\n    SELECT\n        BEGIN_ROW_CNT AS BEGIN_ROW_CNT,\n        DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,\n        END_TSTMP AS END_TSTMP,\n        INSERT_ROW_CNT AS INSERT_ROW_CNT,\n        INSERT_SQL AS INSERT_SQL,\n        MAPPING_NAME AS MAPPING_NAME,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id,\n        SESSION_NAME AS SESSION_NAME,\n        SQL_TRANSFORM_ERROR AS SQL_TRANSFORM_ERROR,\n        START_TSTMP AS START_TSTMP,\n        TABLE_NAME AS TABLE_NAME,\n        WORKFLOW_NAME AS WORKFLOW_NAME \n    FROM\n        EXP_CREATE_INS_SQL_6\"\"\")","df_7.createOrReplaceTempView(\"SQL_INS_to_SQL_TRANSFORM_LOG_7\")"]},"id":"SQL_INS_to_SQL_TRANSFORM_LOG","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_ABORT_SESSION","queries":["df_8=spark.sql(\"\"\"\n    SELECT\n        DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,\n        SQL_TRANSFORM_ERROR AS SQL_TRANSFORM_ERROR,\n        IFF((CAST(DUPLICATE_ROW_CNT_output AS DECIMAL (38,\n        0))) > 0,\n        ABORT('There are duplicates rows in the table'),\n        IIF()) AS ABORT_SESSION,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        SQL_INS_to_SQL_TRANSFORM_LOG_7\"\"\")","df_8.createOrReplaceTempView(\"EXP_ABORT_SESSION_8\")"]},"id":"EXP_ABORT_SESSION","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Target Definition","label":"SQL_TRANSFORM_DUMMY_TARGET","queries":["spark.sql(\"\"\"INSERT INTO SQL_TRANSFORM_DUMMY_TARGET SELECT DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,\nSQL_TRANSFORM_ERROR AS SQL_TRANSFORM_ERROR,\nABORT_SESSION AS ABORT_SESSION FROM EXP_ABORT_SESSION_8\"\"\")"]},"id":"SQL_TRANSFORM_DUMMY_TARGET","position":{"x":0,"y":0},"type":"normalNode"}]}