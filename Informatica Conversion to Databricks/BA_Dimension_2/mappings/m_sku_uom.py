# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")


# COMMAND ----------

# DBTITLE 1, SKU_UOM_PRE_0

df_0=spark.sql("""
    SELECT
        SKU_NBR AS SKU_NBR,
        UOM_CD AS UOM_CD,
        DELETE_IND AS DELETE_IND,
        UOM_NUMERATOR AS UOM_NUMERATOR,
        UOM_DENOMINATOR AS UOM_DENOMINATOR,
        LENGTH_AMT AS LENGTH_AMT,
        WIDTH_AMT AS WIDTH_AMT,
        HEIGHT_AMT AS HEIGHT_AMT,
        DIMENSION_UNIT_DESC AS DIMENSION_UNIT_DESC,
        VOLUME_AMT AS VOLUME_AMT,
        VOLUME_UNIT_DESC AS VOLUME_UNIT_DESC,
        WEIGHT_GROSS_AMT AS WEIGHT_GROSS_AMT,
        WEIGHT_UNIT_DESC AS WEIGHT_UNIT_DESC,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        SKU_UOM_PRE""")

df_0.createOrReplaceTempView("SKU_UOM_PRE_0")

# COMMAND ----------

# DBTITLE 1, SKU_UOM_1

df_1=spark.sql("""
    SELECT
        PRODUCT_ID AS PRODUCT_ID,
        UOM_CD AS UOM_CD,
        UOM_NUMERATOR AS UOM_NUMERATOR,
        UOM_DENOMINATOR AS UOM_DENOMINATOR,
        LENGTH_AMT AS LENGTH_AMT,
        WIDTH_AMT AS WIDTH_AMT,
        HEIGHT_AMT AS HEIGHT_AMT,
        DIMENSION_UNIT_DESC AS DIMENSION_UNIT_DESC,
        VOLUME_AMT AS VOLUME_AMT,
        VOLUME_UOM_CD AS VOLUME_UOM_CD,
        WEIGHT_GROSS_AMT AS WEIGHT_GROSS_AMT,
        WEIGHT_UOM_CD AS WEIGHT_UOM_CD,
        WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
        SCM_VOLUME_UOM_CD AS SCM_VOLUME_UOM_CD,
        SCM_VOLUME_AMT AS SCM_VOLUME_AMT,
        SCM_WEIGHT_UOM_CD AS SCM_WEIGHT_UOM_CD,
        SCM_WEIGHT_NET_AMT AS SCM_WEIGHT_NET_AMT,
        DELETE_DT AS DELETE_DT,
        LOAD_DT AS LOAD_DT,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        SKU_UOM""")

df_1.createOrReplaceTempView("SKU_UOM_1")

# COMMAND ----------

# DBTITLE 1, SKU_PROFILE_2

df_2=spark.sql("""
    SELECT
        PRODUCT_ID AS PRODUCT_ID,
        SKU_NBR AS SKU_NBR,
        SKU_TYPE AS SKU_TYPE,
        PRIMARY_UPC_ID AS PRIMARY_UPC_ID,
        STATUS_ID AS STATUS_ID,
        SUBS_HIST_FLAG AS SUBS_HIST_FLAG,
        SUBS_CURR_FLAG AS SUBS_CURR_FLAG,
        SKU_DESC AS SKU_DESC,
        ALT_DESC AS ALT_DESC,
        SAP_CATEGORY_ID AS SAP_CATEGORY_ID,
        SAP_CLASS_ID AS SAP_CLASS_ID,
        SAP_DEPT_ID AS SAP_DEPT_ID,
        SAP_DIVISION_ID AS SAP_DIVISION_ID,
        PRIMARY_VENDOR_ID AS PRIMARY_VENDOR_ID,
        PARENT_VENDOR_ID AS PARENT_VENDOR_ID,
        COUNTRY_CD AS COUNTRY_CD,
        IMPORT_FLAG AS IMPORT_FLAG,
        HTS_CODE_ID AS HTS_CODE_ID,
        CONTENTS AS CONTENTS,
        CONTENTS_UNITS AS CONTENTS_UNITS,
        WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
        WEIGHT_UOM_CD AS WEIGHT_UOM_CD,
        SIZE_DESC AS SIZE_DESC,
        BUM_QTY AS BUM_QTY,
        UOM_CD AS UOM_CD,
        UNIT_NUMERATOR AS UNIT_NUMERATOR,
        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        BUYER_ID AS BUYER_ID,
        PURCH_GROUP_ID AS PURCH_GROUP_ID,
        PURCH_COST_AMT AS PURCH_COST_AMT,
        NAT_PRICE_US_AMT AS NAT_PRICE_US_AMT,
        TAX_CLASS_ID AS TAX_CLASS_ID,
        VALUATION_CLASS_CD AS VALUATION_CLASS_CD,
        BRAND_CD AS BRAND_CD,
        BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
        OWNBRAND_FLAG AS OWNBRAND_FLAG,
        STATELINE_FLAG AS STATELINE_FLAG,
        SIGN_TYPE_CD AS SIGN_TYPE_CD,
        OLD_ARTICLE_NBR AS OLD_ARTICLE_NBR,
        VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
        INIT_MKDN_DT AS INIT_MKDN_DT,
        DISC_START_DT AS DISC_START_DT,
        ADD_DT AS ADD_DT,
        DELETE_DT AS DELETE_DT,
        UPDATE_DT AS UPDATE_DT,
        FIRST_SALE_DT AS FIRST_SALE_DT,
        LAST_SALE_DT AS LAST_SALE_DT,
        FIRST_INV_DT AS FIRST_INV_DT,
        LAST_INV_DT AS LAST_INV_DT,
        LOAD_DT AS LOAD_DT,
        BASE_NBR AS BASE_NBR,
        BP_COLOR_ID AS BP_COLOR_ID,
        BP_SIZE_ID AS BP_SIZE_ID,
        BP_BREED_ID AS BP_BREED_ID,
        BP_ITEM_CONCATENATED AS BP_ITEM_CONCATENATED,
        BP_AEROSOL_FLAG AS BP_AEROSOL_FLAG,
        BP_HAZMAT_FLAG AS BP_HAZMAT_FLAG,
        CANADIAN_HTS_CD AS CANADIAN_HTS_CD,
        NAT_PRICE_CA_AMT AS NAT_PRICE_CA_AMT,
        NAT_PRICE_PR_AMT AS NAT_PRICE_PR_AMT,
        RTV_DEPT_CD AS RTV_DEPT_CD,
        GL_ACCT_NBR AS GL_ACCT_NBR,
        ARTICLE_CATEGORY_ID AS ARTICLE_CATEGORY_ID,
        COMPONENT_FLAG AS COMPONENT_FLAG,
        ZDISCO_SCHED_TYPE_ID AS ZDISCO_SCHED_TYPE_ID,
        ZDISCO_MKDN_SCHED_ID AS ZDISCO_MKDN_SCHED_ID,
        ZDISCO_PID_DT AS ZDISCO_PID_DT,
        ZDISCO_START_DT AS ZDISCO_START_DT,
        ZDISCO_INIT_MKDN_DT AS ZDISCO_INIT_MKDN_DT,
        ZDISCO_DC_DT AS ZDISCO_DC_DT,
        ZDISCO_STR_DT AS ZDISCO_STR_DT,
        ZDISCO_STR_OWNRSHP_DT AS ZDISCO_STR_OWNRSHP_DT,
        ZDISCO_STR_WRT_OFF_DT AS ZDISCO_STR_WRT_OFF_DT,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        SKU_PROFILE""")

df_2.createOrReplaceTempView("SKU_PROFILE_2")

# COMMAND ----------

# DBTITLE 1, ASQ_SHORTCUT_TO_SKU_UOM_PRE_3

df_3=spark.sql("""
    SELECT
        SKU_UOM_LOAD.PRODUCT_ID PRODUCT_ID,
        SKU_UOM.PRODUCT_ID PRODUCT_ID1,
        SKU_UOM_LOAD.UOM_CD UOM_CD,
        SKU_UOM_LOAD.UOM_NUMERATOR UOM_NUMERATOR,
        SKU_UOM_LOAD.UOM_DENOMINATOR UOM_DENOMINATOR,
        SKU_UOM_LOAD.LENGTH_AMT LENGTH_AMT,
        SKU_UOM_LOAD.WIDTH_AMT WIDTH_AMT,
        SKU_UOM_LOAD.HEIGHT_AMT HEIGHT_AMT,
        SKU_UOM_LOAD.DIMENSION_UNIT_DESC DIMENSION_UNIT_DESC,
        SKU_UOM_LOAD.VOLUME_AMT VOLUME_AMT,
        SKU_UOM_LOAD.VOLUME_UNIT_DESC VOLUME_UNIT_DESC,
        SKU_UOM_LOAD.WEIGHT_GROSS_AMT WEIGHT_GROSS_AMT,
        SKU_UOM_LOAD.WEIGHT_UNIT_DESC WEIGHT_UNIT_DESC,
        SKU_UOM_LOAD.WEIGHT_UOM_CD WEIGHT_UOM_CD,
        SKU_UOM_LOAD.WEIGHT_NET_AMT WEIGHT_NET_AMT,
        NVL(SKU_UOM.DELETE_DT,
        SKU_UOM_LOAD.DELETE_DT) DELETE_DT,
        NVL(SKU_UOM.LOAD_DT,
        CURRENT_DATE) LOAD_DT 
    FROM
        (SELECT
            SKU_PROFILE.PRODUCT_ID,
            SKU_UOM_PRE.UOM_CD UOM_CD,
            SKU_PROFILE.WEIGHT_UOM_CD WEIGHT_UOM_CD,
            SKU_UOM_PRE.UOM_NUMERATOR UOM_NUMERATOR,
            SKU_UOM_PRE.UOM_DENOMINATOR UOM_DENOMINATOR,
            SKU_UOM_PRE.LENGTH_AMT LENGTH_AMT,
            SKU_UOM_PRE.WIDTH_AMT WIDTH_AMT,
            SKU_UOM_PRE.HEIGHT_AMT HEIGHT_AMT,
            SKU_UOM_PRE.DIMENSION_UNIT_DESC DIMENSION_UNIT_DESC,
            SKU_UOM_PRE.VOLUME_AMT VOLUME_AMT,
            SKU_UOM_PRE.VOLUME_UNIT_DESC VOLUME_UNIT_DESC,
            SKU_UOM_PRE.WEIGHT_GROSS_AMT WEIGHT_GROSS_AMT,
            SKU_UOM_PRE.WEIGHT_UNIT_DESC WEIGHT_UNIT_DESC,
            SKU_PROFILE.WEIGHT_NET_AMT WEIGHT_NET_AMT,
            DECODE(SKU_UOM_PRE.DELETE_IND,
            'X',
            CURRENT_DATE,
            NULL) DELETE_DT 
        FROM
            SKU_UOM_PRE,
            SKU_PROFILE 
        WHERE
            SKU_UOM_PRE.SKU_NBR = SKU_PROFILE.SKU_NBR) SKU_UOM_LOAD 
    LEFT OUTER JOIN
        SKU_UOM 
            ON SKU_UOM_LOAD.PRODUCT_ID = SKU_UOM.PRODUCT_ID 
            AND SKU_UOM_LOAD.UOM_CD = SKU_UOM.UOM_CD""")

df_3.createOrReplaceTempView("ASQ_SHORTCUT_TO_SKU_UOM_PRE_3")

# COMMAND ----------

# DBTITLE 1, LKP_SKU_UOM_WEIGHT_UOM_4

df_4=spark.sql("""
    SELECT
        ASQ_SHORTCUT_TO_SKU_UOM_PRE_3.PROF_WEIGHT_UOM_CD AS in_UOM_CD,
        UOM_STD_CD AS UOM_STD_CD,
        NUMERATOR AS NUMERATOR,
        DENOMINATOR AS DENOMINATOR,
        ASQ_SHORTCUT_TO_SKU_UOM_PRE_3.Monotonically_Increasing_Id AS Monotonically_Increasing_Id 
    FROM
        (SELECT
            UOM_STANDARD.NUMERATOR AS NUMERATOR,
            UOM_STANDARD.DENOMINATOR AS DENOMINATOR,
            TRIM(UOM_STANDARD.UOM_STD_CD) AS UOM_STD_CD 
        FROM
            UOM_STANDARD) AS UOM_STANDARD 
    RIGHT OUTER JOIN
        ASQ_SHORTCUT_TO_SKU_UOM_PRE_3 
            ON UOM_STD_CD = ASQ_SHORTCUT_TO_SKU_UOM_PRE_3.PROF_WEIGHT_UOM_CD""")

df_4.createOrReplaceTempView("LKP_SKU_UOM_WEIGHT_UOM_4")

# COMMAND ----------

# DBTITLE 1, LKP_SKU_PROFILE_WEIGHT_UOM_5

df_5=spark.sql("""
    SELECT
        ASQ_SHORTCUT_TO_SKU_UOM_PRE_3.WEIGHT_UOM_CD AS in_UOM_CD,
        UOM_STD_CD AS UOM_STD_CD,
        NUMERATOR AS NUMERATOR,
        DENOMINATOR AS DENOMINATOR,
        ASQ_SHORTCUT_TO_SKU_UOM_PRE_3.Monotonically_Increasing_Id AS Monotonically_Increasing_Id 
    FROM
        (SELECT
            UOM_STANDARD.NUMERATOR AS NUMERATOR,
            UOM_STANDARD.DENOMINATOR AS DENOMINATOR,
            TRIM(UOM_STANDARD.UOM_STD_CD) AS UOM_STD_CD 
        FROM
            UOM_STANDARD) AS UOM_STANDARD 
    RIGHT OUTER JOIN
        ASQ_SHORTCUT_TO_SKU_UOM_PRE_3 
            ON UOM_STD_CD = ASQ_SHORTCUT_TO_SKU_UOM_PRE_3.WEIGHT_UOM_CD""")

df_5.createOrReplaceTempView("LKP_SKU_PROFILE_WEIGHT_UOM_5")

# COMMAND ----------

# DBTITLE 1, EXP_CONVERT_NET_WEIGHT_6

df_6=spark.sql("""
    SELECT
        ASQ_SHORTCUT_TO_SKU_UOM_PRE_3.PROF_WEIGHT_NET_AMT * (ASQ_SHORTCUT_TO_SKU_UOM_PRE_3.UOM_NUMERATOR / UNIT_DENOMINATOR) * (NUMERATOR / DENOMINATOR) * (DENOMINATOR / NUMERATOR) AS UOM_WEIGHT_NET_AMT,
        LKP_SKU_PROFILE_WEIGHT_UOM_5.Monotonically_Increasing_Id AS Monotonically_Increasing_Id 
    FROM
        LKP_SKU_PROFILE_WEIGHT_UOM_5 
    INNER JOIN
        ASQ_SHORTCUT_TO_SKU_UOM_PRE_3 
            ON LKP_SKU_PROFILE_WEIGHT_UOM_5.Monotonically_Increasing_Id = ASQ_SHORTCUT_TO_SKU_UOM_PRE_3.Monotonically_Increasing_Id 
    INNER JOIN
        LKP_SKU_UOM_WEIGHT_UOM_4 
            ON LKP_SKU_PROFILE_WEIGHT_UOM_5.Monotonically_Increasing_Id = LKP_SKU_UOM_WEIGHT_UOM_4.Monotonically_Increasing_Id""")

df_6.createOrReplaceTempView("EXP_CONVERT_NET_WEIGHT_6")

# COMMAND ----------

# DBTITLE 1, UPSERT_SKU_UOM_7

df_7=spark.sql("""
    SELECT
        PRODUCT_ID AS PRODUCT_ID,
        PRODUCT_ID1 AS PRODUCT_ID1,
        UOM_CD AS UOM_CD,
        UOM_NUMERATOR AS UOM_NUMERATOR,
        UNIT_DENOMINATOR AS UOM_DENOMINATOR,
        LENGTH_AMT AS LENGTH_AMT,
        WIDTH_AMT AS WIDTH_AMT,
        HEIGHT_AMT AS HEIGHT_AMT,
        DIMENSION_UNIT_DESC AS DIMENSION_UNIT_DESC,
        VOLUME_AMT AS VOLUME_AMT,
        VOLUME_UNIT_DESC AS VOLUME_UNIT_DESC,
        WEIGHT_GROSS_AMT AS WEIGHT_GROSS_AMT,
        PROF_WEIGHT_UOM_CD AS WEIGHT_UNIT_DESC,
        WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
        DELETE_DT AS DELETE_DT,
        LOAD_DT AS LOAD_DT,
        Monotonically_Increasing_Id AS Monotonically_Increasing_Id 
    FROM
        ASQ_SHORTCUT_TO_SKU_UOM_PRE_3""")

df_7.createOrReplaceTempView("UPSERT_SKU_UOM_7")

df_7=spark.sql("""
    SELECT
        PRODUCT_ID AS PRODUCT_ID,
        PRODUCT_ID1 AS PRODUCT_ID1,
        UOM_CD AS UOM_CD,
        UOM_NUMERATOR AS UOM_NUMERATOR,
        UNIT_DENOMINATOR AS UOM_DENOMINATOR,
        LENGTH_AMT AS LENGTH_AMT,
        WIDTH_AMT AS WIDTH_AMT,
        HEIGHT_AMT AS HEIGHT_AMT,
        DIMENSION_UNIT_DESC AS DIMENSION_UNIT_DESC,
        VOLUME_AMT AS VOLUME_AMT,
        VOLUME_UNIT_DESC AS VOLUME_UNIT_DESC,
        WEIGHT_GROSS_AMT AS WEIGHT_GROSS_AMT,
        PROF_WEIGHT_UOM_CD AS WEIGHT_UNIT_DESC,
        WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
        DELETE_DT AS DELETE_DT,
        LOAD_DT AS LOAD_DT,
        Monotonically_Increasing_Id AS Monotonically_Increasing_Id 
    FROM
        EXP_CONVERT_NET_WEIGHT_6""")

df_7.createOrReplaceTempView("UPSERT_SKU_UOM_7")

# COMMAND ----------

# DBTITLE 1, SKU_UOM

spark.sql("""INSERT INTO SKU_UOM SELECT PRODUCT_ID AS PRODUCT_ID,
UOM_CD AS UOM_CD,
UOM_NUMERATOR AS UOM_NUMERATOR,
UOM_DENOMINATOR AS UOM_DENOMINATOR,
LENGTH_AMT AS LENGTH_AMT,
WIDTH_AMT AS WIDTH_AMT,
HEIGHT_AMT AS HEIGHT_AMT,
DIMENSION_UNIT_DESC AS DIMENSION_UNIT_DESC,
VOLUME_AMT AS VOLUME_AMT,
VOLUME_UNIT_DESC AS VOLUME_UOM_CD,
WEIGHT_GROSS_AMT AS WEIGHT_GROSS_AMT,
WEIGHT_UNIT_DESC AS WEIGHT_UOM_CD,
WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
SCM_VOLUME_UOM_CD AS SCM_VOLUME_UOM_CD,
SCM_VOLUME_AMT AS SCM_VOLUME_AMT,
SCM_WEIGHT_UOM_CD AS SCM_WEIGHT_UOM_CD,
SCM_WEIGHT_NET_AMT AS SCM_WEIGHT_NET_AMT,
DELETE_DT AS DELETE_DT,
LOAD_DT AS LOAD_DT FROM UPSERT_SKU_UOM_7""")
