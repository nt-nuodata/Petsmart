# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")


# COMMAND ----------
# DBTITLE 1, SKU_VENDOR_PRE_0


df_0=spark.sql("""
    SELECT
        SKU_NBR AS SKU_NBR,
        VENDOR_ID AS VENDOR_ID,
        VENDOR_SUBRANGE_CD AS VENDOR_SUBRANGE_CD,
        DELETE_IND AS DELETE_IND,
        UNIT_NUMERATOR AS UNIT_NUMERATOR,
        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        DELIV_EFF_DT AS DELIV_EFF_DT,
        DELIV_END_DT AS DELIV_END_DT,
        REGULAR_VENDOR_CD AS REGULAR_VENDOR_CD,
        COUNTRY_CD AS COUNTRY_CD,
        ROUNDING_PROFILE_CD AS ROUNDING_PROFILE_CD,
        VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        SKU_VENDOR_PRE""")

df_0.createOrReplaceTempView("SKU_VENDOR_PRE_0")

# COMMAND ----------
# DBTITLE 1, SKU_VENDOR_DAY_1


df_1=spark.sql("""
    SELECT
        SKU_NBR AS SKU_NBR,
        VENDOR_ID AS VENDOR_ID,
        VENDOR_SUBRANGE_CD AS VENDOR_SUBRANGE_CD,
        DELETE_IND AS DELETE_IND,
        UNIT_NUMERATOR AS UNIT_NUMERATOR,
        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        DELIV_EFF_DT AS DELIV_EFF_DT,
        DELIV_END_DT AS DELIV_END_DT,
        REGULAR_VENDOR_CD AS REGULAR_VENDOR_CD,
        ROUNDING_PROFILE_CD AS ROUNDING_PROFILE_CD,
        COUNTRY_CD AS COUNTRY_CD,
        VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
        LOAD_DT AS LOAD_DT,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        SKU_VENDOR_DAY""")

df_1.createOrReplaceTempView("SKU_VENDOR_DAY_1")

# COMMAND ----------
# DBTITLE 1, ASQ_SHPRTCUT_TO_SKU_VENDOR_PRE_2


df_2=spark.sql("""
    SELECT
        SVP.SKU_NBR AS SKU_NBR,
        SVP.VENDOR_ID AS VENDOR_ID,
        SVP.DELETE_IND AS DELETE_IND,
        SVP.UNIT_NUMERATOR AS UNIT_NUMERATOR,
        SVP.UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        SVP.DELIV_EFF_DT AS DELIV_EFF_DT,
        SVP.DELIV_END_DT AS DELIV_END_DT,
        SVP.REGULAR_VENDOR_CD AS REGULAR_VENDOR_CD,
        SVP.ROUNDING_PROFILE_CD AS ROUNDING_PROFILE_CD,
        SVP.COUNTRY_CD AS COUNTRY_CD,
        SVP.VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
        SVP.VENDOR_SUBRANGE_CD AS VENDOR_SUBRANGE_CD,
        CURRENT_TIMESTAMP,
        SVD.SKU_NBR AS OLD_SKU_NBR 
    FROM
        SKU_VENDOR_PRE SVP 
    LEFT OUTER JOIN
        SKU_VENDOR_DAY SVD 
            ON SVP.SKU_NBR = SVD.SKU_NBR 
            AND SVP.VENDOR_ID = SVD.VENDOR_ID""")

df_2.createOrReplaceTempView("ASQ_SHPRTCUT_TO_SKU_VENDOR_PRE_2")

# COMMAND ----------
# DBTITLE 1, UPD_SKU_VENDOR_DAY_3


df_3=spark.sql("""
    SELECT
        SKU_NBR AS SKU_NBR,
        VENDOR_ID AS VENDOR_ID,
        DELETE_IND AS DELETE_IND,
        UNIT_NUMERATOR AS UNIT_NUMERATOR,
        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        DELIV_EFF_DT AS DELIV_EFF_DT,
        DELIV_END_DT AS DELIV_END_DT,
        REGULAR_VENDOR_CD AS REGULAR_VENDOR_CD,
        COUNTRY_CD AS COUNTRY_CD,
        ROUNDING_PROFILE_CD AS ROUNDING_PROFILE_CD,
        VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
        LOAD_DT AS LOAD_DT,
        OLD_SKU_NBR AS OLD_SKU_NBR,
        VENDOR_SUBRANGE_CD AS VENDOR_SUBRANGE_CD,
        Monotonically_Increasing_Id AS Monotonically_Increasing_Id 
    FROM
        ASQ_SHPRTCUT_TO_SKU_VENDOR_PRE_2""")

df_3.createOrReplaceTempView("UPD_SKU_VENDOR_DAY_3")

# COMMAND ----------
# DBTITLE 1, SKU_VENDOR_DAY


spark.sql("""INSERT INTO SKU_VENDOR_DAY SELECT SKU_NBR AS SKU_NBR,
VENDOR_ID AS VENDOR_ID,
VENDOR_SUBRANGE_CD AS VENDOR_SUBRANGE_CD,
DELETE_IND AS DELETE_IND,
UNIT_NUMERATOR AS UNIT_NUMERATOR,
UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
DELIV_EFF_DT AS DELIV_EFF_DT,
DELIV_END_DT AS DELIV_END_DT,
REGULAR_VENDOR_CD AS REGULAR_VENDOR_CD,
ROUNDING_PROFILE_CD AS ROUNDING_PROFILE_CD,
COUNTRY_CD AS COUNTRY_CD,
VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
LOAD_DT AS LOAD_DT FROM UPD_SKU_VENDOR_DAY_3""")