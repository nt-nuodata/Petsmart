# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")


# COMMAND ----------
# DBTITLE 1, NATIONAL_PRICE_DAY_0


df_0=spark.sql("""
    SELECT
        SKU_NBR AS SKU_NBR,
        SALES_ORG_CD AS SALES_ORG_CD,
        COND_TYPE_CD AS COND_TYPE_CD,
        COND_END_DT AS COND_END_DT,
        COND_EFF_DT AS COND_EFF_DT,
        COND_RECORD_NBR AS COND_RECORD_NBR,
        DELETE_IND AS DELETE_IND,
        PROMOTION_CD AS PROMOTION_CD,
        COND_AMT AS COND_AMT,
        COND_RT_UNIT AS COND_RT_UNIT,
        COND_PRICE_UNIT AS COND_PRICE_UNIT,
        COND_UNIT AS COND_UNIT,
        UNIT_NUMERATOR AS UNIT_NUMERATOR,
        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        PRICING_REASON_CD AS PRICING_REASON_CD,
        UPDATE_DT AS UPDATE_DT,
        LOAD_DT AS LOAD_DT,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        NATIONAL_PRICE_DAY""")

df_0.createOrReplaceTempView("NATIONAL_PRICE_DAY_0")

# COMMAND ----------
# DBTITLE 1, CURRENCY_DAY_1


df_1=spark.sql("""
    SELECT
        DAY_DT AS DAY_DT,
        CURRENCY_ID AS CURRENCY_ID,
        DATE_RATE_START AS DATE_RATE_START,
        CURRENCY_TYPE AS CURRENCY_TYPE,
        DATE_RATE_ENDED AS DATE_RATE_ENDED,
        EXCHANGE_RATE_PCNT AS EXCHANGE_RATE_PCNT,
        RATIO_TO AS RATIO_TO,
        RATIO_FROM AS RATIO_FROM,
        STORE_CTRY_ABBR AS STORE_CTRY_ABBR,
        CURRENCY_NBR AS CURRENCY_NBR,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        CURRENCY_DAY""")

df_1.createOrReplaceTempView("CURRENCY_DAY_1")

# COMMAND ----------
# DBTITLE 1, NATIONAL_COST_DAY_2


df_2=spark.sql("""
    SELECT
        SKU_NBR AS SKU_NBR,
        VENDOR_ID AS VENDOR_ID,
        PURCH_ORG_CD AS PURCH_ORG_CD,
        COND_TYPE_CD AS COND_TYPE_CD,
        PURCH_INFO_CD AS PURCH_INFO_CD,
        COND_END_DT AS COND_END_DT,
        DELETE_IND AS DELETE_IND,
        COND_EFF_DT AS COND_EFF_DT,
        COND_RECORD_NBR AS COND_RECORD_NBR,
        COND_AMT AS COND_AMT,
        PROMOTION_CD AS PROMOTION_CD,
        COND_RT_UNIT AS COND_RT_UNIT,
        COND_PRICE_UNIT AS COND_PRICE_UNIT,
        COND_UNIT AS COND_UNIT,
        UNIT_NUMERATOR AS UNIT_NUMERATOR,
        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        LOAD_DT AS LOAD_DT,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        NATIONAL_COST_DAY""")

df_2.createOrReplaceTempView("NATIONAL_COST_DAY_2")

# COMMAND ----------
# DBTITLE 1, ASQ_Shortcut_To_NATIONAL_COST_DAY_3


df_3=spark.sql("""
    SELECT
        S.PRODUCT_ID,
        CASE 
            WHEN MAX(PRICE.NAT_PRICE_US_AMT) > 0 THEN MAX(PRICE.NAT_PRICE_US_AMT) 
            WHEN MAX(PRICE.NAT_PRICE_PR_AMT) > 0 THEN MAX(PRICE.NAT_PRICE_PR_AMT) 
            WHEN MAX(PRICE.NAT_PRICE_CA_AMT) > 0 THEN MAX(PRICE.NAT_PRICE_CA_AMT) 
            ELSE MAX(NVL(S.NAT_PRICE_US_AMT,
            0)) 
        END AS NAT_PRICE_US_AMT,
        CASE 
            WHEN MAX(PRICE.NAT_PRICE_CA_AMT) > 0 THEN MAX(PRICE.NAT_PRICE_CA_AMT) 
            WHEN MAX(PRICE.NAT_PRICE_US_AMT) > 0 THEN MAX(PRICE.NAT_PRICE_US_AMT) 
            WHEN MAX(PRICE.NAT_PRICE_PR_AMT) > 0 THEN MAX(PRICE.NAT_PRICE_PR_AMT) 
            ELSE MAX(NVL(S.NAT_PRICE_CA_AMT,
            0)) 
        END AS NAT_PRICE_CA_AMT,
        CASE 
            WHEN MAX(PRICE.NAT_PRICE_PR_AMT) > 0 THEN MAX(PRICE.NAT_PRICE_PR_AMT) 
            WHEN MAX(PRICE.NAT_PRICE_US_AMT) > 0 THEN MAX(PRICE.NAT_PRICE_US_AMT) 
            WHEN MAX(PRICE.NAT_PRICE_CA_AMT) > 0 THEN MAX(PRICE.NAT_PRICE_CA_AMT) 
            ELSE MAX(NVL(S.NAT_PRICE_PR_AMT,
            0)) 
        END AS NAT_PRICE_PR_AMT,
        CASE 
            WHEN MAX(COST.PRI_VEND_IND) = 1 
            AND MAX(CASE 
                WHEN COST.PRI_VEND_IND = 1 THEN NVL(COST.PURCH_COST_AMT,
                0) 
                ELSE 0 
            END) <> 0 THEN MAX(CASE 
                WHEN COST.PRI_VEND_IND = 1 THEN NVL(COST.PURCH_COST_AMT,
                0) 
                ELSE 0 
            END) 
            WHEN MAX(NVL(COST.PURCH_COST_AMT,
            0)) <> 0 THEN MAX(NVL(COST.PURCH_COST_AMT,
            0)) 
            ELSE MAX(NVL(S.PURCH_COST_AMT,
            0)) 
        END AS PURCH_COST_AMT 
    FROM
        SKU_PROFILE S 
    LEFT OUTER JOIN
        (
            SELECT
                SKU_NBR,
                SALES_ORG_CD,
                MAX(COND_EFF_DT),
                MAX(COND_END_DT),
                CASE 
                    WHEN SALES_ORG_CD = 'US01' THEN MAX(COND_AMT) 
                    ELSE 0 
                END AS NAT_PRICE_US_AMT,
                CASE 
                    WHEN SALES_ORG_CD = 'PR01' THEN MAX(COND_AMT) 
                    ELSE 0 
                END AS NAT_PRICE_PR_AMT,
                CASE 
                    WHEN SALES_ORG_CD = 'CA01' THEN ROUND(MAX(COND_AMT * C.EXCHANGE_RATE_PCNT),
                    2) 
                    ELSE 0 
                END AS NAT_PRICE_CA_AMT 
            FROM
                NATIONAL_PRICE_DAY,
                (SELECT
                    EXCHANGE_RATE_PCNT 
                FROM
                    CURRENCY_DAY 
                WHERE
                    DAY_DT = CURRENT_DATE - 1) C 
            WHERE
                CURRENT_DATE - 1 BETWEEN COND_EFF_DT AND COND_END_DT 
                AND TRIM(DELETE_IND) <> 'X' 
                AND COND_TYPE_CD = 'VKP0' 
            GROUP BY
                SKU_NBR,
                SALES_ORG_CD,
                COND_AMT) PRICE 
                    ON S.SKU_NBR = PRICE.SKU_NBR 
            LEFT OUTER JOIN
                (
                    SELECT
                        DISTINCT NCD.SKU_NBR,
                        NCD.VENDOR_ID,
                        CASE 
                            WHEN SVD.PRIMARY_VENDOR_ID IS NOT NULL THEN 1 
                            ELSE 0 
                        END AS PRI_VEND_IND,
                        ROUND(CASE 
                            WHEN TRIM(NCD.COND_RT_UNIT) = 'USD' 
                            AND TRIM(COND_UNIT) = 'PC' 
                            AND NCD.COND_PRICE_UNIT = 1 THEN COND_AMT 
                            WHEN TRIM(NCD.COND_RT_UNIT) = 'CAD' 
                            AND TRIM(COND_UNIT) = 'PC' 
                            AND NCD.COND_PRICE_UNIT = 1 THEN COND_AMT * C.EXCHANGE_RATE_PCNT 
                            WHEN TRIM(NCD.COND_RT_UNIT) = 'CAD' THEN (NCD.COND_AMT / CAST((CASE 
                                WHEN NCD.COND_PRICE_UNIT = 0 THEN 1 
                                ELSE NCD.COND_PRICE_UNIT 
                            END) AS NUMERIC) / (CAST((CASE 
                                WHEN NCD.UNIT_NUMERATOR = 0 THEN 1 
                                ELSE NCD.UNIT_NUMERATOR 
                            END) AS NUMERIC) / CAST((CASE 
                                WHEN NCD.UNIT_DENOMINATOR = 0 THEN 1 
                                ELSE NCD.UNIT_DENOMINATOR 
                            END) AS NUMERIC)) / (CAST((CASE 
                                WHEN SVD.UNIT_NUMERATOR = 0 THEN 1 
                                ELSE SVD.UNIT_NUMERATOR 
                            END) AS NUMERIC) / CAST((CASE 
                                WHEN SVD.UNIT_DENOMINATOR = 0 THEN 1 
                                ELSE SVD.UNIT_DENOMINATOR 
                            END) AS NUMERIC)) * C.EXCHANGE_RATE_PCNT) 
                            ELSE (NCD.COND_AMT / CAST((CASE 
                                WHEN NCD.COND_PRICE_UNIT = 0 THEN 1 
                                ELSE NCD.COND_PRICE_UNIT 
                            END) AS NUMERIC) / (CAST((CASE 
                                WHEN NCD.UNIT_NUMERATOR = 0 THEN 1 
                                ELSE NCD.UNIT_NUMERATOR 
                            END) AS NUMERIC) / CAST((CASE 
                                WHEN NCD.UNIT_DENOMINATOR = 0 THEN 1 
                                ELSE NCD.UNIT_DENOMINATOR 
                            END) AS NUMERIC)) / (CAST((CASE 
                                WHEN SVD.UNIT_NUMERATOR = 0 THEN 1 
                                ELSE SVD.UNIT_NUMERATOR 
                            END) AS NUMERIC) / CAST((CASE 
                                WHEN SVD.UNIT_DENOMINATOR = 0 THEN 1 
                                ELSE SVD.UNIT_DENOMINATOR 
                            END) AS NUMERIC))) 
                        END,
                        2) AS PURCH_COST_AMT,
                        CASE 
                            WHEN NCD.COND_RT_UNIT = 'CAD' THEN 'CA' 
                            ELSE 'US' 
                        END AS STORE_CTRY_ABBR,
                        NCD.COND_TYPE_CD 
                    FROM
                        NATIONAL_COST_DAY NCD 
                    LEFT OUTER JOIN
                        SKU_PROFILE SVD 
                            ON NCD.SKU_NBR = SVD.SKU_NBR 
                            AND NCD.VENDOR_ID = SVD.PRIMARY_VENDOR_ID,
                        (SELECT
                            EXCHANGE_RATE_PCNT 
                        FROM
                            CURRENCY_DAY 
                        WHERE
                            DAY_DT = CURRENT_DATE - 1) C 
                    WHERE
                        NCD.VENDOR_ID < 900000 
                        AND (
                            CURRENT_TIMESTAMP - INTERVAL '1 days'
                        ) BETWEEN NCD.COND_EFF_DT AND NCD.COND_END_DT 
                        AND (
                            TRIM(NCD.DELETE_IND) = '' 
                            OR TRIM(NCD.DELETE_IND) IS NULL
                        )
                    ) COST 
                        ON S.SKU_NBR = COST.SKU_NBR 
                GROUP BY
                    S.PRODUCT_ID""")

df_3.createOrReplaceTempView("ASQ_Shortcut_To_NATIONAL_COST_DAY_3")

# COMMAND ----------
# DBTITLE 1, SKU_PROFILE_4


df_4=spark.sql("""
    SELECT
        PRODUCT_ID AS PRODUCT_ID,
        SKU_NBR AS SKU_NBR,
        SKU_TYPE AS SKU_TYPE,
        PRIMARY_UPC_ID AS PRIMARY_UPC_ID,
        STATUS_ID AS STATUS_ID,
        SUBS_HIST_FLAG AS SUBS_HIST_FLAG,
        SUBS_CURR_FLAG AS SUBS_CURR_FLAG,
        SKU_DESC AS SKU_DESC,
        ALT_DESC AS ALT_DESC,
        SAP_CATEGORY_ID AS SAP_CATEGORY_ID,
        SAP_CLASS_ID AS SAP_CLASS_ID,
        SAP_DEPT_ID AS SAP_DEPT_ID,
        SAP_DIVISION_ID AS SAP_DIVISION_ID,
        PRIMARY_VENDOR_ID AS PRIMARY_VENDOR_ID,
        PARENT_VENDOR_ID AS PARENT_VENDOR_ID,
        COUNTRY_CD AS COUNTRY_CD,
        IMPORT_FLAG AS IMPORT_FLAG,
        HTS_CODE_ID AS HTS_CODE_ID,
        CONTENTS AS CONTENTS,
        CONTENTS_UNITS AS CONTENTS_UNITS,
        WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
        WEIGHT_UOM_CD AS WEIGHT_UOM_CD,
        SIZE_DESC AS SIZE_DESC,
        BUM_QTY AS BUM_QTY,
        UOM_CD AS UOM_CD,
        UNIT_NUMERATOR AS UNIT_NUMERATOR,
        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        BUYER_ID AS BUYER_ID,
        PURCH_GROUP_ID AS PURCH_GROUP_ID,
        PURCH_COST_AMT AS PURCH_COST_AMT,
        NAT_PRICE_US_AMT AS NAT_PRICE_US_AMT,
        TAX_CLASS_ID AS TAX_CLASS_ID,
        VALUATION_CLASS_CD AS VALUATION_CLASS_CD,
        BRAND_CD AS BRAND_CD,
        BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
        OWNBRAND_FLAG AS OWNBRAND_FLAG,
        STATELINE_FLAG AS STATELINE_FLAG,
        SIGN_TYPE_CD AS SIGN_TYPE_CD,
        OLD_ARTICLE_NBR AS OLD_ARTICLE_NBR,
        VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
        INIT_MKDN_DT AS INIT_MKDN_DT,
        DISC_START_DT AS DISC_START_DT,
        ADD_DT AS ADD_DT,
        DELETE_DT AS DELETE_DT,
        UPDATE_DT AS UPDATE_DT,
        FIRST_SALE_DT AS FIRST_SALE_DT,
        LAST_SALE_DT AS LAST_SALE_DT,
        FIRST_INV_DT AS FIRST_INV_DT,
        LAST_INV_DT AS LAST_INV_DT,
        LOAD_DT AS LOAD_DT,
        BASE_NBR AS BASE_NBR,
        BP_COLOR_ID AS BP_COLOR_ID,
        BP_SIZE_ID AS BP_SIZE_ID,
        BP_BREED_ID AS BP_BREED_ID,
        BP_ITEM_CONCATENATED AS BP_ITEM_CONCATENATED,
        BP_AEROSOL_FLAG AS BP_AEROSOL_FLAG,
        BP_HAZMAT_FLAG AS BP_HAZMAT_FLAG,
        CANADIAN_HTS_CD AS CANADIAN_HTS_CD,
        NAT_PRICE_CA_AMT AS NAT_PRICE_CA_AMT,
        NAT_PRICE_PR_AMT AS NAT_PRICE_PR_AMT,
        RTV_DEPT_CD AS RTV_DEPT_CD,
        GL_ACCT_NBR AS GL_ACCT_NBR,
        ARTICLE_CATEGORY_ID AS ARTICLE_CATEGORY_ID,
        COMPONENT_FLAG AS COMPONENT_FLAG,
        ZDISCO_SCHED_TYPE_ID AS ZDISCO_SCHED_TYPE_ID,
        ZDISCO_MKDN_SCHED_ID AS ZDISCO_MKDN_SCHED_ID,
        ZDISCO_PID_DT AS ZDISCO_PID_DT,
        ZDISCO_START_DT AS ZDISCO_START_DT,
        ZDISCO_INIT_MKDN_DT AS ZDISCO_INIT_MKDN_DT,
        ZDISCO_DC_DT AS ZDISCO_DC_DT,
        ZDISCO_STR_DT AS ZDISCO_STR_DT,
        ZDISCO_STR_OWNRSHP_DT AS ZDISCO_STR_OWNRSHP_DT,
        ZDISCO_STR_WRT_OFF_DT AS ZDISCO_STR_WRT_OFF_DT,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        SKU_PROFILE""")

df_4.createOrReplaceTempView("SKU_PROFILE_4")

# COMMAND ----------
# DBTITLE 1, SKU_PROFILE


spark.sql("""INSERT INTO SKU_PROFILE SELECT PRODUCT_ID AS PRODUCT_ID,
SKU_NBR AS SKU_NBR,
SKU_TYPE AS SKU_TYPE,
PRIMARY_UPC_ID AS PRIMARY_UPC_ID,
STATUS_ID AS STATUS_ID,
SUBS_HIST_FLAG AS SUBS_HIST_FLAG,
SUBS_CURR_FLAG AS SUBS_CURR_FLAG,
SKU_DESC AS SKU_DESC,
ALT_DESC AS ALT_DESC,
SAP_CATEGORY_ID AS SAP_CATEGORY_ID,
SAP_CLASS_ID AS SAP_CLASS_ID,
SAP_DEPT_ID AS SAP_DEPT_ID,
SAP_DIVISION_ID AS SAP_DIVISION_ID,
PRIMARY_VENDOR_ID AS PRIMARY_VENDOR_ID,
PARENT_VENDOR_ID AS PARENT_VENDOR_ID,
COUNTRY_CD AS COUNTRY_CD,
IMPORT_FLAG AS IMPORT_FLAG,
HTS_CODE_ID AS HTS_CODE_ID,
CONTENTS AS CONTENTS,
CONTENTS_UNITS AS CONTENTS_UNITS,
WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
WEIGHT_UOM_CD AS WEIGHT_UOM_CD,
SIZE_DESC AS SIZE_DESC,
BUM_QTY AS BUM_QTY,
UOM_CD AS UOM_CD,
UNIT_NUMERATOR AS UNIT_NUMERATOR,
UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
BUYER_ID AS BUYER_ID,
PURCH_GROUP_ID AS PURCH_GROUP_ID,
PURCH_COST_AMT AS PURCH_COST_AMT,
NAT_PRICE_US_AMT AS NAT_PRICE_US_AMT,
TAX_CLASS_ID AS TAX_CLASS_ID,
VALUATION_CLASS_CD AS VALUATION_CLASS_CD,
BRAND_CD AS BRAND_CD,
BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
OWNBRAND_FLAG AS OWNBRAND_FLAG,
STATELINE_FLAG AS STATELINE_FLAG,
SIGN_TYPE_CD AS SIGN_TYPE_CD,
OLD_ARTICLE_NBR AS OLD_ARTICLE_NBR,
VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
INIT_MKDN_DT AS INIT_MKDN_DT,
DISC_START_DT AS DISC_START_DT,
ADD_DT AS ADD_DT,
DELETE_DT AS DELETE_DT,
UPDATE_DT AS UPDATE_DT,
FIRST_SALE_DT AS FIRST_SALE_DT,
LAST_SALE_DT AS LAST_SALE_DT,
FIRST_INV_DT AS FIRST_INV_DT,
LAST_INV_DT AS LAST_INV_DT,
LOAD_DT AS LOAD_DT,
BASE_NBR AS BASE_NBR,
BP_COLOR_ID AS BP_COLOR_ID,
BP_SIZE_ID AS BP_SIZE_ID,
BP_BREED_ID AS BP_BREED_ID,
BP_ITEM_CONCATENATED AS BP_ITEM_CONCATENATED,
BP_AEROSOL_FLAG AS BP_AEROSOL_FLAG,
BP_HAZMAT_FLAG AS BP_HAZMAT_FLAG,
CANADIAN_HTS_CD AS CANADIAN_HTS_CD,
NAT_PRICE_CA_AMT AS NAT_PRICE_CA_AMT,
NAT_PRICE_PR_AMT AS NAT_PRICE_PR_AMT,
RTV_DEPT_CD AS RTV_DEPT_CD,
GL_ACCT_NBR AS GL_ACCT_NBR,
ARTICLE_CATEGORY_ID AS ARTICLE_CATEGORY_ID,
COMPONENT_FLAG AS COMPONENT_FLAG,
ZDISCO_SCHED_TYPE_ID AS ZDISCO_SCHED_TYPE_ID,
ZDISCO_MKDN_SCHED_ID AS ZDISCO_MKDN_SCHED_ID,
ZDISCO_PID_DT AS ZDISCO_PID_DT,
ZDISCO_START_DT AS ZDISCO_START_DT,
ZDISCO_INIT_MKDN_DT AS ZDISCO_INIT_MKDN_DT,
ZDISCO_DC_DT AS ZDISCO_DC_DT,
ZDISCO_STR_DT AS ZDISCO_STR_DT,
ZDISCO_STR_OWNRSHP_DT AS ZDISCO_STR_OWNRSHP_DT,
ZDISCO_STR_WRT_OFF_DT AS ZDISCO_STR_WRT_OFF_DT FROM ASQ_Shortcut_To_NATIONAL_COST_DAY_3""")

# COMMAND ----------
# DBTITLE 1, SKU_PROFILE_RPT


spark.sql("""INSERT INTO SKU_PROFILE_RPT SELECT PRODUCT_ID AS PRODUCT_ID,
SKU_NBR AS SKU_NBR,
SKU_TYPE AS SKU_TYPE,
PRIMARY_UPC_ID AS PRIMARY_UPC_ID,
STATUS_ID AS STATUS_ID,
STATUS_NAME AS STATUS_NAME,
SUBS_HIST_FLAG AS SUBS_HIST_FLAG,
SUBS_CURR_FLAG AS SUBS_CURR_FLAG,
SKU_DESC AS SKU_DESC,
ALT_DESC AS ALT_DESC,
SAP_CATEGORY_ID AS SAP_CATEGORY_ID,
SAP_CATEGORY_DESC AS SAP_CATEGORY_DESC,
GL_CATEGORY_CD AS GL_CATEGORY_CD,
GL_CATEGORY_DESC AS GL_CATEGORY_DESC,
BUS_UNIT_ID AS BUS_UNIT_ID,
BUS_UNIT_DESC AS BUS_UNIT_DESC,
SVP_ID AS SVP_ID,
SVP_DESC AS SVP_DESC,
VP_ID AS VP_ID,
VP_NM AS VP_NM,
VP_DESC AS VP_DESC,
CATEGORY_BUYER_ID AS CATEGORY_BUYER_ID,
CATEGORY_BUYER_NM AS CATEGORY_BUYER_NM,
CA_BUYER_ID AS CA_BUYER_ID,
CA_BUYER_NM AS CA_BUYER_NM,
DIRECTOR_ID AS DIRECTOR_ID,
DIRECTOR_NM AS DIRECTOR_DESC,
CA_DIRECTOR_ID AS CA_DIRECTOR_ID,
CA_DIRECTOR_NM AS CA_DIRECTOR_DESC,
PRICING_ROLE_ID AS PRICING_ROLE_ID,
PRICING_ROLE_DESC AS PRICING_ROLE_DESC,
SAP_CLASS_ID AS SAP_CLASS_ID,
SAP_CLASS_DESC AS SAP_CLASS_DESC,
SAP_DEPT_ID AS SAP_DEPT_ID,
SAP_DEPT_DESC AS SAP_DEPT_DESC,
CONSUM_ID AS CONSUM_ID,
CONSUM_DESC AS CONSUM_DESC,
SEGMENT_ID AS SEGMENT_ID,
SEGMENT_DESC AS SEGMENT_DESC,
SAP_DIVISION_ID AS SAP_DIVISION_ID,
SAP_DIVISION_DESC AS SAP_DIVISION_DESC,
PRIMARY_VENDOR_ID AS PRIMARY_VENDOR_ID,
PRIMARY_VENDOR_NAME AS PRIMARY_VENDOR_NAME,
VENDOR_SUBRANGE_CD AS VENDOR_SUBRANGE_CD,
PURCH_GROUP_ID AS PURCH_GROUP_ID,
PURCH_GROUP_NAME AS PURCH_GROUP_NAME,
PARENT_VENDOR_ID AS PARENT_VENDOR_ID,
PARENT_VENDOR_NAME AS PARENT_VENDOR_NAME,
COUNTRY_CD AS COUNTRY_CD,
COUNTRY_NAME AS COUNTRY_NAME,
IMPORT_FLAG AS IMPORT_FLAG,
IMPORT_DESC AS IMPORT_DESC,
HTS_CODE_ID AS HTS_CODE_ID,
HTS_CODE_DESC AS HTS_CODE_DESC,
CONTENTS AS CONTENTS,
CONTENTS_UNITS AS CONTENTS_UNITS,
WEIGHT_NET_AMT AS WEIGHT_NET_AMT,
WEIGHT_UOM_CD AS WEIGHT_UOM_CD,
SIZE_DESC AS SIZE_DESC,
BUM_QTY AS BUM_QTY,
UOM_CD AS UOM_CD,
UNIT_NUMERATOR AS UNIT_NUMERATOR,
UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
BUYER_ID AS BUYER_ID,
BUYER_NAME AS BUYER_NAME,
PURCH_COST_AMT AS PURCH_COST_AMT,
NAT_PRICE_US_AMT AS NAT_PRICE_US_AMT,
TAX_CLASS_ID AS TAX_CLASS_ID,
TAX_CLASS_DESC AS TAX_CLASS_DESC,
VALUATION_CLASS_CD AS VALUATION_CLASS_CD,
VALUATION_CLASS_DESC AS VALUATION_CLASS_DESC,
BRAND_CD AS BRAND_CD,
BRAND_NAME AS BRAND_NAME,
BRAND_CLASSIFICATION_ID AS BRAND_CLASSIFICATION_ID,
BRAND_CLASSIFICATION_NAME AS BRAND_CLASSIFICATION_NAME,
OWNBRAND_FLAG AS OWNBRAND_FLAG,
OWNBRAND_DESC AS OWNBRAND_DESC,
STATELINE_FLAG AS STATELINE_FLAG,
SIGN_TYPE_CD AS SIGN_TYPE_CD,
SIGN_TYPE_DESC AS SIGN_TYPE_DESC,
OLD_ARTICLE_NBR AS OLD_ARTICLE_NBR,
VENDOR_ARTICLE_NBR AS VENDOR_ARTICLE_NBR,
INIT_MKDN_DT AS INIT_MKDN_DT,
DISC_START_DT AS DISC_START_DT,
ADD_DT AS ADD_DT,
DELETE_DT AS DELETE_DT,
FIRST_SALE_DT AS FIRST_SALE_DT,
LAST_SALE_DT AS LAST_SALE_DT,
FIRST_INV_DT AS FIRST_INV_DT,
LAST_INV_DT AS LAST_INV_DT,
BASE_NBR AS BASE_NBR,
BP_COLOR_ID AS BP_COLOR_ID,
BP_SIZE_ID AS BP_SIZE_ID,
BP_BREED_ID AS BP_BREED_ID,
BP_ITEM_CONCATENATED AS BP_ITEM_CONCATENATED,
CANADIAN_HTS_CD AS CANADIAN_HTS_CD,
NAT_PRICE_CA_AMT AS NAT_PRICE_CA_AMT,
NAT_PRICE_PR_AMT AS NAT_PRICE_PR_AMT,
RTV_DEPT_CD AS RTV_DEPT_CD,
RTV_DESC AS RTV_DESC,
HAZ_FLAG AS HAZ_FLAG,
AEROSOL_FLAG AS AEROSOL_FLAG,
GL_ACCT_NBR AS GL_ACCT_NBR,
ARTICLE_CATEGORY_ID AS ARTICLE_CATEGORY_ID,
ARTICLE_CATEGORY_DESC AS ARTICLE_CATEGORY_DESC,
ARTICLE_CATEGORY_CD AS ARTICLE_CATEGORY_CD,
COMPONENT_FLAG AS COMPONENT_FLAG,
ZDISCO_SCHED_TYPE_ID AS ZDISCO_SCHED_TYPE_ID,
ZDISCO_SCHED_TYPE_DESC AS ZDISCO_SCHED_TYPE_DESC,
ZDISCO_MKDN_SCHED_ID AS ZDISCO_MKDN_SCHED_ID,
ZDISCO_MKDN_SCHED_DESC AS ZDISCO_MKDN_SCHED_DESC,
ZDISCO_PID_DT AS ZDISCO_PID_DT,
ZDISCO_START_DT AS ZDISCO_START_DT,
ZDISCO_INIT_MKDN_DT AS ZDISCO_INIT_MKDN_DT,
ZDISCO_DC_DT AS ZDISCO_DC_DT,
ZDISCO_STR_DT AS ZDISCO_STR_DT,
ZDISCO_STR_OWNRSHP_DT AS ZDISCO_STR_OWNRSHP_DT,
ZDISCO_STR_WRT_OFF_DT AS ZDISCO_STR_WRT_OFF_DT,
SAP_DEMAND_GROUP AS OPT_DEMAND_GROUP,
SAP_PRODUCT_LINE AS OPT_PRODUCT_LINE,
SAP_PRICE_FAMILY AS OPT_PRICE_FAMILY,
EFFECTIVE_SIZE AS OPT_EFFECTIVE_SIZE,
SELL_UNITS AS OPT_SELL_UNITS,
UNIT_PRICE AS OPT_UNIT_PRICE,
PRICE AS OPT_MOD_PRICE,
COST AS OPT_MOD_COST,
IS_NEW AS OPT_IS_NEW,
ERROR_CODE AS OPT_ERROR_CODE,
RELATIONSHIP AS OPT_RELATIONSHIP,
METRIC AS OPT_METRIC,
DIFF AS OPT_DIFF,
ASSOC_PROD AS OPT_ASSOC_PROD,
DELETE_OPTION AS OPT_DELETE_OPTION,
DISC_SKU_NBR AS DISC_SKU_NBR,
AVG_SALES AS AVG_SALES,
COPY_SKU_NBR AS COPY_SKU_NBR,
COPY_SKU_PCT AS COPY_SKU_PCT,
PROCUREMENT_RULE_CD AS PROCUREMENT_RULE_CD,
PROCUREMENT_RULE_DESC AS PROCUREMENT_RULE_DESC,
CATEGORY_ANALYST_ID AS CATEGORY_ANALYST_ID,
CATEGORY_ANALYST_NM AS CATEGORY_ANALYST_NM,
CATEGORY_REPLENISHMENT_MGR_ID AS CATEGORY_REPLENISHMENT_MGR_ID,
CATEGORY_REPLENISHMENT_MGR_NM AS CATEGORY_REPLENISHMENT_MGR_NM,
CREATED_BY AS CREATED_BY,
SHELF_LIFE_REM_CNT AS SHELF_LIFE_REM_CNT,
TEMP_SKU AS TEMP_SKU,
CONTENTS_METRIC_AMT AS CONTENTS_METRICS,
CONTENTS_UNITS_METRIC_CD AS CONTENTS_UNITS_METRICS,
FLAVOR_CD AS FLAVOR_CD,
FLAVOR_DESC AS FLAVOR_DESC,
MATERIAL AS BASIC_MATERIAL,
PACKAGING_CD AS CONTAINER_CD,
PACKAGING_DEC AS CONTAINER_DESC,
RX_FLAG AS RX_FLAG,
UPDATE_DT AS UPDATE_DT,
LOAD_DT AS LOAD_DT FROM ASQ_Shortcut_To_NATIONAL_COST_DAY_3""")