# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")


# COMMAND ----------

# DBTITLE 1, SKU_STORE_PRICE_PRE_0

df_0=spark.sql("""
    SELECT
        SKU_NBR AS SKU_NBR,
        STORE_NBR AS STORE_NBR,
        SALES_ORG_CD AS SALES_ORG_CD,
        COND_TYPE_CD AS COND_TYPE_CD,
        COND_END_DT AS COND_END_DT,
        COND_EFF_DT AS COND_EFF_DT,
        COND_RECORD_NBR AS COND_RECORD_NBR,
        DELETE_IND AS DELETE_IND,
        PROMOTION_CD AS PROMOTION_CD,
        COND_AMT AS COND_AMT,
        COND_RT_UNIT AS COND_RT_UNIT,
        COND_PRICE_UNIT AS COND_PRICE_UNIT,
        COND_UNIT AS COND_UNIT,
        UNIT_NUMERATOR AS UNIT_NUMERATOR,
        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        PRICING_REASON_CD AS PRICING_REASON_CD,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        SKU_STORE_PRICE_PRE""")

df_0.createOrReplaceTempView("SKU_STORE_PRICE_PRE_0")

# COMMAND ----------

# DBTITLE 1, SKU_STORE_PRICE_DAY_1

df_1=spark.sql("""
    SELECT
        SKU_NBR AS SKU_NBR,
        STORE_NBR AS STORE_NBR,
        SALES_ORG_CD AS SALES_ORG_CD,
        COND_TYPE_CD AS COND_TYPE_CD,
        COND_END_DT AS COND_END_DT,
        COND_EFF_DT AS COND_EFF_DT,
        COND_RECORD_NBR AS COND_RECORD_NBR,
        DELETE_IND AS DELETE_IND,
        PROMOTION_CD AS PROMOTION_CD,
        COND_AMT AS COND_AMT,
        COND_RT_UNIT AS COND_RT_UNIT,
        COND_PRICE_UNIT AS COND_PRICE_UNIT,
        COND_UNIT AS COND_UNIT,
        UNIT_NUMERATOR AS UNIT_NUMERATOR,
        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        PRICING_REASON_CD AS PRICING_REASON_CD,
        UPDATE_DT AS UPDATE_DT,
        LOAD_DT AS LOAD_DT,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        SKU_STORE_PRICE_DAY""")

df_1.createOrReplaceTempView("SKU_STORE_PRICE_DAY_1")

# COMMAND ----------

# DBTITLE 1, ASQ_SHORTCUT_TO_SKU_STORE_PRICE_PRE_2

df_2=spark.sql("""
    SELECT
        SP.SKU_NBR,
        SP.STORE_NBR,
        SP.SALES_ORG_CD,
        SP.COND_TYPE_CD,
        SP.COND_RECORD_NBR,
        SP.DELETE_IND,
        SP.COND_END_DT,
        SP.COND_EFF_DT,
        SP.COND_AMT,
        SP.PROMOTION_CD,
        SP.COND_RT_UNIT,
        SP.COND_PRICE_UNIT,
        SP.COND_UNIT,
        SP.UNIT_NUMERATOR,
        SP.UNIT_DENOMINATOR,
        SP.PRICING_REASON_CD,
        CURRENT_DATE AS UPDATE_DT,
        NVL(SD.LOAD_DT,
        CURRENT_DATE) AS LOAD_DT,
        CASE 
            WHEN SD.SKU_NBR IS NULL THEN 1 
            ELSE 2 
        END AS ROW_ACTION 
    FROM
        SKU_STORE_PRICE_PRE SP 
    LEFT OUTER JOIN
        SKU_STORE_PRICE_DAY SD 
            ON SP.SKU_NBR = SD.SKU_NBR 
            AND SP.STORE_NBR = SD.STORE_NBR 
            AND SP.SALES_ORG_CD = SD.SALES_ORG_CD 
            AND SP.COND_TYPE_CD = SD.COND_TYPE_CD 
            AND SP.COND_END_DT = SD.COND_END_DT""")

df_2.createOrReplaceTempView("ASQ_SHORTCUT_TO_SKU_STORE_PRICE_PRE_2")

# COMMAND ----------

# DBTITLE 1, UPDTRANS_3

df_3=spark.sql("""
    SELECT
        SKU_NBR AS SKU_NBR,
        STORE_NBR AS STORE_NBR,
        SALES_ORG_CD AS SALES_ORG_CD,
        COND_TYPE_CD AS COND_TYPE_CD,
        COND_RECORD_NBR AS COND_RECORD_NBR,
        COND_END_DT AS COND_END_DT,
        COND_EFF_DT AS COND_EFF_DT,
        DELETE_IND AS DELETE_IND,
        COND_AMT AS COND_AMT,
        PROMOTION_CD AS PROMOTION_CD,
        COND_RT_UNIT AS COND_RT_UNIT,
        COND_PRICE_UNIT AS COND_PRICE_UNIT,
        COND_UNIT AS COND_UNIT,
        UNIT_NUMERATOR AS UNIT_NUMERATOR,
        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        PRICING_REASON_CD AS PRICING_REASON_CD,
        UPDATE_DT AS UPDATE_DT,
        LOAD_DT AS LOAD_DT,
        ROW_ACTION AS ROWACTION,
        Monotonically_Increasing_Id AS Monotonically_Increasing_Id 
    FROM
        ASQ_SHORTCUT_TO_SKU_STORE_PRICE_PRE_2""")

df_3.createOrReplaceTempView("UPDTRANS_3")

# COMMAND ----------

# DBTITLE 1, SKU_STORE_PRICE_DAY

spark.sql("""INSERT INTO SKU_STORE_PRICE_DAY SELECT SKU_NBR AS SKU_NBR,
STORE_NBR AS STORE_NBR,
SALES_ORG_CD AS SALES_ORG_CD,
COND_TYPE_CD AS COND_TYPE_CD,
COND_END_DT AS COND_END_DT,
COND_EFF_DT AS COND_EFF_DT,
COND_RECORD_NBR AS COND_RECORD_NBR,
DELETE_IND AS DELETE_IND,
PROMOTION_CD AS PROMOTION_CD,
COND_AMT AS COND_AMT,
COND_RT_UNIT AS COND_RT_UNIT,
COND_PRICE_UNIT AS COND_PRICE_UNIT,
COND_UNIT AS COND_UNIT,
UNIT_NUMERATOR AS UNIT_NUMERATOR,
UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
PRICING_REASON_CD AS PRICING_REASON_CD,
UPDATE_DT AS UPDATE_DT,
LOAD_DT AS LOAD_DT FROM UPDTRANS_3""")
