# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")


# COMMAND ----------
# DBTITLE 1, ZTB_ART_LOC_SITE_0


df_0=spark.sql("""
    SELECT
        MANDT AS MANDT,
        ARTICLE AS ARTICLE,
        SITE AS SITE,
        POGID AS POGID,
        POGDBKEY AS POGDBKEY,
        EFFECTIVE_DT AS EFFECTIVE_DT,
        NUMPOS AS NUMPOS,
        NOF AS NOF,
        CAPACITY AS CAPACITY,
        PRES_QTY AS PRES_QTY,
        LAST_CHG_DATE AS LAST_CHG_DATE,
        LAST_CHG_TIME AS LAST_CHG_TIME,
        EFFECTIVE_ENDT AS EFFECTIVE_ENDT,
        POS_STATUS AS POS_STATUS,
        POG_TYPE AS POG_TYPE,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        ZTB_ART_LOC_SITE""")

df_0.createOrReplaceTempView("ZTB_ART_LOC_SITE_0")

# COMMAND ----------
# DBTITLE 1, EXP_Load_Tstmp_1


df_1=spark.sql("""SELECT ARTICLE AS ARTICLE,
SITE AS SITE,
POGID AS POGID,
POGDBKEY AS POGDBKEY,
EFFECTIVE_DT AS EFFECTIVE_DT,
NUMPOS AS NUMPOS,
NOF AS NOF,
CAPACITY AS CAPACITY,
PRES_QTY AS PRES_QTY,
LAST_CHG_DATE AS LAST_CHG_DATE,
LAST_CHG_TIME AS LAST_CHG_TIME,
EFFECTIVE_ENDT AS EFFECTIVE_ENDT,
POS_STATUS AS POS_STATUS,
POG_TYPE AS POG_TYPE,
SYSDATE AS LOAD_TSTMP,
Monotonically_Increasing_Id AS Monotonically_Increasing_Id FROM null""")

df_1.createOrReplaceTempView("EXP_Load_Tstmp_1")

# COMMAND ----------
# DBTITLE 1, ZTB_ART_LOC_SITE_PRE


spark.sql("""INSERT INTO ZTB_ART_LOC_SITE_PRE SELECT ARTICLE AS ARTICLE,
SITE AS SITE,
POGID AS POG_ID,
POGDBKEY AS POG_DBKEY,
EFFECTIVE_DT AS EFFECTIVE_DT,
EFFECTIVE_ENDT AS EFFECTIVE_ENDT,
NUMPOS AS NUMBER_OF_POSITIONS,
NOF AS NUMBER_OF_FACINGS,
CAPACITY AS CAPACITY,
PRES_QTY AS PRESENTATION_QUANTITY,
POS_STATUS AS POSITION_STATUS,
POG_TYPE AS POG_TYPE,
LAST_CHG_DATE AS LAST_CHG_DATE,
LAST_CHG_TIME AS LAST_CHG_TIME,
LOAD_TSTMP AS LOAD_TSTMP FROM EXP_Load_Tstmp_1""")