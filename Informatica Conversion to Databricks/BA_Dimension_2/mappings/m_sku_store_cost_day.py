# Databricks notebook source
# MAGIC %run "./udf_informatica"

# COMMAND ----------


from pyspark.sql.types import *

spark.sql("use DELTA_TRAINING")
spark.sql("set spark.sql.legacy.timeParserPolicy = LEGACY")


# COMMAND ----------
# DBTITLE 1, SKU_STORE_COST_DAY_0


df_0=spark.sql("""
    SELECT
        SKU_NBR AS SKU_NBR,
        STORE_NBR AS STORE_NBR,
        VENDOR_ID AS VENDOR_ID,
        PURCH_ORG_CD AS PURCH_ORG_CD,
        COND_TYPE_CD AS COND_TYPE_CD,
        PURCH_INFO_CD AS PURCH_INFO_CD,
        COND_END_DT AS COND_END_DT,
        DELETE_IND AS DELETE_IND,
        COND_EFF_DT AS COND_EFF_DT,
        COND_RECORD_NBR AS COND_RECORD_NBR,
        COND_AMT AS COND_AMT,
        PROMOTION_CD AS PROMOTION_CD,
        COND_RT_UNIT AS COND_RT_UNIT,
        COND_PRICE_UNIT AS COND_PRICE_UNIT,
        COND_UNIT AS COND_UNIT,
        UNIT_NUMERATOR AS UNIT_NUMERATOR,
        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        LOAD_DT AS LOAD_DT,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        SKU_STORE_COST_DAY""")

df_0.createOrReplaceTempView("SKU_STORE_COST_DAY_0")

# COMMAND ----------
# DBTITLE 1, SKU_STORE_COST_PRE_1


df_1=spark.sql("""
    SELECT
        SKU_NBR AS SKU_NBR,
        STORE_NBR AS STORE_NBR,
        VENDOR_ID AS VENDOR_ID,
        PURCH_ORG_CD AS PURCH_ORG_CD,
        COND_TYPE_CD AS COND_TYPE_CD,
        PURCH_INFO_CD AS PURCH_INFO_CD,
        COND_END_DT AS COND_END_DT,
        DELETE_IND AS DELETE_IND,
        COND_EFF_DT AS COND_EFF_DT,
        COND_RECORD_NBR AS COND_RECORD_NBR,
        COND_AMT AS COND_AMT,
        PROMOTION_CD AS PROMOTION_CD,
        COND_RT_UNIT AS COND_RT_UNIT,
        COND_PRICE_UNIT AS COND_PRICE_UNIT,
        COND_UNIT AS COND_UNIT,
        UNIT_NUMERATOR AS UNIT_NUMERATOR,
        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        LOAD_DT AS LOAD_DT,
        monotonically_increasing_id() AS Monotonically_Increasing_Id 
    FROM
        SKU_STORE_COST_PRE""")

df_1.createOrReplaceTempView("SKU_STORE_COST_PRE_1")

# COMMAND ----------
# DBTITLE 1, ASQ_SHORTCUT_TO_SKU_STORE_COST_PRE_2


df_2=spark.sql("""
    SELECT
        P.SKU_NBR,
        P.STORE_NBR,
        P.VENDOR_ID,
        P.PURCH_ORG_CD,
        P.COND_TYPE_CD,
        P.PURCH_INFO_CD,
        P.COND_END_DT,
        P.DELETE_IND,
        P.COND_EFF_DT,
        P.COND_RECORD_NBR,
        P.COND_AMT,
        P.PROMOTION_CD,
        P.COND_RT_UNIT,
        P.COND_PRICE_UNIT,
        P.COND_UNIT,
        P.UNIT_NUMERATOR,
        P.UNIT_DENOMINATOR,
        P.LOAD_DT,
        CASE 
            WHEN S.SKU_NBR IS NULL THEN 0 
            ELSE 1 
        END AS UPDATE_FLAG 
    FROM
        SKU_STORE_COST_PRE P 
    LEFT OUTER JOIN
        SKU_STORE_COST_DAY S 
            ON P.SKU_NBR = S.SKU_NBR 
            AND P.STORE_NBR = S.STORE_NBR 
            AND P.VENDOR_ID = S.VENDOR_ID 
            AND P.PURCH_ORG_CD = S.PURCH_ORG_CD 
            AND P.COND_TYPE_CD = S.COND_TYPE_CD 
            AND P.PURCH_INFO_CD = S.PURCH_INFO_CD 
            AND P.COND_END_DT = S.COND_END_DT""")

df_2.createOrReplaceTempView("ASQ_SHORTCUT_TO_SKU_STORE_COST_PRE_2")

# COMMAND ----------
# DBTITLE 1, UPD_Insert_Update_3


df_3=spark.sql("""
    SELECT
        SKU_NBR AS SKU_NBR,
        STORE_NBR AS STORE_NBR,
        VENDOR_ID AS VENDOR_ID,
        PURCH_ORG_CD AS PURCH_ORG_CD,
        COND_TYPE_CD AS COND_TYPE_CD,
        PURCH_INFO_CD AS PURCH_INFO_CD,
        COND_END_DT AS COND_END_DT,
        DELETE_IND AS DELETE_IND,
        COND_EFF_DT AS COND_EFF_DT,
        COND_RECORD_NBR AS COND_RECORD_NBR,
        COND_AMT AS COND_AMT,
        PROMOTION_CD AS PROMOTION_CD,
        COND_RT_UNIT AS COND_RT_UNIT,
        COND_PRICE_UNIT AS COND_PRICE_UNIT,
        COND_UNIT AS COND_UNIT,
        UNIT_NUMERATOR AS UNIT_NUMERATOR,
        UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
        LOAD_DT AS LOAD_DT,
        UPDATE_FLAG AS UPDATE_FLAG,
        Monotonically_Increasing_Id AS Monotonically_Increasing_Id 
    FROM
        ASQ_SHORTCUT_TO_SKU_STORE_COST_PRE_2""")

df_3.createOrReplaceTempView("UPD_Insert_Update_3")

# COMMAND ----------
# DBTITLE 1, SKU_STORE_COST_DAY


spark.sql("""INSERT INTO SKU_STORE_COST_DAY SELECT SKU_NBR AS SKU_NBR,
STORE_NBR AS STORE_NBR,
VENDOR_ID AS VENDOR_ID,
PURCH_ORG_CD AS PURCH_ORG_CD,
COND_TYPE_CD AS COND_TYPE_CD,
PURCH_INFO_CD AS PURCH_INFO_CD,
COND_END_DT AS COND_END_DT,
DELETE_IND AS DELETE_IND,
COND_EFF_DT AS COND_EFF_DT,
COND_RECORD_NBR AS COND_RECORD_NBR,
COND_AMT AS COND_AMT,
PROMOTION_CD AS PROMOTION_CD,
COND_RT_UNIT AS COND_RT_UNIT,
COND_PRICE_UNIT AS COND_PRICE_UNIT,
COND_UNIT AS COND_UNIT,
UNIT_NUMERATOR AS UNIT_NUMERATOR,
UNIT_DENOMINATOR AS UNIT_DENOMINATOR,
LOAD_DT AS LOAD_DT FROM UPD_Insert_Update_3""")