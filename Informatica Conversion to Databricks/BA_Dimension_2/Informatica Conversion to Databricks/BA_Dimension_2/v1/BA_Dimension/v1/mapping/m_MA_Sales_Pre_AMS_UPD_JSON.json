{"Edges":[{"transformationType":"Source Definition","id":"e-0","source":"","target":"SALES_TRANS_UPC_OFFER"},{"transformationType":"Source Definition","id":"e-1","source":"","target":"MA_SALES_PRE"},{"transformationType":"Source Definition","id":"e-2","source":"","target":"MA_EVENT"},{"transformationType":"Source Qualifier","id":"e-3","source":"MA_EVENT","target":"SQ_Shortcut_to_MA_SALES_PRE"},{"transformationType":"Source Qualifier","id":"e-4","source":"MA_SALES_PRE","target":"SQ_Shortcut_to_MA_SALES_PRE"},{"transformationType":"Source Qualifier","id":"e-5","source":"SALES_TRANS_UPC_OFFER","target":"SQ_Shortcut_to_MA_SALES_PRE"},{"transformationType":"Update Strategy","id":"e-6","source":"SQ_Shortcut_to_MA_SALES_PRE","target":"UPD_UpdateOnly"},{"transformationType":"Target Definition","id":"e-7","source":"UPD_UpdateOnly","target":"MA_SALES_PRE"}],"Nodes":[{"data":{"transformationType":"Source Definition","label":"SALES_TRANS_UPC_OFFER","queries":["df_0=spark.sql(\"\"\"\n    SELECT\n        DAY_DT AS DAY_DT,\n        LOCATION_ID AS LOCATION_ID,\n        SALES_INSTANCE_ID AS SALES_INSTANCE_ID,\n        UPC_ID AS UPC_ID,\n        POS_TXN_SEQ_NBR AS POS_TXN_SEQ_NBR,\n        OFFER_ID AS OFFER_ID,\n        SCAN_SEQ_NBR AS SCAN_SEQ_NBR,\n        UPC_SEQ_NBR AS UPC_SEQ_NBR,\n        OFFER_AMT AS OFFER_AMT,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        SALES_TRANS_UPC_OFFER\"\"\")","df_0.createOrReplaceTempView(\"SALES_TRANS_UPC_OFFER_0\")"]},"id":"SALES_TRANS_UPC_OFFER","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"MA_SALES_PRE","queries":["df_1=spark.sql(\"\"\"\n    SELECT\n        DAY_DT AS DAY_DT,\n        LOCATION_ID AS LOCATION_ID,\n        SALES_INSTANCE_ID AS SALES_INSTANCE_ID,\n        UPC_ID AS UPC_ID,\n        TP_INVOICE_NBR AS TP_INVOICE_NBR,\n        PARENT_UPC_ID AS PARENT_UPC_ID,\n        COMBO_TYPE_CD AS COMBO_TYPE_CD,\n        POS_TXN_SEQ_NBR AS POS_TXN_SEQ_NBR,\n        MA_EVENT_ID AS MA_EVENT_ID,\n        PRODUCT_ID AS PRODUCT_ID,\n        SALES_CUST_CAPTURE_CD AS SALES_CUST_CAPTURE_CD,\n        MA_SALES_AMT AS MA_SALES_AMT,\n        MA_SALES_QTY AS MA_SALES_QTY,\n        EXCH_RATE_PCT AS EXCH_RATE_PCT,\n        RESTATE_FLAG AS RESTATE_FLAG,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        MA_SALES_PRE\"\"\")","df_1.createOrReplaceTempView(\"MA_SALES_PRE_1\")"]},"id":"MA_SALES_PRE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"MA_EVENT","queries":["df_2=spark.sql(\"\"\"\n    SELECT\n        MA_EVENT_ID AS MA_EVENT_ID,\n        OFFER_ID AS OFFER_ID,\n        SAP_DEPT_ID AS SAP_DEPT_ID,\n        PRODUCT_ID AS PRODUCT_ID,\n        COUNTRY_CD AS COUNTRY_CD,\n        START_DT AS START_DT,\n        END_DT AS END_DT,\n        MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\n        LOCATION_ID AS LOCATION_ID,\n        MOVEMENT_ID AS MOVEMENT_ID,\n        VALUATION_CLASS_CD AS VALUATION_CLASS_CD,\n        GL_ACCT_NBR AS GL_ACCT_NBR,\n        LOCATION_TYPE_ID AS LOCATION_TYPE_ID,\n        ROYALTY_BRAND_ID AS ROYALTY_BRAND_ID,\n        BRAND_CD AS BRAND_CD,\n        MA_FORMULA_CD AS MA_FORMULA_CD,\n        FISCAL_MO AS FISCAL_MO,\n        SAP_CATEGORY_ID AS SAP_CATEGORY_ID,\n        FROM_LOCATION_ID AS FROM_LOCATION_ID,\n        SOURCE_VENDOR_ID AS SOURCE_VENDOR_ID,\n        COMPANY_ID AS COMPANY_ID,\n        MA_EVENT_DESC AS MA_EVENT_DESC,\n        EM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,\n        EM_COMMENT AS EM_COMMENT,\n        EM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,\n        EM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,\n        EM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,\n        EM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,\n        EM_VENDOR_ID AS EM_VENDOR_ID,\n        EM_VENDOR_NAME AS EM_VENDOR_NAME,\n        EM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,\n        VENDOR_NAME_TXT AS VENDOR_NAME_TXT,\n        MA_PCT_IND AS MA_PCT_IND,\n        MA_AMT AS MA_AMT,\n        MA_MAX_AMT AS MA_MAX_AMT,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        MA_EVENT\"\"\")","df_2.createOrReplaceTempView(\"MA_EVENT_2\")"]},"id":"MA_EVENT","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_Shortcut_to_MA_SALES_PRE","queries":["df_3=spark.sql(\"\"\"\n    SELECT\n        DAY_DT,\n        LOCATION_ID,\n        SALES_INSTANCE_ID,\n        UPC_ID,\n        TP_INVOICE_NBR,\n        PARENT_UPC_ID,\n        COMBO_TYPE_CD,\n        POS_TXN_SEQ_NBR,\n        MA_EVENT_ID,\n        CASE \n            WHEN MA_SALES_AMT < 0 THEN (ABS(MA_SALES_AMT) + MA_AMT_DIFF) * -1 \n            ELSE MA_SALES_AMT + MA_AMT_DIFF \n        END AS NEW_MA_SALES_AMT \n    FROM\n        (SELECT\n            T1.*,\n            ROW_NUMBER() OVER (PARTITION \n        BY\n            SALES_INSTANCE_ID,\n            OFFER_ID \n        ORDER BY\n            (ABS(OFFER_AMT) - ABS(MA_SALES_AMT)) DESC) AS RNK \n        FROM\n            (SELECT\n                MS.DAY_DT,\n                MS.LOCATION_ID,\n                MS.SALES_INSTANCE_ID,\n                MS.UPC_ID,\n                MS.TP_INVOICE_NBR,\n                MS.PARENT_UPC_ID,\n                MS.COMBO_TYPE_CD,\n                MS.POS_TXN_SEQ_NBR,\n                MS.MA_EVENT_ID,\n                MS.MA_SALES_AMT,\n                ME.OFFER_ID,\n                SO.OFFER_AMT,\n                ((CASE \n                    WHEN MA_PCT_IND = 1 THEN ROUND(SUM(ABS(SO.OFFER_AMT)) OVER (PARTITION \n                BY\n                    SO.SALES_INSTANCE_ID,\n                    SO.OFFER_ID ) * (ME.MA_AMT / 100),\n                    2) \n                    ELSE ME.MA_AMT * SO.OFFER_CNT \n                END) - SUM(ABS(MS.MA_SALES_AMT)) OVER (PARTITION \n            BY\n                MS.SALES_INSTANCE_ID,\n                ME.OFFER_ID )) AS MA_AMT_DIFF \n            FROM\n                MA_SALES_PRE MS,\n                MA_EVENT ME,\n                (SELECT\n                    DISTINCT DAY_DT,\n                    SALES_INSTANCE_ID,\n                    OFFER_ID,\n                    UPC_ID,\n                    POS_TXN_SEQ_NBR,\n                    COUNT(DISTINCT SCAN_SEQ_NBR) OVER (PARTITION \n                BY\n                    DAY_DT,\n                    SALES_INSTANCE_ID,\n                    OFFER_ID ) AS OFFER_CNT,\n                    SUM(OFFER_AMT) OVER (PARTITION \n                BY\n                    DAY_DT,\n                    SALES_INSTANCE_ID,\n                    OFFER_ID,\n                    UPC_ID,\n                    POS_TXN_SEQ_NBR ) AS OFFER_AMT \n                FROM\n                    SALES_TRANS_UPC_OFFER \n                WHERE\n                    DAY_DT >= (\n                        SELECT\n                            MIN(DAY_DT) \n                        FROM\n                            MA_SALES_PRE\n                    )\n                ) SO \n            WHERE\n                MS.MA_EVENT_ID = ME.MA_EVENT_ID \n                AND MS.DAY_DT = SO.DAY_DT \n                AND MS.SALES_INSTANCE_ID = SO.SALES_INSTANCE_ID \n                AND MS.UPC_ID = SO.UPC_ID \n                AND MS.POS_TXN_SEQ_NBR = SO.POS_TXN_SEQ_NBR \n                AND ME.OFFER_ID = SO.OFFER_ID \n                AND ME.MA_EVENT_TYPE_ID = 2 \n                AND ME.MA_EVENT_SOURCE_ID = 6) T1 \n        WHERE\n            MA_AMT_DIFF <> 0 \n            AND ABS(OFFER_AMT) - ABS(MA_SALES_AMT) >= MA_AMT_DIFF\n        ) T2 \n    WHERE\n        RNK = 1\"\"\")","df_3.createOrReplaceTempView(\"SQ_Shortcut_to_MA_SALES_PRE_3\")"]},"id":"SQ_Shortcut_to_MA_SALES_PRE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_Shortcut_to_MA_SALES_PRE","queries":["df_3=spark.sql(\"\"\"\n    SELECT\n        DAY_DT,\n        LOCATION_ID,\n        SALES_INSTANCE_ID,\n        UPC_ID,\n        TP_INVOICE_NBR,\n        PARENT_UPC_ID,\n        COMBO_TYPE_CD,\n        POS_TXN_SEQ_NBR,\n        MA_EVENT_ID,\n        CASE \n            WHEN MA_SALES_AMT < 0 THEN (ABS(MA_SALES_AMT) + MA_AMT_DIFF) * -1 \n            ELSE MA_SALES_AMT + MA_AMT_DIFF \n        END AS NEW_MA_SALES_AMT \n    FROM\n        (SELECT\n            T1.*,\n            ROW_NUMBER() OVER (PARTITION \n        BY\n            SALES_INSTANCE_ID,\n            OFFER_ID \n        ORDER BY\n            (ABS(OFFER_AMT) - ABS(MA_SALES_AMT)) DESC) AS RNK \n        FROM\n            (SELECT\n                MS.DAY_DT,\n                MS.LOCATION_ID,\n                MS.SALES_INSTANCE_ID,\n                MS.UPC_ID,\n                MS.TP_INVOICE_NBR,\n                MS.PARENT_UPC_ID,\n                MS.COMBO_TYPE_CD,\n                MS.POS_TXN_SEQ_NBR,\n                MS.MA_EVENT_ID,\n                MS.MA_SALES_AMT,\n                ME.OFFER_ID,\n                SO.OFFER_AMT,\n                ((CASE \n                    WHEN MA_PCT_IND = 1 THEN ROUND(SUM(ABS(SO.OFFER_AMT)) OVER (PARTITION \n                BY\n                    SO.SALES_INSTANCE_ID,\n                    SO.OFFER_ID ) * (ME.MA_AMT / 100),\n                    2) \n                    ELSE ME.MA_AMT * SO.OFFER_CNT \n                END) - SUM(ABS(MS.MA_SALES_AMT)) OVER (PARTITION \n            BY\n                MS.SALES_INSTANCE_ID,\n                ME.OFFER_ID )) AS MA_AMT_DIFF \n            FROM\n                MA_SALES_PRE MS,\n                MA_EVENT ME,\n                (SELECT\n                    DISTINCT DAY_DT,\n                    SALES_INSTANCE_ID,\n                    OFFER_ID,\n                    UPC_ID,\n                    POS_TXN_SEQ_NBR,\n                    COUNT(DISTINCT SCAN_SEQ_NBR) OVER (PARTITION \n                BY\n                    DAY_DT,\n                    SALES_INSTANCE_ID,\n                    OFFER_ID ) AS OFFER_CNT,\n                    SUM(OFFER_AMT) OVER (PARTITION \n                BY\n                    DAY_DT,\n                    SALES_INSTANCE_ID,\n                    OFFER_ID,\n                    UPC_ID,\n                    POS_TXN_SEQ_NBR ) AS OFFER_AMT \n                FROM\n                    SALES_TRANS_UPC_OFFER \n                WHERE\n                    DAY_DT >= (\n                        SELECT\n                            MIN(DAY_DT) \n                        FROM\n                            MA_SALES_PRE\n                    )\n                ) SO \n            WHERE\n                MS.MA_EVENT_ID = ME.MA_EVENT_ID \n                AND MS.DAY_DT = SO.DAY_DT \n                AND MS.SALES_INSTANCE_ID = SO.SALES_INSTANCE_ID \n                AND MS.UPC_ID = SO.UPC_ID \n                AND MS.POS_TXN_SEQ_NBR = SO.POS_TXN_SEQ_NBR \n                AND ME.OFFER_ID = SO.OFFER_ID \n                AND ME.MA_EVENT_TYPE_ID = 2 \n                AND ME.MA_EVENT_SOURCE_ID = 6) T1 \n        WHERE\n            MA_AMT_DIFF <> 0 \n            AND ABS(OFFER_AMT) - ABS(MA_SALES_AMT) >= MA_AMT_DIFF\n        ) T2 \n    WHERE\n        RNK = 1\"\"\")","df_3.createOrReplaceTempView(\"SQ_Shortcut_to_MA_SALES_PRE_3\")"]},"id":"SQ_Shortcut_to_MA_SALES_PRE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_Shortcut_to_MA_SALES_PRE","queries":["df_3=spark.sql(\"\"\"\n    SELECT\n        DAY_DT,\n        LOCATION_ID,\n        SALES_INSTANCE_ID,\n        UPC_ID,\n        TP_INVOICE_NBR,\n        PARENT_UPC_ID,\n        COMBO_TYPE_CD,\n        POS_TXN_SEQ_NBR,\n        MA_EVENT_ID,\n        CASE \n            WHEN MA_SALES_AMT < 0 THEN (ABS(MA_SALES_AMT) + MA_AMT_DIFF) * -1 \n            ELSE MA_SALES_AMT + MA_AMT_DIFF \n        END AS NEW_MA_SALES_AMT \n    FROM\n        (SELECT\n            T1.*,\n            ROW_NUMBER() OVER (PARTITION \n        BY\n            SALES_INSTANCE_ID,\n            OFFER_ID \n        ORDER BY\n            (ABS(OFFER_AMT) - ABS(MA_SALES_AMT)) DESC) AS RNK \n        FROM\n            (SELECT\n                MS.DAY_DT,\n                MS.LOCATION_ID,\n                MS.SALES_INSTANCE_ID,\n                MS.UPC_ID,\n                MS.TP_INVOICE_NBR,\n                MS.PARENT_UPC_ID,\n                MS.COMBO_TYPE_CD,\n                MS.POS_TXN_SEQ_NBR,\n                MS.MA_EVENT_ID,\n                MS.MA_SALES_AMT,\n                ME.OFFER_ID,\n                SO.OFFER_AMT,\n                ((CASE \n                    WHEN MA_PCT_IND = 1 THEN ROUND(SUM(ABS(SO.OFFER_AMT)) OVER (PARTITION \n                BY\n                    SO.SALES_INSTANCE_ID,\n                    SO.OFFER_ID ) * (ME.MA_AMT / 100),\n                    2) \n                    ELSE ME.MA_AMT * SO.OFFER_CNT \n                END) - SUM(ABS(MS.MA_SALES_AMT)) OVER (PARTITION \n            BY\n                MS.SALES_INSTANCE_ID,\n                ME.OFFER_ID )) AS MA_AMT_DIFF \n            FROM\n                MA_SALES_PRE MS,\n                MA_EVENT ME,\n                (SELECT\n                    DISTINCT DAY_DT,\n                    SALES_INSTANCE_ID,\n                    OFFER_ID,\n                    UPC_ID,\n                    POS_TXN_SEQ_NBR,\n                    COUNT(DISTINCT SCAN_SEQ_NBR) OVER (PARTITION \n                BY\n                    DAY_DT,\n                    SALES_INSTANCE_ID,\n                    OFFER_ID ) AS OFFER_CNT,\n                    SUM(OFFER_AMT) OVER (PARTITION \n                BY\n                    DAY_DT,\n                    SALES_INSTANCE_ID,\n                    OFFER_ID,\n                    UPC_ID,\n                    POS_TXN_SEQ_NBR ) AS OFFER_AMT \n                FROM\n                    SALES_TRANS_UPC_OFFER \n                WHERE\n                    DAY_DT >= (\n                        SELECT\n                            MIN(DAY_DT) \n                        FROM\n                            MA_SALES_PRE\n                    )\n                ) SO \n            WHERE\n                MS.MA_EVENT_ID = ME.MA_EVENT_ID \n                AND MS.DAY_DT = SO.DAY_DT \n                AND MS.SALES_INSTANCE_ID = SO.SALES_INSTANCE_ID \n                AND MS.UPC_ID = SO.UPC_ID \n                AND MS.POS_TXN_SEQ_NBR = SO.POS_TXN_SEQ_NBR \n                AND ME.OFFER_ID = SO.OFFER_ID \n                AND ME.MA_EVENT_TYPE_ID = 2 \n                AND ME.MA_EVENT_SOURCE_ID = 6) T1 \n        WHERE\n            MA_AMT_DIFF <> 0 \n            AND ABS(OFFER_AMT) - ABS(MA_SALES_AMT) >= MA_AMT_DIFF\n        ) T2 \n    WHERE\n        RNK = 1\"\"\")","df_3.createOrReplaceTempView(\"SQ_Shortcut_to_MA_SALES_PRE_3\")"]},"id":"SQ_Shortcut_to_MA_SALES_PRE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Update Strategy","label":"UPD_UpdateOnly","queries":["df_4=spark.sql(\"\"\"\n    SELECT\n        DAY_DT AS DAY_DT,\n        LOCATION_ID AS LOCATION_ID,\n        SALES_INSTANCE_ID AS SALES_INSTANCE_ID,\n        UPC_ID AS UPC_ID,\n        TP_INVOICE_NBR AS TP_INVOICE_NBR,\n        PARENT_UPC_ID AS PARENT_UPC_ID,\n        COMBO_TYPE_CD AS COMBO_TYPE_CD,\n        POS_TXN_SEQ_NBR AS POS_TXN_SEQ_NBR,\n        MA_EVENT_ID AS MA_EVENT_ID,\n        MA_SALES_AMT AS MA_SALES_AMT,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        SQ_Shortcut_to_MA_SALES_PRE_3\"\"\")","df_4.createOrReplaceTempView(\"UPD_UpdateOnly_4\")"]},"id":"UPD_UpdateOnly","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Target Definition","label":"MA_SALES_PRE","queries":["spark.sql(\"\"\"INSERT INTO MA_SALES_PRE SELECT DAY_DT AS DAY_DT,\nLOCATION_ID AS LOCATION_ID,\nSALES_INSTANCE_ID AS SALES_INSTANCE_ID,\nUPC_ID AS UPC_ID,\nTP_INVOICE_NBR AS TP_INVOICE_NBR,\nPARENT_UPC_ID AS PARENT_UPC_ID,\nCOMBO_TYPE_CD AS COMBO_TYPE_CD,\nPOS_TXN_SEQ_NBR AS POS_TXN_SEQ_NBR,\nMA_EVENT_ID AS MA_EVENT_ID,\nPRODUCT_ID AS PRODUCT_ID,\nSALES_CUST_CAPTURE_CD AS SALES_CUST_CAPTURE_CD,\nMA_SALES_AMT AS MA_SALES_AMT,\nMA_SALES_QTY AS MA_SALES_QTY,\nEXCH_RATE_PCT AS EXCH_RATE_PCT,\nRESTATE_FLAG AS RESTATE_FLAG FROM UPD_UpdateOnly_4\"\"\")"]},"id":"MA_SALES_PRE","position":{"x":0,"y":0},"type":"normalNode"}]}