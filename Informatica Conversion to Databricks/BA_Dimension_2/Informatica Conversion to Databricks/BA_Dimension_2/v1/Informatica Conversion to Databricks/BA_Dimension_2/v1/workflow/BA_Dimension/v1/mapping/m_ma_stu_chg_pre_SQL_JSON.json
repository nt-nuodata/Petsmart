{"Edges":[{"transformationType":"Source Definition","id":"e-0","source":"","target":"SQL_TRANSFORM_DUMMY_SOURCE"},{"transformationType":"Source Qualifier","id":"e-1","source":"SQL_TRANSFORM_DUMMY_SOURCE","target":"SQ_Shortcut_to_SQL_TRANSFORM_DUMMY_SOURCE"},{"transformationType":"Custom Transformation","id":"e-2","source":"SQ_Shortcut_to_SQL_TRANSFORM_DUMMY_SOURCE","target":"SQL_INS_and_DUPS_CHECK"},{"transformationType":"Expression","id":"e-3","source":"SQL_INS_and_DUPS_CHECK","target":"EXP_GET_SESSION_INFO"},{"transformationType":"Aggregator","id":"e-4","source":"EXP_GET_SESSION_INFO","target":"AGG"},{"transformationType":"Expression","id":"e-5","source":"AGG","target":"EXP_CREATE_INS_SQL"},{"transformationType":"Custom Transformation","id":"e-6","source":"EXP_CREATE_INS_SQL","target":"SQL_INS_to_SQL_TRANSFORM_LOG"},{"transformationType":"Expression","id":"e-7","source":"SQL_INS_to_SQL_TRANSFORM_LOG","target":"EXP_ABORT_SESSION"},{"transformationType":"Source Definition","id":"e-8","source":"","target":"MA_SALES_TRANS_UPC"},{"transformationType":"Source Definition","id":"e-9","source":"","target":"DAYS"},{"transformationType":"Source Definition","id":"e-10","source":"","target":"MA_EVENT_RESTATE_HIST"},{"transformationType":"Target Definition","id":"e-11","source":"EXP_ABORT_SESSION","target":"SQL_TRANSFORM_DUMMY_TARGET"}],"Nodes":[{"data":{"transformationType":"Source Definition","label":"SQL_TRANSFORM_DUMMY_SOURCE","queries":["df_0=spark.sql(\"\"\"\n    SELECT\n        START_TSTMP AS START_TSTMP,\n        TABLE_NAME AS TABLE_NAME,\n        BEGIN_ROW_CNT AS BEGIN_ROW_CNT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        SQL_TRANSFORM_DUMMY_SOURCE\"\"\")","df_0.createOrReplaceTempView(\"SQL_TRANSFORM_DUMMY_SOURCE_0\")"]},"id":"SQL_TRANSFORM_DUMMY_SOURCE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"SQ_Shortcut_to_SQL_TRANSFORM_DUMMY_SOURCE","queries":["df_1=spark.sql(\"\"\"\n    SELECT\n        CURRENT_TIMESTAMP AS START_TSTMP,\n        'MA_STU_CHG_PRE' AS TABLE_NAME,\n        0 AS BEGIN_ROW_CNT\"\"\")","df_1.createOrReplaceTempView(\"SQ_Shortcut_to_SQL_TRANSFORM_DUMMY_SOURCE_1\")"]},"id":"SQ_Shortcut_to_SQL_TRANSFORM_DUMMY_SOURCE","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Custom Transformation","label":"SQL_INS_and_DUPS_CHECK","queries":["df_2=spark.sql(\"\"\"\n    SELECT\n        BEGIN_ROW_CNT AS BEGIN_ROW_CNT,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id,\n        START_TSTMP AS START_TSTMP,\n        TABLE_NAME AS TABLE_NAME \n    FROM\n        SQ_Shortcut_to_SQL_TRANSFORM_DUMMY_SOURCE_1\"\"\")","df_2.createOrReplaceTempView(\"SQL_INS_and_DUPS_CHECK_2\")"]},"id":"SQL_INS_and_DUPS_CHECK","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_GET_SESSION_INFO","queries":["df_3=spark.sql(\"\"\"\n    SELECT\n        TO_CHAR(START_TSTMP_output,\n        'MM/DD/YYYY HH24:MI:SS') AS START_TSTMP,\n        TO_CHAR(current_timestamp,\n        'MM/DD/YYYY HH24:MI:SS') AS END_TSTMP,\n        $PMWorkflowName AS WORKFLOW_NAME,\n        $PMSessionName AS SESSION_NAME,\n        $PMMappingName AS MAPPING_NAME,\n        TABLE_NAME AS TABLE_NAME,\n        BEGIN_ROW_CNT AS BEGIN_ROW_CNT,\n        INSERT_ROW_CNT AS INSERT_ROW_CNT,\n        DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,\n        IFF(DUPLICATE_ROW_CNT > 0,\n        'There are duplicate records in the table',\n        SQLError) AS SQL_TRANSFORM_ERROR,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        SQL_INS_and_DUPS_CHECK_2\"\"\")","df_3.createOrReplaceTempView(\"EXP_GET_SESSION_INFO_3\")"]},"id":"EXP_GET_SESSION_INFO","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Aggregator","label":"AGG","queries":["df_4=spark.sql(\"\"\"\n    SELECT\n        START_TSTMP AS START_TSTMP,\n        MAX(i_END_TSTMP) AS END_TSTMP,\n        WORKFLOW_NAME AS WORKFLOW_NAME,\n        SESSION_NAME AS SESSION_NAME,\n        MAPPING_NAME AS MAPPING_NAME,\n        TABLE_NAME AS TABLE_NAME,\n        TO_CHAR(MAX(i_BEGIN_ROW_CNT)) AS BEGIN_ROW_CNT,\n        TO_CHAR(SUM(i_INSERT_ROW_CNT)) AS INSERT_ROW_CNT,\n        MAX(i_SQL_TRANSFORM_ERROR) AS SQL_TRANSFORM_ERROR,\n        TO_CHAR(SUM(i_DUPLICATE_ROW_CNT)) AS DUPLICATE_ROW_CNT \n    FROM\n        EXP_GET_SESSION_INFO_3 \n    GROUP BY\n        START_TSTMP,\n        WORKFLOW_NAME,\n        SESSION_NAME,\n        MAPPING_NAME,\n        TABLE_NAME\"\"\")","df_4.createOrReplaceTempView(\"AGG_4\")"]},"id":"AGG","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_CREATE_INS_SQL","queries":["df_5=spark.sql(\"\"\"\n    SELECT\n        START_TSTMP AS START_TSTMP,\n        END_TSTMP AS END_TSTMP,\n        WORKFLOW_NAME AS WORKFLOW_NAME,\n        SESSION_NAME AS SESSION_NAME,\n        MAPPING_NAME AS MAPPING_NAME,\n        TABLE_NAME AS TABLE_NAME,\n        BEGIN_ROW_CNT AS BEGIN_ROW_CNT,\n        INSERT_ROW_CNT AS INSERT_ROW_CNT,\n        DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,\n        SQL_TRANSFORM_ERROR AS SQL_TRANSFORM_ERROR,\n        'INSERT INTO SQL_TRANSFORM_LOG VALUES (TO_DATE(' || CHR(39) || START_TSTMP || CHR(39) || ',' || CHR(39) || 'MM/DD/YYYY HH24:MI:SS' || CHR(39) || '),TO_DATE(' || CHR(39) || END_TSTMP || CHR(39) || ',' || CHR(39) || 'MM/DD/YYYY HH24:MI:SS' || CHR(39) || '), ' || CHR(39) || WORKFLOW_NAME || CHR(39) || ', ' || CHR(39) || SESSION_NAME || CHR(39) || ', ' || CHR(39) || MAPPING_NAME || CHR(39) || ', ' || CHR(39) || TABLE_NAME || CHR(39) || ', ' || CHR(39) || BEGIN_ROW_CNT || CHR(39) || ', ' || CHR(39) || INSERT_ROW_CNT || CHR(39) || ', ' || CHR(39) || DUPLICATE_ROW_CNT || CHR(39) || ',  ' || CHR(39) || SQL_TRANSFORM_ERROR || CHR(39) || ')' AS INSERT_SQL,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        AGG_4\"\"\")","df_5.createOrReplaceTempView(\"EXP_CREATE_INS_SQL_5\")"]},"id":"EXP_CREATE_INS_SQL","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Custom Transformation","label":"SQL_INS_to_SQL_TRANSFORM_LOG","queries":["df_6=spark.sql(\"\"\"\n    SELECT\n        BEGIN_ROW_CNT AS BEGIN_ROW_CNT,\n        DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,\n        END_TSTMP AS END_TSTMP,\n        INSERT_ROW_CNT AS INSERT_ROW_CNT,\n        INSERT_SQL AS INSERT_SQL,\n        MAPPING_NAME AS MAPPING_NAME,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id,\n        SESSION_NAME AS SESSION_NAME,\n        SQL_TRANSFORM_ERROR AS SQL_TRANSFORM_ERROR,\n        START_TSTMP AS START_TSTMP,\n        TABLE_NAME AS TABLE_NAME,\n        WORKFLOW_NAME AS WORKFLOW_NAME \n    FROM\n        EXP_CREATE_INS_SQL_5\"\"\")","df_6.createOrReplaceTempView(\"SQL_INS_to_SQL_TRANSFORM_LOG_6\")"]},"id":"SQL_INS_to_SQL_TRANSFORM_LOG","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_ABORT_SESSION","queries":["df_7=spark.sql(\"\"\"\n    SELECT\n        DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,\n        SQL_TRANSFORM_ERROR AS SQL_TRANSFORM_ERROR,\n        IFF((CAST(DUPLICATE_ROW_CNT_output AS DECIMAL (38,\n        0))) > 0,\n        ABORT('There are duplicates rows in the table'),\n        IIF()) AS ABORT_SESSION,\n        Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        SQL_INS_to_SQL_TRANSFORM_LOG_6\"\"\")","df_7.createOrReplaceTempView(\"EXP_ABORT_SESSION_7\")"]},"id":"EXP_ABORT_SESSION","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"MA_SALES_TRANS_UPC","queries":["df_8=spark.sql(\"\"\"\n    SELECT\n        DAY_DT AS DAY_DT,\n        LOCATION_ID AS LOCATION_ID,\n        SALES_INSTANCE_ID AS SALES_INSTANCE_ID,\n        UPC_ID AS UPC_ID,\n        TP_INVOICE_NBR AS TP_INVOICE_NBR,\n        PARENT_UPC_ID AS PARENT_UPC_ID,\n        COMBO_TYPE_CD AS COMBO_TYPE_CD,\n        POS_TXN_SEQ_NBR AS POS_TXN_SEQ_NBR,\n        MA_EVENT_ID AS MA_EVENT_ID,\n        PRODUCT_ID AS PRODUCT_ID,\n        SALES_CUST_CAPTURE_CD AS SALES_CUST_CAPTURE_CD,\n        MA_SALES_AMT AS MA_SALES_AMT,\n        MA_SALES_QTY AS MA_SALES_QTY,\n        EXCH_RATE_PCT AS EXCH_RATE_PCT,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        MA_SALES_TRANS_UPC\"\"\")","df_8.createOrReplaceTempView(\"MA_SALES_TRANS_UPC_8\")"]},"id":"MA_SALES_TRANS_UPC","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"DAYS","queries":["df_9=spark.sql(\"\"\"\n    SELECT\n        DAY_DT AS DAY_DT,\n        BUSINESS_DAY_FLAG AS BUSINESS_DAY_FLAG,\n        HOLIDAY_FLAG AS HOLIDAY_FLAG,\n        DAY_OF_WK_NAME AS DAY_OF_WK_NAME,\n        DAY_OF_WK_NAME_ABBR AS DAY_OF_WK_NAME_ABBR,\n        DAY_OF_WK_NBR AS DAY_OF_WK_NBR,\n        CAL_DAY_OF_MO_NBR AS CAL_DAY_OF_MO_NBR,\n        CAL_DAY_OF_YR_NBR AS CAL_DAY_OF_YR_NBR,\n        CAL_WK AS CAL_WK,\n        CAL_WK_NBR AS CAL_WK_NBR,\n        CAL_MO AS CAL_MO,\n        CAL_MO_NBR AS CAL_MO_NBR,\n        CAL_MO_NAME AS CAL_MO_NAME,\n        CAL_MO_NAME_ABBR AS CAL_MO_NAME_ABBR,\n        CAL_QTR AS CAL_QTR,\n        CAL_QTR_NBR AS CAL_QTR_NBR,\n        CAL_HALF AS CAL_HALF,\n        CAL_YR AS CAL_YR,\n        FISCAL_DAY_OF_MO_NBR AS FISCAL_DAY_OF_MO_NBR,\n        FISCAL_DAY_OF_YR_NBR AS FISCAL_DAY_OF_YR_NBR,\n        FISCAL_WK AS FISCAL_WK,\n        FISCAL_WK_NBR AS FISCAL_WK_NBR,\n        FISCAL_MO AS FISCAL_MO,\n        FISCAL_MO_NBR AS FISCAL_MO_NBR,\n        FISCAL_MO_NAME AS FISCAL_MO_NAME,\n        FISCAL_MO_NAME_ABBR AS FISCAL_MO_NAME_ABBR,\n        FISCAL_QTR AS FISCAL_QTR,\n        FISCAL_QTR_NBR AS FISCAL_QTR_NBR,\n        FISCAL_HALF AS FISCAL_HALF,\n        FISCAL_YR AS FISCAL_YR,\n        LYR_WEEK_DT AS LYR_WEEK_DT,\n        LWK_WEEK_DT AS LWK_WEEK_DT,\n        WEEK_DT AS WEEK_DT,\n        EST_TIME_CONV_AMT AS EST_TIME_CONV_AMT,\n        EST_TIME_CONV_HRS AS EST_TIME_CONV_HRS,\n        ES0_TIME_CONV_AMT AS ES0_TIME_CONV_AMT,\n        ES0_TIME_CONV_HRS AS ES0_TIME_CONV_HRS,\n        CST_TIME_CONV_AMT AS CST_TIME_CONV_AMT,\n        CST_TIME_CONV_HRS AS CST_TIME_CONV_HRS,\n        CS0_TIME_CONV_AMT AS CS0_TIME_CONV_AMT,\n        CS0_TIME_CONV_HRS AS CS0_TIME_CONV_HRS,\n        MST_TIME_CONV_AMT AS MST_TIME_CONV_AMT,\n        MST_TIME_CONV_HRS AS MST_TIME_CONV_HRS,\n        MS0_TIME_CONV_AMT AS MS0_TIME_CONV_AMT,\n        MS0_TIME_CONV_HRS AS MS0_TIME_CONV_HRS,\n        PST_TIME_CONV_AMT AS PST_TIME_CONV_AMT,\n        PST_TIME_CONV_HRS AS PST_TIME_CONV_HRS,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        DAYS\"\"\")","df_9.createOrReplaceTempView(\"DAYS_9\")"]},"id":"DAYS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"MA_EVENT_RESTATE_HIST","queries":["df_10=spark.sql(\"\"\"\n    SELECT\n        LOAD_DT AS LOAD_DT,\n        MA_EVENT_ID AS MA_EVENT_ID,\n        OFFER_ID AS OFFER_ID,\n        SAP_DEPT_ID AS SAP_DEPT_ID,\n        PRODUCT_ID AS PRODUCT_ID,\n        COUNTRY_CD AS COUNTRY_CD,\n        START_DT AS START_DT,\n        END_DT AS END_DT,\n        MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\n        LOCATION_ID AS LOCATION_ID,\n        MOVEMENT_ID AS MOVEMENT_ID,\n        VALUATION_CLASS_CD AS VALUATION_CLASS_CD,\n        GL_ACCT_NBR AS GL_ACCT_NBR,\n        LOCATION_TYPE_ID AS LOCATION_TYPE_ID,\n        ROYALTY_BRAND_ID AS ROYALTY_BRAND_ID,\n        BRAND_CD AS BRAND_CD,\n        MA_FORMULA_CD AS MA_FORMULA_CD,\n        FISCAL_MO AS FISCAL_MO,\n        SAP_CATEGORY_ID AS SAP_CATEGORY_ID,\n        FROM_LOCATION_ID AS FROM_LOCATION_ID,\n        SOURCE_VENDOR AS SOURCE_VENDOR,\n        MA_EVENT_DESC AS MA_EVENT_DESC,\n        EM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,\n        EM_COMMENT AS EM_COMMENT,\n        EM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,\n        EM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,\n        EM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,\n        EM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,\n        EM_VENDOR_ID AS EM_VENDOR_ID,\n        EM_VENDOR_NAME AS EM_VENDOR_NAME,\n        EM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,\n        VENDOR_NAME_TXT AS VENDOR_NAME_TXT,\n        MA_PCT_IND AS MA_PCT_IND,\n        MA_AMT AS MA_AMT,\n        MA_MAX_AMT AS MA_MAX_AMT,\n        INS_UPD_DEL_FLAG AS INS_UPD_DEL_FLAG,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        MA_EVENT_RESTATE_HIST\"\"\")","df_10.createOrReplaceTempView(\"MA_EVENT_RESTATE_HIST_10\")"]},"id":"MA_EVENT_RESTATE_HIST","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Target Definition","label":"SQL_TRANSFORM_DUMMY_TARGET","queries":["spark.sql(\"\"\"INSERT INTO SQL_TRANSFORM_DUMMY_TARGET SELECT DUPLICATE_ROW_CNT AS DUPLICATE_ROW_CNT,\nSQL_TRANSFORM_ERROR AS SQL_TRANSFORM_ERROR,\nABORT_SESSION AS ABORT_SESSION FROM EXP_ABORT_SESSION_7\"\"\")"]},"id":"SQL_TRANSFORM_DUMMY_TARGET","position":{"x":0,"y":0},"type":"normalNode"}]}