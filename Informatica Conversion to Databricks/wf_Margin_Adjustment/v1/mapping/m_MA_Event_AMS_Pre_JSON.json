{"Edges":[{"transformationType":"Sequence","id":"e-0","source":"","target":"SEQ_MA_EVENT_ID"},{"transformationType":"Source Definition","id":"e-1","source":"","target":"AMS_OFFER_CHARGEBACK"},{"transformationType":"Source Definition","id":"e-2","source":"","target":"AMS_OFFER_DISCOUNT"},{"transformationType":"Source Definition","id":"e-3","source":"","target":"AMS_OFFER"},{"transformationType":"Source Definition","id":"e-4","source":"","target":"AMS_OFFER_SUBMISSION"},{"transformationType":"Source Definition","id":"e-5","source":"","target":"MA_EVENT"},{"transformationType":"Source Qualifier","id":"e-6","source":"MA_EVENT","target":"MA_EVENT_EXISTING"},{"transformationType":"Source Qualifier","id":"e-7","source":"AMS_OFFER_SUBMISSION","target":"MA_EVENT_EXISTING"},{"transformationType":"Source Qualifier","id":"e-8","source":"AMS_OFFER","target":"MA_EVENT_EXISTING"},{"transformationType":"Source Qualifier","id":"e-9","source":"AMS_OFFER_CHARGEBACK","target":"MA_EVENT_EXISTING"},{"transformationType":"Source Qualifier","id":"e-10","source":"MA_EVENT","target":"MA_EVENT_NEW"},{"transformationType":"Source Qualifier","id":"e-11","source":"AMS_OFFER_SUBMISSION","target":"MA_EVENT_NEW"},{"transformationType":"Source Qualifier","id":"e-12","source":"AMS_OFFER","target":"MA_EVENT_NEW"},{"transformationType":"Source Qualifier","id":"e-13","source":"AMS_OFFER_CHARGEBACK","target":"MA_EVENT_NEW"},{"transformationType":"Expression","id":"e-14","source":"SEQ_MA_EVENT_ID","target":"EXP_NEW"},{"transformationType":"Expression","id":"e-15","source":"MA_EVENT_NEW","target":"EXP_NEW"},{"transformationType":"Custom Transformation","id":"e-16","source":"MA_EVENT_EXISTING","target":"UNI_AMS"},{"transformationType":"Custom Transformation","id":"e-17","source":"EXP_NEW","target":"UNI_AMS"},{"transformationType":"Target Definition","id":"e-18","source":"UNI_AMS","target":"MA_EVENT_AMS_PRE"}],"Nodes":[{"data":{"transformationType":"Sequence","label":"SEQ_MA_EVENT_ID","queries":["spark.sql(\"\"\"CREATE TABLE SEQ_MA_EVENT_ID(NEXTVAL BIGINT,\nCURRVAL BIGINT,\nIncrement_By Int);\"\"\")","spark.sql(\"\"\"INSERT INTO SEQ_MA_EVENT_ID(NEXTVAL BIGINT,\nCURRVAL BIGINT,\nIncrement_By Int) VALUES(2, 1, 1)\"\"\")"]},"id":"SEQ_MA_EVENT_ID","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"AMS_OFFER_CHARGEBACK","queries":["df_1=spark.sql(\"\"\"\n    SELECT\n        OFFER_CHARGEBACK_ID AS OFFER_CHARGEBACK_ID,\n        OFFER_CHARGEBACK_DESC AS OFFER_CHARGEBACK_DESC,\n        ITEM_DISC_IND AS ITEM_DISC_IND,\n        POS_DISCOUNT_TYPE_CD AS POS_DISCOUNT_TYPE_CD,\n        POS_DISCOUNT_TYPE_ID AS POS_DISCOUNT_TYPE_ID,\n        UPDATE_TSTMP AS UPDATE_TSTMP,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        AMS_OFFER_CHARGEBACK\"\"\")","df_1.createOrReplaceTempView(\"AMS_OFFER_CHARGEBACK_1\")"]},"id":"AMS_OFFER_CHARGEBACK","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"AMS_OFFER_DISCOUNT","queries":["df_2=spark.sql(\"\"\"\n    SELECT\n        OFFER_ID AS OFFER_ID,\n        TIER_ID AS TIER_ID,\n        DISCOUNT_TYPE_ID AS DISCOUNT_TYPE_ID,\n        OFFER_CHARGEBACK_ID AS OFFER_CHARGEBACK_ID,\n        DISCOUNT_AMT_TYPE_ID AS DISCOUNT_AMT_TYPE_ID,\n        DISCOUNT_AMT AS DISCOUNT_AMT,\n        DISCOUNT_LIMIT_QTY AS DISCOUNT_LIMIT_QTY,\n        DISCOUNT_LIMIT_WEIGHT AS DISCOUNT_LIMIT_WEIGHT,\n        DISCOUNT_LIMIT_AMT AS DISCOUNT_LIMIT_AMT,\n        DISCOUNT_RECEIPT_TXT AS DISCOUNT_RECEIPT_TXT,\n        DISCOUNT_UP_TO_AMT AS DISCOUNT_UP_TO_AMT,\n        ALLOW_MARKUP_IND AS ALLOW_MARKUP_IND,\n        FLEX_NEGATIVE_IND AS FLEX_NEGATIVE_IND,\n        PRODUCT_GROUP_ID AS PRODUCT_GROUP_ID,\n        EXCLUDED_PRODUCT_GROUP_ID AS EXCLUDED_PRODUCT_GROUP_ID,\n        UPDATE_TSTMP AS UPDATE_TSTMP,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        AMS_OFFER_DISCOUNT\"\"\")","df_2.createOrReplaceTempView(\"AMS_OFFER_DISCOUNT_2\")"]},"id":"AMS_OFFER_DISCOUNT","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"AMS_OFFER","queries":["df_3=spark.sql(\"\"\"\n    SELECT\n        OFFER_ID AS OFFER_ID,\n        IS_TEMPLATE_IND AS IS_TEMPLATE_IND,\n        FROM_TEMPLATE_IND AS FROM_TEMPLATE_IND,\n        OFFER_NAME AS OFFER_NAME,\n        OFFER_DESC AS OFFER_DESC,\n        OFFER_CATEGORY_ID AS OFFER_CATEGORY_ID,\n        OFFER_PRIORITY AS OFFER_PRIORITY,\n        OFFER_START_DT AS OFFER_START_DT,\n        OFFER_END_DT AS OFFER_END_DT,\n        OFFER_LIMIT_TYPE_ID AS OFFER_LIMIT_TYPE_ID,\n        OFFER_LIMIT_QTY AS OFFER_LIMIT_QTY,\n        OFFER_LIMIT_PERIOD_DAYS AS OFFER_LIMIT_PERIOD_DAYS,\n        SYS_CREATE_TSTMP AS SYS_CREATE_TSTMP,\n        SYS_UPDATE_TSTMP AS SYS_UPDATE_TSTMP,\n        DELETE_FLAG AS DELETE_FLAG,\n        STATUS_FLAG AS STATUS_FLAG,\n        OFFER_STATUS_ID AS OFFER_STATUS_ID,\n        EMPLOYEES_ONLY_IND AS EMPLOYEES_ONLY_IND,\n        EMPLOYEES_EXCLUDED_IND AS EMPLOYEES_EXCLUDED_IND,\n        SEND_ISSUANCE_IND AS SEND_ISSUANCE_IND,\n        VENDOR_COUPON_CD AS VENDOR_COUPON_CD,\n        TIER_LEVEL_CNT AS TIER_LEVEL_CNT,\n        DISC_EVAL_TYPE_ID AS DISC_EVAL_TYPE_ID,\n        UPDATE_TSTMP AS UPDATE_TSTMP,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        AMS_OFFER\"\"\")","df_3.createOrReplaceTempView(\"AMS_OFFER_3\")"]},"id":"AMS_OFFER","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"AMS_OFFER_SUBMISSION","queries":["df_4=spark.sql(\"\"\"\n    SELECT\n        AMS_OFFER_SUBMISSION_ID AS AMS_OFFER_SUBMISSION_ID,\n        BUSINESS_OWNER AS BUSINESS_OWNER,\n        APPROVER AS APPROVER,\n        OFFER_DEPT_AND_DIV AS OFFER_DEPT_AND_DIV,\n        OFFER_NAME AS OFFER_NAME,\n        OFFER_DESC AS OFFER_DESC,\n        DEFERRED_REVENUE AS DEFERRED_REVENUE,\n        LEGACY_PB_OFFER_IND AS LEGACY_PB_OFFER_IND,\n        VENDOR_FUNDED_TYPE AS VENDOR_FUNDED_TYPE,\n        VENDOR_FUNDED_VALUE AS VENDOR_FUNDED_VALUE,\n        VENDOR_FUNDED_LIMIT AS VENDOR_FUNDED_LIMIT,\n        MFG_VENDOR_BRAND_NAME AS MFG_VENDOR_BRAND_NAME,\n        OFFER_MEDIA AS OFFER_MEDIA,\n        OFFER_PATH AS OFFER_PATH,\n        PLANNER_PERIOD AS PLANNER_PERIOD,\n        START_DT AS START_DT,\n        EXP_DT AS EXP_DT,\n        OFFER_TIME_BASED_IND AS OFFER_TIME_BASED_IND,\n        OFFER_TIME_DESC AS OFFER_TIME_DESC,\n        US_OFFER_IND AS US_OFFER_IND,\n        PR_OFFER_IND AS PR_OFFER_IND,\n        CA_OFFER_IND AS CA_OFFER_IND,\n        STORE_LIST AS STORE_LIST,\n        CUSTOMER_GROUP AS CUSTOMER_GROUP,\n        QUALIFYING_PRODUCT AS QUALIFYING_PRODUCT,\n        QUALIFYING_PRODUCT_DTL AS QUALIFYING_PRODUCT_DTL,\n        QUALIFYING_PRODUCT_CONDITION AS QUALIFYING_PRODUCT_CONDITION,\n        BUY_SPEND_REQ AS BUY_SPEND_REQ,\n        BUY_SPEND_REQ_DTL AS BUY_SPEND_REQ_DTL,\n        MIN_UNIT_PRICE AS MIN_UNIT_PRICE,\n        TIERED_OFFER_IND AS TIERED_OFFER_IND,\n        TIERED_OFFER_DESC AS TIERED_OFFER_DESC,\n        OFFER_QUALIFICATION_TIMEFRAME AS OFFER_QUALIFICATION_TIMEFRAME,\n        OFFER_QUALIFICATION_TIMEFRAME_DTL AS OFFER_QUALIFICATION_TIMEFRAME_DTL,\n        REWARD_PRODUCT AS REWARD_PRODUCT,\n        REWARD_PRODUCT_DTL AS REWARD_PRODUCT_DTL,\n        REWARD AS REWARD,\n        REWARD_DTL AS REWARD_DTL,\n        REWARD_LEVEL AS REWARD_LEVEL,\n        REWARD_ITEM_QTY AS REWARD_ITEM_QTY,\n        MAX_DISC AS MAX_DISC,\n        OFFER_LIMITATION AS OFFER_LIMITATION,\n        OFFER_LIMITATION_DTL AS OFFER_LIMITATION_DTL,\n        MUTUALLY_EXCLUSIVE_OFFER_IND AS MUTUALLY_EXCLUSIVE_OFFER_IND,\n        RECEIPT_TXT AS RECEIPT_TXT,\n        ISSUANCE_MESSAGE AS ISSUANCE_MESSAGE,\n        OFFER_STATUS AS OFFER_STATUS,\n        UAT_TEST_STATUS AS UAT_TEST_STATUS,\n        CANCELLED_IND AS CANCELLED_IND,\n        SCHED_OFFER_DEPLOYMENT_DT AS SCHED_OFFER_DEPLOYMENT_DT,\n        APPROVAL_DTL AS APPROVAL_DTL,\n        UPCA_NBR_TXT AS UPCA_NBR_TXT,\n        CATEGORY_CD_AND_NAME AS CATEGORY_CD_AND_NAME,\n        AMS_OFFER_ID AS AMS_OFFER_ID,\n        AMS_TEMPLATE AS AMS_TEMPLATE,\n        CREATED_BY AS CREATED_BY,\n        MODIFIED_BY AS MODIFIED_BY,\n        UPDATE_TSTMP AS UPDATE_TSTMP,\n        LOAD_TSTMP AS LOAD_TSTMP,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        AMS_OFFER_SUBMISSION\"\"\")","df_4.createOrReplaceTempView(\"AMS_OFFER_SUBMISSION_4\")"]},"id":"AMS_OFFER_SUBMISSION","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Definition","label":"MA_EVENT","queries":["df_5=spark.sql(\"\"\"\n    SELECT\n        MA_EVENT_ID AS MA_EVENT_ID,\n        OFFER_ID AS OFFER_ID,\n        SAP_DEPT_ID AS SAP_DEPT_ID,\n        PRODUCT_ID AS PRODUCT_ID,\n        COUNTRY_CD AS COUNTRY_CD,\n        START_DT AS START_DT,\n        END_DT AS END_DT,\n        MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\n        LOCATION_ID AS LOCATION_ID,\n        MOVEMENT_ID AS MOVEMENT_ID,\n        VALUATION_CLASS_CD AS VALUATION_CLASS_CD,\n        GL_ACCT_NBR AS GL_ACCT_NBR,\n        LOCATION_TYPE_ID AS LOCATION_TYPE_ID,\n        ROYALTY_BRAND_ID AS ROYALTY_BRAND_ID,\n        BRAND_CD AS BRAND_CD,\n        MA_FORMULA_CD AS MA_FORMULA_CD,\n        FISCAL_MO AS FISCAL_MO,\n        SAP_CATEGORY_ID AS SAP_CATEGORY_ID,\n        FROM_LOCATION_ID AS FROM_LOCATION_ID,\n        SOURCE_VENDOR_ID AS SOURCE_VENDOR_ID,\n        COMPANY_ID AS COMPANY_ID,\n        MA_EVENT_DESC AS MA_EVENT_DESC,\n        EM_VENDOR_FUNDING_ID AS EM_VENDOR_FUNDING_ID,\n        EM_COMMENT AS EM_COMMENT,\n        EM_BILL_ALT_VENDOR_FLAG AS EM_BILL_ALT_VENDOR_FLAG,\n        EM_ALT_VENDOR_ID AS EM_ALT_VENDOR_ID,\n        EM_ALT_VENDOR_NAME AS EM_ALT_VENDOR_NAME,\n        EM_ALT_VENDOR_COUNTRY_CD AS EM_ALT_VENDOR_COUNTRY_CD,\n        EM_VENDOR_ID AS EM_VENDOR_ID,\n        EM_VENDOR_NAME AS EM_VENDOR_NAME,\n        EM_VENDOR_COUNTRY_CD AS EM_VENDOR_COUNTRY_CD,\n        VENDOR_NAME_TXT AS VENDOR_NAME_TXT,\n        MA_PCT_IND AS MA_PCT_IND,\n        MA_AMT AS MA_AMT,\n        MA_MAX_AMT AS MA_MAX_AMT,\n        UPDATE_DT AS UPDATE_DT,\n        LOAD_DT AS LOAD_DT,\n        monotonically_increasing_id() AS Monotonically_Increasing_Id \n    FROM\n        MA_EVENT\"\"\")","df_5.createOrReplaceTempView(\"MA_EVENT_5\")"]},"id":"MA_EVENT","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"MA_EVENT_EXISTING","queries":["df_6=spark.sql(\"\"\"\n    WITH AMS_OFFER_VF AS (SELECT\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END AS MA_PCT_IND,\n        MAX(O.UPDATE_TSTMP) AS UPDATE_TSTMP \n    FROM\n        AMS_OFFER_SUBMISSION O,\n        (SELECT\n            OFFER_ID,\n            MAX(OFFER_CHARGEBACK_ID) AS OFFER_CHARGEBACK_ID \n        FROM\n            ams_offer_discount \n        WHERE\n            OFFER_CHARGEBACK_ID IS NOT NULL \n        GROUP BY\n            OFFER_ID) R,\n        AMS_OFFER_CHARGEBACK C \n    WHERE\n        R.OFFER_ID = O.AMS_OFFER_ID \n        AND R.OFFER_CHARGEBACK_ID = C.OFFER_CHARGEBACK_ID \n        AND C.ITEM_DISC_IND = 1 \n        AND TRIM(O.VENDOR_FUNDED_TYPE) IN ('%', '$') \n        AND O.VENDOR_FUNDED_VALUE IS NOT NULL \n        AND O.CANCELLED_IND = 0 \n    GROUP BY\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END \n    HAVING\n        COUNT(*) = 1) SELECT\n            E.MA_EVENT_ID,\n            A.OFFER_ID,\n            A.OFFER_START_DT,\n            A.OFFER_END_DT,\n            2 AS MA_EVENT_TYPE_ID,\n            6 AS MA_EVENT_SOURCE_ID,\n            A.OFFER_NAME AS MA_EVENT_DESC,\n            TT.MA_PCT_IND,\n            TT.VENDOR_FUNDED_VALUE AS MA_AMT,\n            TT.VENDOR_FUNDED_LIMIT AS MA_MAX_AMT,\n            CASE \n                WHEN TT.AMS_OFFER_ID IS NOT NULL THEN 1 \n                ELSE 0 \n            END AS OFFER_AS_DISC_IND,\n            CASE \n                WHEN TT.AMS_OFFER_ID IS NOT NULL THEN 1 \n                ELSE 0 \n            END AS VENDOR_FUNDED_IND,\n            TT.MFG_VENDOR_BRAND_NAME AS VENDOR_NAME_TXT,\n            0 AS INSERT_FLAG,\n            A.DELETE_FLAG \n        FROM\n            AMS_OFFER A \n        JOIN\n            MA_EVENT E \n                ON A.OFFER_ID = E.OFFER_ID \n        LEFT JOIN\n            AMS_OFFER_VF TT \n                ON A.OFFER_ID = TT.AMS_OFFER_ID \n        WHERE\n            (\n                A.UPDATE_TSTMP > CURRENT_DATE - 2 \n                OR TT.UPDATE_TSTMP > CURRENT_DATE - 2\n            ) \n            AND A.OFFER_ID <> 3949\"\"\")","df_6.createOrReplaceTempView(\"MA_EVENT_EXISTING_6\")"]},"id":"MA_EVENT_EXISTING","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"MA_EVENT_EXISTING","queries":["df_6=spark.sql(\"\"\"\n    WITH AMS_OFFER_VF AS (SELECT\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END AS MA_PCT_IND,\n        MAX(O.UPDATE_TSTMP) AS UPDATE_TSTMP \n    FROM\n        AMS_OFFER_SUBMISSION O,\n        (SELECT\n            OFFER_ID,\n            MAX(OFFER_CHARGEBACK_ID) AS OFFER_CHARGEBACK_ID \n        FROM\n            ams_offer_discount \n        WHERE\n            OFFER_CHARGEBACK_ID IS NOT NULL \n        GROUP BY\n            OFFER_ID) R,\n        AMS_OFFER_CHARGEBACK C \n    WHERE\n        R.OFFER_ID = O.AMS_OFFER_ID \n        AND R.OFFER_CHARGEBACK_ID = C.OFFER_CHARGEBACK_ID \n        AND C.ITEM_DISC_IND = 1 \n        AND TRIM(O.VENDOR_FUNDED_TYPE) IN ('%', '$') \n        AND O.VENDOR_FUNDED_VALUE IS NOT NULL \n        AND O.CANCELLED_IND = 0 \n    GROUP BY\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END \n    HAVING\n        COUNT(*) = 1) SELECT\n            E.MA_EVENT_ID,\n            A.OFFER_ID,\n            A.OFFER_START_DT,\n            A.OFFER_END_DT,\n            2 AS MA_EVENT_TYPE_ID,\n            6 AS MA_EVENT_SOURCE_ID,\n            A.OFFER_NAME AS MA_EVENT_DESC,\n            TT.MA_PCT_IND,\n            TT.VENDOR_FUNDED_VALUE AS MA_AMT,\n            TT.VENDOR_FUNDED_LIMIT AS MA_MAX_AMT,\n            CASE \n                WHEN TT.AMS_OFFER_ID IS NOT NULL THEN 1 \n                ELSE 0 \n            END AS OFFER_AS_DISC_IND,\n            CASE \n                WHEN TT.AMS_OFFER_ID IS NOT NULL THEN 1 \n                ELSE 0 \n            END AS VENDOR_FUNDED_IND,\n            TT.MFG_VENDOR_BRAND_NAME AS VENDOR_NAME_TXT,\n            0 AS INSERT_FLAG,\n            A.DELETE_FLAG \n        FROM\n            AMS_OFFER A \n        JOIN\n            MA_EVENT E \n                ON A.OFFER_ID = E.OFFER_ID \n        LEFT JOIN\n            AMS_OFFER_VF TT \n                ON A.OFFER_ID = TT.AMS_OFFER_ID \n        WHERE\n            (\n                A.UPDATE_TSTMP > CURRENT_DATE - 2 \n                OR TT.UPDATE_TSTMP > CURRENT_DATE - 2\n            ) \n            AND A.OFFER_ID <> 3949\"\"\")","df_6.createOrReplaceTempView(\"MA_EVENT_EXISTING_6\")"]},"id":"MA_EVENT_EXISTING","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"MA_EVENT_EXISTING","queries":["df_6=spark.sql(\"\"\"\n    WITH AMS_OFFER_VF AS (SELECT\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END AS MA_PCT_IND,\n        MAX(O.UPDATE_TSTMP) AS UPDATE_TSTMP \n    FROM\n        AMS_OFFER_SUBMISSION O,\n        (SELECT\n            OFFER_ID,\n            MAX(OFFER_CHARGEBACK_ID) AS OFFER_CHARGEBACK_ID \n        FROM\n            ams_offer_discount \n        WHERE\n            OFFER_CHARGEBACK_ID IS NOT NULL \n        GROUP BY\n            OFFER_ID) R,\n        AMS_OFFER_CHARGEBACK C \n    WHERE\n        R.OFFER_ID = O.AMS_OFFER_ID \n        AND R.OFFER_CHARGEBACK_ID = C.OFFER_CHARGEBACK_ID \n        AND C.ITEM_DISC_IND = 1 \n        AND TRIM(O.VENDOR_FUNDED_TYPE) IN ('%', '$') \n        AND O.VENDOR_FUNDED_VALUE IS NOT NULL \n        AND O.CANCELLED_IND = 0 \n    GROUP BY\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END \n    HAVING\n        COUNT(*) = 1) SELECT\n            E.MA_EVENT_ID,\n            A.OFFER_ID,\n            A.OFFER_START_DT,\n            A.OFFER_END_DT,\n            2 AS MA_EVENT_TYPE_ID,\n            6 AS MA_EVENT_SOURCE_ID,\n            A.OFFER_NAME AS MA_EVENT_DESC,\n            TT.MA_PCT_IND,\n            TT.VENDOR_FUNDED_VALUE AS MA_AMT,\n            TT.VENDOR_FUNDED_LIMIT AS MA_MAX_AMT,\n            CASE \n                WHEN TT.AMS_OFFER_ID IS NOT NULL THEN 1 \n                ELSE 0 \n            END AS OFFER_AS_DISC_IND,\n            CASE \n                WHEN TT.AMS_OFFER_ID IS NOT NULL THEN 1 \n                ELSE 0 \n            END AS VENDOR_FUNDED_IND,\n            TT.MFG_VENDOR_BRAND_NAME AS VENDOR_NAME_TXT,\n            0 AS INSERT_FLAG,\n            A.DELETE_FLAG \n        FROM\n            AMS_OFFER A \n        JOIN\n            MA_EVENT E \n                ON A.OFFER_ID = E.OFFER_ID \n        LEFT JOIN\n            AMS_OFFER_VF TT \n                ON A.OFFER_ID = TT.AMS_OFFER_ID \n        WHERE\n            (\n                A.UPDATE_TSTMP > CURRENT_DATE - 2 \n                OR TT.UPDATE_TSTMP > CURRENT_DATE - 2\n            ) \n            AND A.OFFER_ID <> 3949\"\"\")","df_6.createOrReplaceTempView(\"MA_EVENT_EXISTING_6\")"]},"id":"MA_EVENT_EXISTING","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"MA_EVENT_EXISTING","queries":["df_6=spark.sql(\"\"\"\n    WITH AMS_OFFER_VF AS (SELECT\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END AS MA_PCT_IND,\n        MAX(O.UPDATE_TSTMP) AS UPDATE_TSTMP \n    FROM\n        AMS_OFFER_SUBMISSION O,\n        (SELECT\n            OFFER_ID,\n            MAX(OFFER_CHARGEBACK_ID) AS OFFER_CHARGEBACK_ID \n        FROM\n            ams_offer_discount \n        WHERE\n            OFFER_CHARGEBACK_ID IS NOT NULL \n        GROUP BY\n            OFFER_ID) R,\n        AMS_OFFER_CHARGEBACK C \n    WHERE\n        R.OFFER_ID = O.AMS_OFFER_ID \n        AND R.OFFER_CHARGEBACK_ID = C.OFFER_CHARGEBACK_ID \n        AND C.ITEM_DISC_IND = 1 \n        AND TRIM(O.VENDOR_FUNDED_TYPE) IN ('%', '$') \n        AND O.VENDOR_FUNDED_VALUE IS NOT NULL \n        AND O.CANCELLED_IND = 0 \n    GROUP BY\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END \n    HAVING\n        COUNT(*) = 1) SELECT\n            E.MA_EVENT_ID,\n            A.OFFER_ID,\n            A.OFFER_START_DT,\n            A.OFFER_END_DT,\n            2 AS MA_EVENT_TYPE_ID,\n            6 AS MA_EVENT_SOURCE_ID,\n            A.OFFER_NAME AS MA_EVENT_DESC,\n            TT.MA_PCT_IND,\n            TT.VENDOR_FUNDED_VALUE AS MA_AMT,\n            TT.VENDOR_FUNDED_LIMIT AS MA_MAX_AMT,\n            CASE \n                WHEN TT.AMS_OFFER_ID IS NOT NULL THEN 1 \n                ELSE 0 \n            END AS OFFER_AS_DISC_IND,\n            CASE \n                WHEN TT.AMS_OFFER_ID IS NOT NULL THEN 1 \n                ELSE 0 \n            END AS VENDOR_FUNDED_IND,\n            TT.MFG_VENDOR_BRAND_NAME AS VENDOR_NAME_TXT,\n            0 AS INSERT_FLAG,\n            A.DELETE_FLAG \n        FROM\n            AMS_OFFER A \n        JOIN\n            MA_EVENT E \n                ON A.OFFER_ID = E.OFFER_ID \n        LEFT JOIN\n            AMS_OFFER_VF TT \n                ON A.OFFER_ID = TT.AMS_OFFER_ID \n        WHERE\n            (\n                A.UPDATE_TSTMP > CURRENT_DATE - 2 \n                OR TT.UPDATE_TSTMP > CURRENT_DATE - 2\n            ) \n            AND A.OFFER_ID <> 3949\"\"\")","df_6.createOrReplaceTempView(\"MA_EVENT_EXISTING_6\")"]},"id":"MA_EVENT_EXISTING","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"MA_EVENT_NEW","queries":["df_7=spark.sql(\"\"\"\n    WITH AMS_OFFER_VF AS (SELECT\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END AS MA_PCT_IND,\n        MAX(O.UPDATE_TSTMP) AS UPDATE_TSTMP \n    FROM\n        AMS_OFFER_SUBMISSION O,\n        (SELECT\n            OFFER_ID,\n            MAX(OFFER_CHARGEBACK_ID) AS OFFER_CHARGEBACK_ID \n        FROM\n            ams_offer_discount \n        WHERE\n            OFFER_CHARGEBACK_ID IS NOT NULL \n        GROUP BY\n            OFFER_ID) R,\n        AMS_OFFER_CHARGEBACK C \n    WHERE\n        R.OFFER_ID = O.AMS_OFFER_ID \n        AND R.OFFER_CHARGEBACK_ID = C.OFFER_CHARGEBACK_ID \n        AND C.ITEM_DISC_IND = 1 \n        AND TRIM(O.VENDOR_FUNDED_TYPE) IN ('%', '$') \n        AND O.VENDOR_FUNDED_VALUE IS NOT NULL \n        AND O.CANCELLED_IND = 0 \n    GROUP BY\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END \n    HAVING\n        COUNT(*) = 1) SELECT\n            A.OFFER_ID,\n            A.OFFER_START_DT,\n            A.OFFER_END_DT,\n            2 AS MA_EVENT_TYPE_ID,\n            6 AS MA_EVENT_SOURCE_ID,\n            A.OFFER_NAME AS MA_EVENT_DESC,\n            TT.MA_PCT_IND,\n            TT.VENDOR_FUNDED_VALUE AS MA_AMT,\n            TT.VENDOR_FUNDED_LIMIT AS MA_MAX_AMT,\n            1 AS OFFER_AS_DISC_IND,\n            1 AS VENDOR_FUNDED_IND,\n            TT.MFG_VENDOR_BRAND_NAME AS VENDOR_NAME_TXT,\n            1 AS INSERT_FLAG,\n            A.DELETE_FLAG \n        FROM\n            AMS_OFFER A \n        JOIN\n            AMS_OFFER_VF TT \n                ON A.OFFER_ID = TT.AMS_OFFER_ID \n        LEFT JOIN\n            MA_EVENT E \n                ON A.OFFER_ID = E.OFFER_ID \n        WHERE\n            (\n                A.UPDATE_TSTMP > CURRENT_DATE - 2 \n                OR TT.UPDATE_TSTMP > CURRENT_DATE - 2\n            ) \n            AND A.DELETE_FLAG = 0 \n            AND E.OFFER_ID IS NULL \n            AND A.OFFER_ID <> 3949\"\"\")","df_7.createOrReplaceTempView(\"MA_EVENT_NEW_7\")"]},"id":"MA_EVENT_NEW","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"MA_EVENT_NEW","queries":["df_7=spark.sql(\"\"\"\n    WITH AMS_OFFER_VF AS (SELECT\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END AS MA_PCT_IND,\n        MAX(O.UPDATE_TSTMP) AS UPDATE_TSTMP \n    FROM\n        AMS_OFFER_SUBMISSION O,\n        (SELECT\n            OFFER_ID,\n            MAX(OFFER_CHARGEBACK_ID) AS OFFER_CHARGEBACK_ID \n        FROM\n            ams_offer_discount \n        WHERE\n            OFFER_CHARGEBACK_ID IS NOT NULL \n        GROUP BY\n            OFFER_ID) R,\n        AMS_OFFER_CHARGEBACK C \n    WHERE\n        R.OFFER_ID = O.AMS_OFFER_ID \n        AND R.OFFER_CHARGEBACK_ID = C.OFFER_CHARGEBACK_ID \n        AND C.ITEM_DISC_IND = 1 \n        AND TRIM(O.VENDOR_FUNDED_TYPE) IN ('%', '$') \n        AND O.VENDOR_FUNDED_VALUE IS NOT NULL \n        AND O.CANCELLED_IND = 0 \n    GROUP BY\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END \n    HAVING\n        COUNT(*) = 1) SELECT\n            A.OFFER_ID,\n            A.OFFER_START_DT,\n            A.OFFER_END_DT,\n            2 AS MA_EVENT_TYPE_ID,\n            6 AS MA_EVENT_SOURCE_ID,\n            A.OFFER_NAME AS MA_EVENT_DESC,\n            TT.MA_PCT_IND,\n            TT.VENDOR_FUNDED_VALUE AS MA_AMT,\n            TT.VENDOR_FUNDED_LIMIT AS MA_MAX_AMT,\n            1 AS OFFER_AS_DISC_IND,\n            1 AS VENDOR_FUNDED_IND,\n            TT.MFG_VENDOR_BRAND_NAME AS VENDOR_NAME_TXT,\n            1 AS INSERT_FLAG,\n            A.DELETE_FLAG \n        FROM\n            AMS_OFFER A \n        JOIN\n            AMS_OFFER_VF TT \n                ON A.OFFER_ID = TT.AMS_OFFER_ID \n        LEFT JOIN\n            MA_EVENT E \n                ON A.OFFER_ID = E.OFFER_ID \n        WHERE\n            (\n                A.UPDATE_TSTMP > CURRENT_DATE - 2 \n                OR TT.UPDATE_TSTMP > CURRENT_DATE - 2\n            ) \n            AND A.DELETE_FLAG = 0 \n            AND E.OFFER_ID IS NULL \n            AND A.OFFER_ID <> 3949\"\"\")","df_7.createOrReplaceTempView(\"MA_EVENT_NEW_7\")"]},"id":"MA_EVENT_NEW","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"MA_EVENT_NEW","queries":["df_7=spark.sql(\"\"\"\n    WITH AMS_OFFER_VF AS (SELECT\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END AS MA_PCT_IND,\n        MAX(O.UPDATE_TSTMP) AS UPDATE_TSTMP \n    FROM\n        AMS_OFFER_SUBMISSION O,\n        (SELECT\n            OFFER_ID,\n            MAX(OFFER_CHARGEBACK_ID) AS OFFER_CHARGEBACK_ID \n        FROM\n            ams_offer_discount \n        WHERE\n            OFFER_CHARGEBACK_ID IS NOT NULL \n        GROUP BY\n            OFFER_ID) R,\n        AMS_OFFER_CHARGEBACK C \n    WHERE\n        R.OFFER_ID = O.AMS_OFFER_ID \n        AND R.OFFER_CHARGEBACK_ID = C.OFFER_CHARGEBACK_ID \n        AND C.ITEM_DISC_IND = 1 \n        AND TRIM(O.VENDOR_FUNDED_TYPE) IN ('%', '$') \n        AND O.VENDOR_FUNDED_VALUE IS NOT NULL \n        AND O.CANCELLED_IND = 0 \n    GROUP BY\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END \n    HAVING\n        COUNT(*) = 1) SELECT\n            A.OFFER_ID,\n            A.OFFER_START_DT,\n            A.OFFER_END_DT,\n            2 AS MA_EVENT_TYPE_ID,\n            6 AS MA_EVENT_SOURCE_ID,\n            A.OFFER_NAME AS MA_EVENT_DESC,\n            TT.MA_PCT_IND,\n            TT.VENDOR_FUNDED_VALUE AS MA_AMT,\n            TT.VENDOR_FUNDED_LIMIT AS MA_MAX_AMT,\n            1 AS OFFER_AS_DISC_IND,\n            1 AS VENDOR_FUNDED_IND,\n            TT.MFG_VENDOR_BRAND_NAME AS VENDOR_NAME_TXT,\n            1 AS INSERT_FLAG,\n            A.DELETE_FLAG \n        FROM\n            AMS_OFFER A \n        JOIN\n            AMS_OFFER_VF TT \n                ON A.OFFER_ID = TT.AMS_OFFER_ID \n        LEFT JOIN\n            MA_EVENT E \n                ON A.OFFER_ID = E.OFFER_ID \n        WHERE\n            (\n                A.UPDATE_TSTMP > CURRENT_DATE - 2 \n                OR TT.UPDATE_TSTMP > CURRENT_DATE - 2\n            ) \n            AND A.DELETE_FLAG = 0 \n            AND E.OFFER_ID IS NULL \n            AND A.OFFER_ID <> 3949\"\"\")","df_7.createOrReplaceTempView(\"MA_EVENT_NEW_7\")"]},"id":"MA_EVENT_NEW","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Source Qualifier","label":"MA_EVENT_NEW","queries":["df_7=spark.sql(\"\"\"\n    WITH AMS_OFFER_VF AS (SELECT\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END AS MA_PCT_IND,\n        MAX(O.UPDATE_TSTMP) AS UPDATE_TSTMP \n    FROM\n        AMS_OFFER_SUBMISSION O,\n        (SELECT\n            OFFER_ID,\n            MAX(OFFER_CHARGEBACK_ID) AS OFFER_CHARGEBACK_ID \n        FROM\n            ams_offer_discount \n        WHERE\n            OFFER_CHARGEBACK_ID IS NOT NULL \n        GROUP BY\n            OFFER_ID) R,\n        AMS_OFFER_CHARGEBACK C \n    WHERE\n        R.OFFER_ID = O.AMS_OFFER_ID \n        AND R.OFFER_CHARGEBACK_ID = C.OFFER_CHARGEBACK_ID \n        AND C.ITEM_DISC_IND = 1 \n        AND TRIM(O.VENDOR_FUNDED_TYPE) IN ('%', '$') \n        AND O.VENDOR_FUNDED_VALUE IS NOT NULL \n        AND O.CANCELLED_IND = 0 \n    GROUP BY\n        O.AMS_OFFER_ID,\n        O.MFG_VENDOR_BRAND_NAME,\n        O.VENDOR_FUNDED_VALUE,\n        O.VENDOR_FUNDED_LIMIT,\n        CASE \n            WHEN TRIM(O.VENDOR_FUNDED_TYPE) = '%' THEN 1 \n            ELSE 0 \n        END \n    HAVING\n        COUNT(*) = 1) SELECT\n            A.OFFER_ID,\n            A.OFFER_START_DT,\n            A.OFFER_END_DT,\n            2 AS MA_EVENT_TYPE_ID,\n            6 AS MA_EVENT_SOURCE_ID,\n            A.OFFER_NAME AS MA_EVENT_DESC,\n            TT.MA_PCT_IND,\n            TT.VENDOR_FUNDED_VALUE AS MA_AMT,\n            TT.VENDOR_FUNDED_LIMIT AS MA_MAX_AMT,\n            1 AS OFFER_AS_DISC_IND,\n            1 AS VENDOR_FUNDED_IND,\n            TT.MFG_VENDOR_BRAND_NAME AS VENDOR_NAME_TXT,\n            1 AS INSERT_FLAG,\n            A.DELETE_FLAG \n        FROM\n            AMS_OFFER A \n        JOIN\n            AMS_OFFER_VF TT \n                ON A.OFFER_ID = TT.AMS_OFFER_ID \n        LEFT JOIN\n            MA_EVENT E \n                ON A.OFFER_ID = E.OFFER_ID \n        WHERE\n            (\n                A.UPDATE_TSTMP > CURRENT_DATE - 2 \n                OR TT.UPDATE_TSTMP > CURRENT_DATE - 2\n            ) \n            AND A.DELETE_FLAG = 0 \n            AND E.OFFER_ID IS NULL \n            AND A.OFFER_ID <> 3949\"\"\")","df_7.createOrReplaceTempView(\"MA_EVENT_NEW_7\")"]},"id":"MA_EVENT_NEW","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_NEW","queries":["df_8=spark.sql(\"\"\"\n    SELECT\n        (ROW_NUMBER() OVER (\n    ORDER BY\n        (SELECT\n            NULL)) - 1) * (SELECT\n            Increment_By \n        FROM\n            SEQ_MA_EVENT_ID) + (SELECT\n            NEXTVAL \n        FROM\n            SEQ_MA_EVENT_ID) AS MA_EVENT_ID,\n        SEQ_MA_EVENT_ID.NEXTVAL AS MA_EVENT_ID,\n        MA_EVENT_NEW_7.OFFER_ID AS OFFER_ID,\n        MA_EVENT_NEW_7.OFFER_START_DT AS OFFER_START_DT,\n        MA_EVENT_NEW_7.OFFER_END_DT AS OFFER_END_DT,\n        MA_EVENT_NEW_7.MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        MA_EVENT_NEW_7.MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\n        MA_EVENT_NEW_7.MA_EVENT_DESC AS MA_EVENT_DESC,\n        MA_EVENT_NEW_7.MA_PCT_IND AS MA_PCT_IND,\n        MA_EVENT_NEW_7.MA_AMT AS MA_AMT,\n        MA_EVENT_NEW_7.MA_MAX_AMT AS MA_MAX_AMT,\n        MA_EVENT_NEW_7.OFFER_AS_DISC_IND AS OFFER_AS_DISC_IND,\n        MA_EVENT_NEW_7.VENDOR_FUNDED_IND AS VENDOR_FUNDED_IND,\n        MA_EVENT_NEW_7.VENDOR_NAME_TXT AS VENDOR_NAME_TXT,\n        MA_EVENT_NEW_7.INSERT_FLAG AS INSERT_FLAG,\n        MA_EVENT_NEW_7.DELETE_FLAG AS DELETE_FLAG,\n        SEQ_MA_EVENT_ID.Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        SEQ_MA_EVENT_ID \n    INNER JOIN\n        MA_EVENT_NEW_7 \n            ON SEQ_MA_EVENT_ID.Monotonically_Increasing_Id = MA_EVENT_NEW_7.Monotonically_Increasing_Id\"\"\")","df_8.createOrReplaceTempView(\"EXP_NEW_8\")","spark.sql(\"\"\"UPDATE SEQ_MA_EVENT_ID SET CURRVAL = (SELECT MAX(MA_EVENT_ID) FROM EXP_NEW_8) , NEXTVAL = (SELECT MAX(MA_EVENT_ID) FROM EXP_NEW_8) + (SELECT Increment_By FROM EXP_NEW_8)\"\"\")"]},"id":"EXP_NEW","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Expression","label":"EXP_NEW","queries":["df_8=spark.sql(\"\"\"\n    SELECT\n        (ROW_NUMBER() OVER (\n    ORDER BY\n        (SELECT\n            NULL)) - 1) * (SELECT\n            Increment_By \n        FROM\n            SEQ_MA_EVENT_ID) + (SELECT\n            NEXTVAL \n        FROM\n            SEQ_MA_EVENT_ID) AS MA_EVENT_ID,\n        SEQ_MA_EVENT_ID.NEXTVAL AS MA_EVENT_ID,\n        MA_EVENT_NEW_7.OFFER_ID AS OFFER_ID,\n        MA_EVENT_NEW_7.OFFER_START_DT AS OFFER_START_DT,\n        MA_EVENT_NEW_7.OFFER_END_DT AS OFFER_END_DT,\n        MA_EVENT_NEW_7.MA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\n        MA_EVENT_NEW_7.MA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\n        MA_EVENT_NEW_7.MA_EVENT_DESC AS MA_EVENT_DESC,\n        MA_EVENT_NEW_7.MA_PCT_IND AS MA_PCT_IND,\n        MA_EVENT_NEW_7.MA_AMT AS MA_AMT,\n        MA_EVENT_NEW_7.MA_MAX_AMT AS MA_MAX_AMT,\n        MA_EVENT_NEW_7.OFFER_AS_DISC_IND AS OFFER_AS_DISC_IND,\n        MA_EVENT_NEW_7.VENDOR_FUNDED_IND AS VENDOR_FUNDED_IND,\n        MA_EVENT_NEW_7.VENDOR_NAME_TXT AS VENDOR_NAME_TXT,\n        MA_EVENT_NEW_7.INSERT_FLAG AS INSERT_FLAG,\n        MA_EVENT_NEW_7.DELETE_FLAG AS DELETE_FLAG,\n        SEQ_MA_EVENT_ID.Monotonically_Increasing_Id AS Monotonically_Increasing_Id \n    FROM\n        SEQ_MA_EVENT_ID \n    INNER JOIN\n        MA_EVENT_NEW_7 \n            ON SEQ_MA_EVENT_ID.Monotonically_Increasing_Id = MA_EVENT_NEW_7.Monotonically_Increasing_Id\"\"\")","df_8.createOrReplaceTempView(\"EXP_NEW_8\")","spark.sql(\"\"\"UPDATE SEQ_MA_EVENT_ID SET CURRVAL = (SELECT MAX(MA_EVENT_ID) FROM EXP_NEW_8) , NEXTVAL = (SELECT MAX(MA_EVENT_ID) FROM EXP_NEW_8) + (SELECT Increment_By FROM EXP_NEW_8)\"\"\")"]},"id":"EXP_NEW","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Custom Transformation","label":"UNI_AMS","queries":["df_9=spark.sql(\"\"\"SELECT DELETE_FLAG AS DELETE_FLAG,\nINSERT_FLAG AS INSERT_FLAG,\nMA_AMT AS MA_AMT,\nMA_EVENT_DESC AS MA_EVENT_DESC,\nMA_EVENT_ID AS MA_EVENT_ID,\nMA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\nMA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\nMA_MAX_AMT AS MA_MAX_AMT,\nMA_PCT_IND AS MA_PCT_IND,\nMonotonically_Increasing_Id AS Monotonically_Increasing_Id,\nOFFER_AS_DISC_IND AS OFFER_AS_DISC_IND,\nOFFER_END_DT AS OFFER_END_DT,\nOFFER_ID AS OFFER_ID,\nOFFER_START_DT AS OFFER_START_DT,\nVENDOR_FUNDED_IND AS VENDOR_FUNDED_IND,\nVENDOR_NAME_TXT AS VENDOR_NAME_TXT FROM MA_EVENT_EXISTING_6 UNION ALL SELECT DELETE_FLAG AS DELETE_FLAG,\nINSERT_FLAG AS INSERT_FLAG,\nMA_AMT AS MA_AMT,\nMA_EVENT_DESC AS MA_EVENT_DESC,\nMA_EVENT_ID AS MA_EVENT_ID,\nMA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\nMA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\nMA_MAX_AMT AS MA_MAX_AMT,\nMA_PCT_IND AS MA_PCT_IND,\nMonotonically_Increasing_Id AS Monotonically_Increasing_Id,\nOFFER_AS_DISC_IND AS OFFER_AS_DISC_IND,\nOFFER_END_DT AS OFFER_END_DT,\nOFFER_ID AS OFFER_ID,\nOFFER_START_DT AS OFFER_START_DT,\nVENDOR_FUNDED_IND AS VENDOR_FUNDED_IND,\nVENDOR_NAME_TXT AS VENDOR_NAME_TXT FROM EXP_NEW_8\"\"\")","df_9.createOrReplaceTempView(\"UNI_AMS_9\")"]},"id":"UNI_AMS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Custom Transformation","label":"UNI_AMS","queries":["df_9=spark.sql(\"\"\"SELECT DELETE_FLAG AS DELETE_FLAG,\nINSERT_FLAG AS INSERT_FLAG,\nMA_AMT AS MA_AMT,\nMA_EVENT_DESC AS MA_EVENT_DESC,\nMA_EVENT_ID AS MA_EVENT_ID,\nMA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\nMA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\nMA_MAX_AMT AS MA_MAX_AMT,\nMA_PCT_IND AS MA_PCT_IND,\nMonotonically_Increasing_Id AS Monotonically_Increasing_Id,\nOFFER_AS_DISC_IND AS OFFER_AS_DISC_IND,\nOFFER_END_DT AS OFFER_END_DT,\nOFFER_ID AS OFFER_ID,\nOFFER_START_DT AS OFFER_START_DT,\nVENDOR_FUNDED_IND AS VENDOR_FUNDED_IND,\nVENDOR_NAME_TXT AS VENDOR_NAME_TXT FROM MA_EVENT_EXISTING_6 UNION ALL SELECT DELETE_FLAG AS DELETE_FLAG,\nINSERT_FLAG AS INSERT_FLAG,\nMA_AMT AS MA_AMT,\nMA_EVENT_DESC AS MA_EVENT_DESC,\nMA_EVENT_ID AS MA_EVENT_ID,\nMA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\nMA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\nMA_MAX_AMT AS MA_MAX_AMT,\nMA_PCT_IND AS MA_PCT_IND,\nMonotonically_Increasing_Id AS Monotonically_Increasing_Id,\nOFFER_AS_DISC_IND AS OFFER_AS_DISC_IND,\nOFFER_END_DT AS OFFER_END_DT,\nOFFER_ID AS OFFER_ID,\nOFFER_START_DT AS OFFER_START_DT,\nVENDOR_FUNDED_IND AS VENDOR_FUNDED_IND,\nVENDOR_NAME_TXT AS VENDOR_NAME_TXT FROM EXP_NEW_8\"\"\")","df_9.createOrReplaceTempView(\"UNI_AMS_9\")"]},"id":"UNI_AMS","position":{"x":0,"y":0},"type":"normalNode"},{"data":{"transformationType":"Target Definition","label":"MA_EVENT_AMS_PRE","queries":["spark.sql(\"\"\"INSERT INTO MA_EVENT_AMS_PRE SELECT MA_EVENT_ID AS MA_EVENT_ID,\nOFFER_ID AS OFFER_ID,\nOFFER_START_DT AS START_DT,\nOFFER_END_DT AS END_DT,\nMA_EVENT_TYPE_ID AS MA_EVENT_TYPE_ID,\nMA_EVENT_SOURCE_ID AS MA_EVENT_SOURCE_ID,\nMA_EVENT_DESC AS MA_EVENT_DESC,\nMA_PCT_IND AS MA_PCT_IND,\nMA_AMT AS MA_AMT,\nMA_MAX_AMT AS MA_MAX_AMT,\nOFFER_AS_DISC_IND AS OFFER_AS_DISC_IND,\nVENDOR_FUNDED_IND AS VENDOR_FUNDED_IND,\nVENDOR_NAME_TXT AS VENDOR_NAME_TXT,\nINSERT_FLAG AS INSERT_FLAG,\nDELETE_FLAG AS DELETE_FLAG FROM UNI_AMS_9\"\"\")"]},"id":"MA_EVENT_AMS_PRE","position":{"x":0,"y":0},"type":"normalNode"}]}